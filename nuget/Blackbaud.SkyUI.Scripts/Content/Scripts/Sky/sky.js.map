{
  "version": 3,
  "file": "sky.js",
  "sources": [
    "scripts/sky/src/autofocus/autofocus.js",
    "scripts/sky/src/charts/charts.js",
    "scripts/sky/src/check/check.js",
    "scripts/sky/src/checklist/checklist.js",
    "scripts/sky/src/data/data.js",
    "scripts/sky/src/datefield/datefield.js",
    "scripts/sky/src/daterangepicker/daterangepicker.js",
    "scripts/sky/src/filters/filters.js",
    "scripts/sky/src/format/format.js",
    "scripts/sky/src/grids/columnpicker.js",
    "scripts/sky/src/grids/grids.js",
    "scripts/sky/src/helpbutton/helpbutton.js",
    "scripts/sky/src/helpwidget/helpwidget.js",
    "scripts/sky/src/highlight/highlight.js",
    "scripts/sky/src/mediabreakpoints/mediabreakpoints.js",
    "scripts/sky/src/modal/modal.js",
    "scripts/sky/src/money/money.js",
    "scripts/sky/src/omnibar/omnibar.js",
    "scripts/sky/src/pagination/pagination.js",
    "scripts/sky/src/popover/popover.js",
    "scripts/sky/src/resources/resources.js",
    "scripts/sky/src/scrollintoview/scrollintoview.js",
    "scripts/sky/src/tabs/tabs.js",
    "scripts/sky/src/templating/templating.js",
    "scripts/sky/src/textexpand/textexpand.js",
    "scripts/sky/src/tiles/tiles.js",
    "scripts/sky/src/toast/toast.js",
    "scripts/sky/src/tooltip/tooltip.js",
    "scripts/sky/src/uiselect/uiselect.js",
    "scripts/sky/src/validation/validation.js",
    "scripts/sky/src/viewkeeper/viewkeeper.js",
    "scripts/sky/src/wait/wait.js",
    "scripts/sky/src/window/window.js",
    "scripts/sky/src/module.js",
    "scripts/sky/templates/templates.js.tmp"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AClvkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,W;ACtijnQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjllCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,S;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;AChrhDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACztWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AClvvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACptdn
  "sourceRoot": "../..",
  "sourcesContent": [
    "/*jslint browser: true, plusplus: true */\r\n/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('sky.autofocus', [])\r\n        .directive('bbAutofocus', ['$timeout', function ($timeout) {\r\n            return {\r\n                restrict: 'A',\r\n                link: function ($scope, $element) {\r\n                    /*jslint unparam: true */\r\n                    $timeout(function () {\r\n                        $element[0].focus();\r\n                    }, 100);\r\n                }\r\n            };\r\n        }]);\r\n}());",
    "/*jslint browser: true, plusplus: true */\r\n/*global angular, jQuery */\r\n\r\n(function ($) {\r\n    'use strict';\r\n\r\n    angular.module('sky.charts', ['sky.resources', 'sky.moment', 'sky.format'])\r\n        .directive('bbChartScatterplot', ['$timeout', 'bbFormat', 'bbMoment', 'bbResources', function ($timeout, bbFormat, bbMoment, bbResources) {\r\n            /*\r\n            Custom options:\r\n                mode: Initialize the chart options to a special configuration\r\n                    FixedSeriesMonthTimeline: A series with Y values that are fixed and X values that represent months\r\n\r\n                clickCallback: Callback for when the chart is clicked on\r\n                hoverCallback: Callback for when the chart is hovered over\r\n                moveForward: Callback for when the user moves the series forward\r\n                moveForwardDisabled: Property for the status of the move forward button\r\n                moveBack: Callback for when the user moves the series backward\r\n                moveBackDisabled: Property for the status of the move back button\r\n            */\r\n\r\n            return {\r\n                restrict: 'EA',\r\n                transclude: true,\r\n                templateUrl: 'sky/templates/charts/scatterplot.html',\r\n                scope: {\r\n                    bbChartDataset: '=',\r\n                    bbChartOptions: '='\r\n                },\r\n                controller: ['$scope', function ($scope) {\r\n                    this.enablePopup = function (callback) {\r\n                        if (angular.isFunction(callback)) {\r\n                            $scope.popupCallback = callback;\r\n                            $scope.enableClick = true;\r\n                        }\r\n                    };\r\n                }],\r\n                link: function (scope, el, attributes, controller, transclude) {\r\n                    /*jslint unparam: true */\r\n                    var chartContainer,\r\n                        dataSetInitialized = false,\r\n                        firstXAxisLabelEl,\r\n                        firstYAxisLabelEl,\r\n                        options,\r\n                        optionsInitialized = false,\r\n                        plot,\r\n                        plotEl;\r\n\r\n                    function getNumericCssProp(el, propName) {\r\n                        return parseInt(el.css(propName), 10);\r\n                    }\r\n\r\n                    function getXAxisLabelTop() {\r\n                        if (firstXAxisLabelEl) {\r\n                            return getNumericCssProp(firstXAxisLabelEl, 'top');\r\n                        }\r\n                    }\r\n\r\n                    function getYAxisLabelRight() {\r\n                        if (firstYAxisLabelEl) {\r\n                            return getNumericCssProp(firstYAxisLabelEl, 'left') + getNumericCssProp(firstYAxisLabelEl, 'width');\r\n                        }\r\n                    }\r\n\r\n                    scope.moveBackStyle = function () {\r\n\r\n                        return {\r\n                            'left': getYAxisLabelRight() - 15,\r\n                            'position': 'absolute',\r\n                            'top': getXAxisLabelTop(),\r\n                            'z-index': 2\r\n                        };\r\n                    };\r\n\r\n                    scope.moveForwardStyle = function () {\r\n\r\n                        return {\r\n                            'right': -10,\r\n                            'position': 'absolute',\r\n                            'top': getXAxisLabelTop(),\r\n                            'z-index': 2\r\n                        };\r\n                    };\r\n\r\n                    function initializePlotElement() {\r\n                        var height,\r\n                            width;\r\n\r\n                        width = attributes.width || '100%';\r\n                        height = attributes.height || '100%';\r\n\r\n                        chartContainer = el.children('.bb-chart-container');\r\n                        plotEl = $(chartContainer.children('.bb-chart'));\r\n\r\n                        plotEl.css({\r\n                            width: width,\r\n                            height: height\r\n                        });\r\n                    }\r\n\r\n                    function moveDataWindow(xMin, xMax) {\r\n                        options.xaxis.min = xMin;\r\n                        options.xaxis.max = xMax;\r\n                    }\r\n\r\n                    function loadMoreData(loadedMin, loadedMax, thresholdMin, thresholdMax, loadMoreCallback) {\r\n                        var xPanRange = options.xaxis.panRange;\r\n\r\n                        if (loadMoreCallback && angular.isFunction(loadMoreCallback)) {\r\n                            if ((loadedMin > xPanRange[0]) && (options.xaxis.min < thresholdMin)) {\r\n                                loadMoreCallback('back');\r\n                            }\r\n\r\n                            if ((loadedMax < xPanRange[1]) && (options.xaxis.max > thresholdMax)) {\r\n                                loadMoreCallback('forward');\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    function handlePanMonthTimeline(plot, args) {\r\n                        var loadedMin,\r\n                            loadedMax,\r\n                            loadThreshold,\r\n                            thresholdMin,\r\n                            thresholdMax,\r\n                            xAxis,\r\n                            xAxisOptions;\r\n\r\n                        if (args) {\r\n                            xAxis = args.getAxes().xaxis;\r\n                            xAxisOptions = scope.bbChartOptions.panWindow.xAxis;\r\n\r\n                            moveDataWindow(xAxis.min, xAxis.max);\r\n\r\n                            loadedMin = xAxisOptions.loadedMin();\r\n                            loadedMax = xAxisOptions.loadedMax();\r\n\r\n                            loadThreshold = xAxisOptions.loadThreshold;\r\n\r\n                            thresholdMin = bbMoment(loadedMin).add(loadThreshold, 'month');\r\n                            thresholdMax = bbMoment(loadedMax).add(-loadThreshold, 'month');\r\n\r\n                            loadMoreData(loadedMin, loadedMax, thresholdMin, thresholdMax, xAxisOptions.loadMoreCallback);\r\n                        }\r\n                    }\r\n\r\n                    function panMonthTimeline(direction) {\r\n                        var moveTo,\r\n                            xAxis = plot.getAxes().xaxis,\r\n                            xAxisOptions = scope.bbChartOptions.panWindow.xAxis,\r\n                            numToMove = xAxisOptions.numToMove;\r\n\r\n                        if (direction === 'back') {\r\n                            numToMove = -numToMove;\r\n                        }\r\n\r\n                        moveTo = bbMoment(xAxis.min).add(numToMove, 'month').valueOf();\r\n\r\n                        plot.pan({ left: xAxis.p2c(moveTo) });\r\n                    }\r\n\r\n                    function getFixedSeriesMonthTimelineOptions(numMonthsShown) {\r\n                        var modeTypeOptions,\r\n                            months = [\r\n                                bbResources.month_short_january,\r\n                                bbResources.month_short_february,\r\n                                bbResources.month_short_march,\r\n                                bbResources.month_short_april,\r\n                                bbResources.month_short_may,\r\n                                bbResources.month_short_june,\r\n                                bbResources.month_short_july,\r\n                                bbResources.month_short_august,\r\n                                bbResources.month_short_september,\r\n                                bbResources.month_short_october,\r\n                                bbResources.month_short_november,\r\n                                bbResources.month_short_december\r\n                            ];\r\n\r\n                        modeTypeOptions = {\r\n                            grid: {\r\n                                backgroundColor: {\r\n                                    colors: ['#fff', 'rgb(250, 250, 250)']\r\n                                },\r\n                                borderColor: '#ccc',\r\n                                borderWidth: {\r\n                                    'top': 0,\r\n                                    'right': 0,\r\n                                    'bottom': 1,\r\n                                    'left': 1\r\n                                },\r\n                                clickable: (scope && (scope.enableClick || (scope.bbChartOptions && scope.bbChartOptions.clickCallback))),\r\n                                hoverable: (scope && (scope.enableHover || (scope.bbChartOptions && (scope.bbChartOptions.hoverCallback || scope.bbChartOptions.clickCallback))))\r\n                            },\r\n                            series: {\r\n                                points: {\r\n                                    fill: 1,\r\n                                    fillColor: null,\r\n                                    show: true\r\n                                }\r\n                            },\r\n                            moveBack: function () {\r\n                                panMonthTimeline('back');\r\n                            },\r\n                            moveForward: function () {\r\n                                panMonthTimeline('forward');\r\n                            },\r\n                            pan: {\r\n                                cursor: '-webkit-grab',\r\n                                interactive: true\r\n                            },\r\n                            plotPanCallback: handlePanMonthTimeline,\r\n                            xaxis: {\r\n                                mode: 'time',\r\n                                panRange: [null, null],\r\n                                show: true,\r\n                                tickFormatter: function (val) {\r\n                                    var utcDate = bbMoment.utc(val),\r\n                                        monthNum = utcDate.month(),\r\n                                        month = months[monthNum];\r\n\r\n                                    if (monthNum === 0) {\r\n                                        return bbFormat.escape(month) + '<br />' + bbFormat.escape(utcDate.year());\r\n                                    }\r\n\r\n                                    if (numMonthsShown && numMonthsShown < 12 && numMonthsShown > 0) {\r\n                                        if (monthNum % numMonthsShown === 0) {\r\n                                            return bbFormat.escape(month) + '<br />' + bbFormat.escape(utcDate.year());\r\n                                        }\r\n                                    }\r\n\r\n                                    return month;\r\n                                },\r\n                                tickLength: 0,\r\n                                tickSize: [1, 'month']\r\n                            },\r\n                            yaxis: {\r\n                                min: 0, //Stop the y-axis from jumping when moving to a location with no datapoints\r\n                                panRange: false,\r\n                                show: true,\r\n                                tickLength: 0,\r\n                                tickSize: 1\r\n                            }\r\n                        };\r\n\r\n                        return modeTypeOptions;\r\n                    }\r\n\r\n                    function getDefaultOptions() {\r\n                        var chartOptions = scope.bbChartOptions,\r\n                            defaultOptions;\r\n\r\n                        if (chartOptions && chartOptions.mode) {\r\n                            /*jslint white: true */\r\n                            switch (chartOptions.mode) {\r\n                                case 'FixedSeriesMonthTimeline':\r\n                                    defaultOptions = getFixedSeriesMonthTimelineOptions(chartOptions.numMonthsShown);\r\n                                    break;\r\n                            }\r\n                            /*jslint white: false */\r\n                        }\r\n\r\n                        return defaultOptions || {};\r\n                    }\r\n\r\n                    function initializePanWindow() {\r\n                        var xAxisOptions;\r\n\r\n                        if (scope.bbChartOptions && scope.bbChartOptions.panWindow) {\r\n                            plotEl.addClass('bb-chart-pan');\r\n                            xAxisOptions = scope.bbChartOptions.panWindow.xAxis;\r\n\r\n                            if (xAxisOptions.initialWindow) {\r\n                                moveDataWindow(xAxisOptions.initialWindow.min, xAxisOptions.initialWindow.max);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    function initializeMoveButton(direction) {\r\n                        var moveDisabledPropName,\r\n                            moveProp,\r\n                            movePropName,\r\n                            moveVisiblePropName;\r\n\r\n                        movePropName = 'move' + direction;\r\n                        moveDisabledPropName = movePropName + 'Disabled';\r\n                        moveVisiblePropName = movePropName + 'Visible';\r\n\r\n                        if (scope.bbChartOptions) {\r\n                            moveProp = scope.bbChartOptions[movePropName];\r\n                            scope[moveVisiblePropName] = true;\r\n\r\n                            if (moveProp) {\r\n                                if (angular.isFunction(moveProp)) {\r\n                                    scope[moveDisabledPropName] = function () {\r\n                                        return false;\r\n                                    };\r\n                                    scope[movePropName] = moveProp;\r\n                                }\r\n\r\n                                if (angular.isFunction(scope.bbChartOptions[moveDisabledPropName])) {\r\n                                    scope[moveDisabledPropName] = scope.bbChartOptions[moveDisabledPropName];\r\n                                }\r\n                            } else if (options[movePropName]) {\r\n                                scope[movePropName] = options[movePropName];\r\n                            } else {\r\n                                scope[moveVisiblePropName] = false;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    function initializeOptions() {\r\n                        options = getDefaultOptions();\r\n\r\n                        if (scope.bbChartOptions) {\r\n                            angular.extend(options.xaxis, scope.bbChartOptions.xaxis);\r\n                            angular.extend(options.yaxis, scope.bbChartOptions.yaxis);\r\n                        }\r\n\r\n                        initializeMoveButton('Forward');\r\n                        initializeMoveButton('Back');\r\n                        initializePanWindow();\r\n                    }\r\n\r\n                    function setFixedLocations() {\r\n                        firstXAxisLabelEl = el.find('.flot-text .xAxis .tickLabel:first');\r\n                        firstYAxisLabelEl = el.find('.flot-text .yAxis .tickLabel:first');\r\n                    }\r\n\r\n                    function bindPopup() {\r\n                        if (angular.isFunction(scope.popupCallback)) {\r\n                            plotEl.on('plotclick', function (event, pos, item) {\r\n                                scope.popupCallback(event, pos, item);\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    function bindPan() {\r\n                        if (options && angular.isFunction(options.plotPanCallback)) {\r\n                            plotEl.on('plotpan', function (plot, args) {\r\n                                options.plotPanCallback(plot, args);\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    function initializePlot(plotEl) {\r\n                        function bindPlotEvent(event, binding) {\r\n                            var callbackProp,\r\n                                callbackPropName = event + 'Callback',\r\n                                eventName = 'plot' + event;\r\n\r\n                            plotEl.off(eventName);\r\n\r\n                            if (scope.bbChartOptions) {\r\n                                callbackProp = scope.bbChartOptions[callbackPropName];\r\n\r\n                                if (callbackProp && angular.isFunction(callbackProp)) {\r\n                                    binding(eventName, callbackProp);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        function bindFlotEvent(eventName, callback) {\r\n                            plotEl.on(eventName, function (event, pos, item) {\r\n                                callback(event, pos, item);\r\n                            });\r\n                        }\r\n\r\n                        function bindNavigateEvent(eventName, callback) {\r\n                            plotEl.on(eventName, function (plot, args) {\r\n                                callback(plot, args);\r\n                            });\r\n                        }\r\n\r\n                        plot = $.plot(plotEl, (scope.bbChartDataset || []), options);\r\n\r\n                        bindPlotEvent('click', bindFlotEvent);\r\n                        bindPlotEvent('hover', bindFlotEvent);\r\n                        bindPlotEvent('pan', bindNavigateEvent);\r\n                        bindPopup();\r\n                        bindPan();\r\n\r\n                        setFixedLocations();\r\n\r\n                        if (dataSetInitialized && optionsInitialized) {\r\n                            el.removeClass('bb-chart-rendering');\r\n                        }\r\n                    }\r\n\r\n                    function initialize() {\r\n                        var tries;\r\n\r\n                        function renderChart() {\r\n                            var plotHeight = plotEl[0].clientHeight,\r\n                                plotWidth = plotEl[0].clientWidth;\r\n\r\n                            if ((!plotHeight || plotHeight === 0) && (!plotWidth || plotWidth === 0)) {\r\n                                if (tries <= 100) {\r\n                                    tries = tries + 1;\r\n                                    renderChart.timeoutPromise = $timeout(renderChart, 20);\r\n                                }\r\n                                return;\r\n                            }\r\n\r\n                            initializePlot(plotEl);\r\n                        }\r\n\r\n                        if (renderChart.timeoutPromise) {\r\n                            $timeout.cancel(renderChart.timeoutPromise);\r\n                        }\r\n\r\n                        tries = 0;\r\n                        renderChart();\r\n                    }\r\n\r\n                    function onDatasetChanged() {\r\n                        dataSetInitialized = true;\r\n                        initialize();\r\n                    }\r\n\r\n                    function onOptionsChanged() {\r\n                        if (scope && scope.bbChartOptions) {\r\n                            optionsInitialized = true;\r\n                            initializeOptions();\r\n                            initialize();\r\n                        }\r\n                    }\r\n\r\n                    el.addClass('bb-chart-rendering');\r\n\r\n                    scope.$on('tileRepaint', function () {\r\n                        initialize();\r\n                    });\r\n\r\n                    initializePlotElement();\r\n\r\n                    transclude(function (clone) {\r\n                        el.append(clone);\r\n                    });\r\n\r\n                    scope.$watchCollection('bbChartDataset', onDatasetChanged, true);\r\n                    scope.$watch('bbChartOptions', onOptionsChanged, true);\r\n                    scope.$watch('popupCallback', bindPopup, true);\r\n\r\n                }\r\n            };\r\n        }])\r\n        .directive('bbChartPopup', ['$timeout', '$window', 'bbMediaBreakpoints', function ($timeout, $window, bbMediaBreakpoints) {\r\n            return {\r\n                scope: {\r\n                    bbPopupToggle: '=?',\r\n                    bbPopupOffset: '=?'\r\n                },\r\n                restrict: 'EA',\r\n                require: '^bbChartScatterplot',\r\n                link: function (scope, el, attrs, chart) {\r\n                    /*jslint unparam: true */\r\n                    var hidePopupOnScroll,\r\n                        removeWatch,\r\n                        topOffset = 30,\r\n                        windowEl = $($window);\r\n\r\n                    function movePopup(pos) {\r\n\r\n                        if (removeWatch) {\r\n                            removeWatch();\r\n                            removeWatch = null;\r\n                        }\r\n\r\n                        removeWatch = scope.$watch('popup_open', function (value) {\r\n                            if (value) {\r\n                                if (bbMediaBreakpoints.getCurrent().xs) {\r\n                                    el.removeClass('bb-chart-popup');\r\n                                    el.addClass('bb-chart-popup-mobile');\r\n                                } else {\r\n                                    var elWidth = el.outerWidth(),\r\n                                        elHeight = el.outerHeight(),\r\n                                        elLeft = pos.pageX - elWidth / 2,\r\n                                        elTop = pos.pageY - elHeight - topOffset;\r\n                                    el.removeClass('bb-chart-popup-mobile');\r\n                                    el.addClass('bb-chart-popup');\r\n\r\n                                    if (elLeft + elWidth > windowEl.width()) {\r\n                                        elLeft = windowEl.width() - elWidth;\r\n                                    }\r\n\r\n                                    if (elLeft < 0) {\r\n                                        elLeft = 0;\r\n                                    }\r\n\r\n                                    if (elTop - windowEl.pageYOffset < 0) {\r\n                                        elTop = windowEl.pageYOffset;\r\n                                    }\r\n\r\n                                    el.offset({\r\n                                        left: elLeft,\r\n                                        top: elTop\r\n                                    });\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    function hidePopup() {\r\n                        scope.popup_open = false;\r\n                        el.addClass('ng-hide');\r\n                    }\r\n\r\n                    function showPopup() {\r\n                        scope.popup_open = true;\r\n                        el.removeClass('ng-hide');\r\n                    }\r\n\r\n                    function handlePopupEvent(event, pos, item) {\r\n                        if (item) {\r\n                            if (scope.lastItem && angular.equals(item, scope.lastItem)) {\r\n                                return;\r\n                            }\r\n                            scope.lastItem = item;\r\n                            movePopup(item);\r\n                        }\r\n                    }\r\n\r\n                    function handleMouseEvent(event) {\r\n                        if (scope.lastItem) {\r\n                            var eventX = event.clientX,\r\n                                eventY = event.clientY,\r\n                                itemX = scope.lastItem.pageX,\r\n                                itemY = scope.lastItem.pageY;\r\n\r\n                            // Give a 10px 'grace zone' for clicking close to the item\r\n                            if (Math.abs(eventX - itemX) < 10 && Math.abs(eventY - itemY) < 10) {\r\n                                return;\r\n                            }\r\n                        }\r\n                        windowEl.off('click', handleMouseEvent);\r\n                        if (bbMediaBreakpoints.getCurrent().xs) {\r\n                            windowEl.off('scroll', hidePopupOnScroll);\r\n                        }\r\n                        scope.bbPopupToggle = false;\r\n                        scope.$apply();\r\n                    }\r\n\r\n                    hidePopupOnScroll = function () {\r\n                        windowEl.off('click', handleMouseEvent);\r\n                        windowEl.off('scroll', hidePopupOnScroll);\r\n                        scope.bbPopupToggle = false;\r\n                        scope.$apply();\r\n                    };\r\n\r\n                    scope.$on('$destroy', function () {\r\n                        windowEl.off('click', handleMouseEvent);\r\n                        windowEl.off('scroll', hidePopupOnScroll);\r\n                    });\r\n\r\n                    if (scope.bbPopupOffset) {\r\n                        topOffset = scope.bbPopupOffset;\r\n                    }\r\n\r\n                    if (angular.isDefined(scope.bbPopupToggle)) {\r\n                        scope.$watch('bbPopupToggle', function (value) {\r\n                            if (value && !scope.popup_open) {\r\n                                $timeout(function () {\r\n                                    windowEl.on('click', handleMouseEvent);\r\n                                    if (bbMediaBreakpoints.getCurrent().xs) {\r\n                                        windowEl.on('scroll', hidePopupOnScroll);\r\n                                    }\r\n                                    showPopup();\r\n                                });\r\n                            } else if (!value && scope.popup_open) {\r\n                                $timeout(hidePopup);\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    el.addClass('bb-chart-popup');\r\n\r\n                    hidePopup();\r\n\r\n                    chart.enablePopup(handlePopupEvent);\r\n                }\r\n            };\r\n        }]);\r\n\r\n}(jQuery));\r\n",
    "/*jslint browser: true */\r\n/*global angular, jQuery */\r\n\r\n(function ($) {\r\n    'use strict';\r\n    angular.module('sky.check', [])\r\n        .directive('bbCheck', function ($timeout) {\r\n            return {\r\n                require: 'ngModel',\r\n                link: function ($scope, element, $attrs, ngModel) {\r\n                    return $timeout(function () {\r\n                        var value;\r\n                        value = $attrs.value;\r\n\r\n                        $scope.$watch($attrs.ngModel, function () {\r\n                            $(element).iCheck('update');\r\n                        });\r\n\r\n                        return $(element).iCheck({\r\n                            checkboxClass: 'bb-check-checkbox',\r\n                            radioClass: 'bb-check-radio'\r\n\r\n                        }).on('ifChanged', function (event) {\r\n                            if ($(element).attr('type') === 'checkbox' && $attrs.ngModel) {\r\n                                $scope.$apply(function () {\r\n                                    return ngModel.$setViewValue(event.target.checked);\r\n                                });\r\n                            }\r\n                            if ($(element).attr('type') === 'radio' && $attrs.ngModel) {\r\n                                return $scope.$apply(function () {\r\n                                    return ngModel.$setViewValue(value);\r\n                                });\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            };\r\n        });\r\n}(jQuery));",
    "/*jslint browser: true */\r\n/*global angular */\r\n\r\n(function () {\r\n    function contains(arr, item) {\r\n        var i;\r\n\r\n        if (angular.isArray(arr)) {\r\n            for (i = 0; i < arr.length; i += 1) {\r\n                if (angular.equals(arr[i], item)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // add\r\n    function add(arr, item) {\r\n        var i;\r\n\r\n        arr = angular.isArray(arr) ? arr : [];\r\n        for (i = 0; i < arr.length; i += 1) {\r\n            if (angular.equals(arr[i], item)) {\r\n                return arr;\r\n            }\r\n        }\r\n        arr.push(item);\r\n        return arr;\r\n    }\r\n\r\n    // remove\r\n    function remove(arr, item) {\r\n        var i;\r\n\r\n        if (angular.isArray(arr)) {\r\n            for (i = 0; i < arr.length; i += 1) {\r\n                if (angular.equals(arr[i], item)) {\r\n                    arr.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    angular.module('sky.checklist', [])\r\n        .directive('checklistModel', ['$parse', '$compile', function ($parse, $compile) {\r\n            // http://stackoverflow.com/a/19228302/1458162\r\n            function postLinkFn(scope, elem, attrs) {\r\n                // compile with `ng-model` pointing to `checked`\r\n                $compile(elem)(scope);\r\n\r\n                // getter / setter for original model\r\n                var getter = $parse(attrs.checklistModel);\r\n                var setter = getter.assign;\r\n\r\n                // value added to list\r\n                var value = $parse(attrs.checklistValue)(scope.$parent);\r\n\r\n                // watch UI checked change\r\n                scope.$watch('checked', function (newValue, oldValue) {\r\n                    if (newValue === oldValue) {\r\n                        return;\r\n                    }\r\n                    var current = getter(scope.$parent);\r\n                    if (newValue === true) {\r\n                        setter(scope.$parent, add(current, value));\r\n                    } else {\r\n                        setter(scope.$parent, remove(current, value));\r\n                    }\r\n                });\r\n\r\n                // watch original model change\r\n                scope.$parent.$watch(attrs.checklistModel, function (newArr, oldArr) {\r\n                    scope.checked = contains(newArr, value);\r\n                }, true);\r\n            }\r\n\r\n            return {\r\n                restrict: 'A',\r\n                priority: 1000,\r\n                terminal: true,\r\n                scope: true,\r\n                compile: function (tElement, tAttrs) {\r\n                    if (tElement[0].tagName !== 'INPUT' || !tElement.attr('type', 'checkbox')) {\r\n                        throw 'checklist-model should be applied to `input[type=\"checkbox\"]`.';\r\n                    }\r\n\r\n                    if (!tAttrs.checklistValue) {\r\n                        throw 'You should provide `checklist-value`.';\r\n                    }\r\n\r\n                    // exclude recursion\r\n                    tElement.removeAttr('checklist-model');\r\n\r\n                    // local scope var storing individual checkbox model\r\n                    tElement.attr('ng-model', 'checked');\r\n\r\n                    return postLinkFn;\r\n                }\r\n            };\r\n        }])\r\n        .directive('bbChecklist', ['bbResources', function (bbResources) {\r\n            return {\r\n                replace: true,\r\n                restrict: 'E',\r\n                transclude: true,\r\n                templateUrl: 'sky/templates/checklist/checklist.html',\r\n                scope: {\r\n                    bbChecklistItems: \"=\",\r\n                    bbChecklistSelectedItems: \"=\",\r\n                    bbChecklistFilterCallback: \"=\",\r\n                    bbChecklistIncludeSearch: \"=\",\r\n                    bbChecklistSearchDebounce: \"=\",\r\n                    bbChecklistSearchPlaceholder: \"=\",\r\n                    bbChecklistNoItemsMessage: \"=\",\r\n                    bbChecklistAutomationField: \"=\"\r\n                },\r\n                controller: ['$scope', function ($scope) {\r\n                    var locals = {\r\n                        selectAllText: bbResources.checklist_select_all,\r\n                        clearAllText: bbResources.checklist_clear_all,\r\n                        defaultNoItemsText: bbResources.checklist_no_items,\r\n                        noItemsText: $scope.bbChecklistNoItemsMessage\r\n                    };\r\n\r\n                    locals.selectAll = function () {\r\n                        var i,\r\n                            item,\r\n                            items = $scope.bbChecklistItems,\r\n                            selected = $scope.bbChecklistSelectedItems;\r\n\r\n                        for (i = 0; i < items.length; i += 1) {\r\n                            item = items[i];\r\n                            if (!contains(selected, item)) {\r\n                                add(selected, item);\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    locals.clear = function () {\r\n                        var selected = $scope.bbChecklistSelectedItems;\r\n                        while (selected.length) { selected.pop(); }\r\n                    };\r\n\r\n                    locals.rowClicked = function (item) {\r\n                        var selected = $scope.bbChecklistSelectedItems;\r\n\r\n                        if (!contains(selected, item)) {\r\n                            add(selected, item);\r\n                        } else {\r\n                            remove(selected, item);\r\n                        }\r\n                    };\r\n\r\n                    $scope.locals = locals;\r\n\r\n                    $scope.$watch('bbChecklistItems', function () {\r\n                        locals.highlightRefresh = new Date().getTime();\r\n                    });\r\n\r\n                    $scope.$watch('locals.searchText', function (newValue, oldValue) {\r\n                        if (newValue !== oldValue) {\r\n                            if ($scope.bbChecklistFilterCallback) {\r\n                                $scope.bbChecklistFilterCallback({ searchText: locals.searchText });\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    this.setColumns = function (columns) {\r\n                        locals.columns = columns;\r\n                    };\r\n                }]\r\n            };\r\n        }])\r\n        .directive('bbChecklistColumns', [function () {\r\n            return {\r\n                require: '^bbChecklist',\r\n                restrict: 'E',\r\n                scope: {\r\n                },\r\n                controller: ['$scope', function ($scope) {\r\n                    $scope.columns = [];\r\n\r\n                    this.addColumn = function (column) {\r\n                        $scope.columns.push(column);\r\n                    };\r\n                }],\r\n                link: function ($scope, element, attrs, bbChecklist) {\r\n                    /*jslint unparam: true */\r\n                    bbChecklist.setColumns($scope.columns);\r\n                }\r\n            };\r\n        }])\r\n        .directive('bbChecklistColumn', [function () {\r\n            return {\r\n                require: '^bbChecklistColumns',\r\n                restrict: 'E',\r\n                scope: {\r\n                    bbChecklistColumnCaption: \"=\",\r\n                    bbChecklistColumnField: \"=\",\r\n                    bbChecklistColumnClass: \"=\",\r\n                    bbChecklistColumnWidth: \"=\",\r\n                    bbChecklistColumnAutomationId: \"=\"\r\n                },\r\n                link: function ($scope, element, attrs, bbChecklistColumns) {\r\n                    /*jslint unparam: true */\r\n                    var column = {\r\n                        caption: $scope.bbChecklistColumnCaption,\r\n                        field: $scope.bbChecklistColumnField,\r\n                        'class': $scope.bbChecklistColumnClass,\r\n                        width: $scope.bbChecklistColumnWidth,\r\n                        automationId: $scope.bbChecklistColumnAutomationId\r\n                    };\r\n\r\n                    bbChecklistColumns.addColumn(column);\r\n                }\r\n            };\r\n        }]);\r\n}());",
    "/*jslint plusplus: true */\r\n/*global angular, define, jQuery, require */\r\n\r\n(function (window, $) {\r\n    'use strict';\r\n\r\n    var DEFAULT_PROP = '__DEFAULT__',\r\n        REQUEST_TYPE_DATA = 0,\r\n        REQUEST_TYPE_RESOURCES = 1,\r\n        REQUEST_TYPE_TEXT = 2;\r\n\r\n    function fillUrls(option, props, urls) {\r\n        var item,\r\n            p,\r\n            url;\r\n\r\n        if (option) {\r\n            if (angular.isString(option) || option.BB_DATA_POST) {\r\n                url = option;\r\n\r\n                option = {};\r\n                option[DEFAULT_PROP] = url;\r\n            }\r\n\r\n            for (p in option) {\r\n                if (option.hasOwnProperty(p)) {\r\n                    item = option[p];\r\n                    url = item;\r\n\r\n                    props.push(p);\r\n                    urls.push(url);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    angular.module('sky.data', [])\r\n        .constant('bbDataConfig', {})\r\n        .factory('bbData', ['$http', '$q', '$templateCache', 'bbDataConfig', function ($http, $q, $templateCache, bbDataConfig) {\r\n            function ajaxUrl(url, requestType) {\r\n                var filter,\r\n                    parts;\r\n\r\n                requestType = requestType || 0;\r\n\r\n                if (window.define && window.define.amd && window.require) {\r\n                    parts = url.split('?');\r\n\r\n                    // Grab the portion before the query string and get the fully-qualified URL.\r\n                    url = parts.shift();\r\n                    url = require.toUrl(url);\r\n\r\n                    // If there was anything after the first question mark, put it back.\r\n                    if (parts.length > 0) {\r\n                        url += '?' + parts.join('');\r\n                    }\r\n                }\r\n\r\n                switch (requestType) {\r\n                case REQUEST_TYPE_DATA:\r\n                    filter = bbDataConfig.dataUrlFilter;\r\n                    break;\r\n                case REQUEST_TYPE_RESOURCES:\r\n                    filter = bbDataConfig.resourceUrlFilter;\r\n                    break;\r\n                case REQUEST_TYPE_TEXT:\r\n                    filter = bbDataConfig.textUrlFilter;\r\n                    break;\r\n                }\r\n\r\n                if (angular.isFunction(filter)) {\r\n                    url = filter(url);\r\n                }\r\n\r\n                return url;\r\n            }\r\n\r\n            function createAjaxPromise(item, isPost, requestType) {\r\n                var data,\r\n                    isGet,\r\n                    textContent,\r\n                    type,\r\n                    url;\r\n\r\n                requestType = requestType || 0;\r\n\r\n                if (item.BB_DATA_POST || isPost) {\r\n                    data = item.data;\r\n                    type = item.type || 'post';\r\n                    url = item.url;\r\n                } else {\r\n                    type = 'get';\r\n                    url = item;\r\n                    isGet = true;\r\n                }\r\n\r\n                if (isGet && requestType === REQUEST_TYPE_TEXT) {\r\n                    // Check the Angular template cache using the raw URL first in case the text content is compiled into\r\n                    // the module bundle.\r\n                    textContent = $templateCache.get(url);\r\n\r\n                    if (textContent) {\r\n                        return $q(function (resolve) {\r\n                            resolve({\r\n                                data: textContent\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n\r\n                url = ajaxUrl(url, requestType);\r\n\r\n                return $http({\r\n                    method: type,\r\n                    url: url,\r\n                    cache: requestType !== 0,\r\n                    data: data ? JSON.stringify(data) : null,\r\n                    dataType: requestType !== 0 ? 'text' : 'json',\r\n                    withCredentials: requestType === 0\r\n                });\r\n            }\r\n\r\n            function addPromises(items, urls, requestType) {\r\n                var i,\r\n                    n,\r\n                    url;\r\n\r\n                if (urls) {\r\n                    for (i = 0, n = urls.length; i < n; i++) {\r\n                        url = urls[i];\r\n                        items.push(createAjaxPromise(url, null, requestType));\r\n                    }\r\n                }\r\n            }\r\n\r\n            return {\r\n                load: function (options) {\r\n                    return $q(function (resolve, reject) {\r\n                        var dataOption,\r\n                            dataProps,\r\n                            dataUrls,\r\n                            resourcesOption,\r\n                            resourcesProps,\r\n                            resourcesUrls,\r\n                            promises = [],\r\n                            textOption,\r\n                            textProps,\r\n                            textUrls;\r\n\r\n                        function success(args) {\r\n                            var argIndex = 0,\r\n                                result = {};\r\n\r\n                            function addResult(name, props) {\r\n                                var resultData,\r\n                                    i,\r\n                                    n,\r\n                                    p,\r\n                                    resultItem;\r\n\r\n                                if (props) {\r\n                                    for (i = 0, n = props.length; i < n; i++) {\r\n                                        p = props[i];\r\n                                        resultData = args[argIndex].data;\r\n\r\n                                        if (p === DEFAULT_PROP) {\r\n                                            resultItem = resultData;\r\n                                        } else {\r\n                                            resultItem = resultItem || {};\r\n                                            resultItem[p] = resultData;\r\n                                        }\r\n\r\n                                        argIndex++;\r\n                                    }\r\n                                }\r\n\r\n                                if (angular.isDefined(resultItem)) {\r\n                                    result[name] = resultItem;\r\n                                }\r\n                            }\r\n\r\n                            addResult('data', dataProps, true);\r\n                            addResult('resources', resourcesProps);\r\n                            addResult('text', textProps);\r\n\r\n                            resolve(result);\r\n                        }\r\n\r\n                        function failure() {\r\n                            reject.apply(this, arguments);\r\n                        }\r\n\r\n                        dataOption = options.data;\r\n                        resourcesOption = options.resources;\r\n                        textOption = options.text;\r\n\r\n                        if (dataOption) {\r\n                            dataProps = [];\r\n                            dataUrls = [];\r\n                            fillUrls(dataOption, dataProps, dataUrls);\r\n                        }\r\n\r\n                        if (resourcesOption) {\r\n                            resourcesProps = [];\r\n                            resourcesUrls = [];\r\n                            fillUrls(resourcesOption, resourcesProps, resourcesUrls);\r\n                        }\r\n\r\n                        if (textOption) {\r\n                            textProps = [];\r\n                            textUrls = [];\r\n                            fillUrls(textOption, textProps, textUrls);\r\n                        }\r\n\r\n                        addPromises(promises, dataUrls, REQUEST_TYPE_DATA);\r\n                        addPromises(promises, resourcesUrls, REQUEST_TYPE_RESOURCES);\r\n                        addPromises(promises, textUrls, REQUEST_TYPE_TEXT);\r\n\r\n                        $q.all(promises)\r\n                            .then(success)\r\n                            .catch(failure);\r\n                    });\r\n                },\r\n                query: function (url, params) {\r\n                    return url + '?' + $.param(params);\r\n                },\r\n                post: function (url, data) {\r\n                    return {\r\n                        url: url,\r\n                        data: data,\r\n                        BB_DATA_POST: true\r\n                    };\r\n                },\r\n                save: function (options) {\r\n                    return createAjaxPromise(options, true);\r\n                }\r\n            };\r\n        }]);\r\n}(this, jQuery));",
    "/*jslint browser: true, plusplus: true */\r\n/*global angular, jQuery */\r\n\r\n(function () {\r\n    'use strict';\r\n    angular.module('sky.datefield', [])\r\n        .constant('bbDateFieldConfig', {\r\n            currentCultreDateFormatString: 'mm/dd/yyyy',\r\n            twoDigitYearRolloverMax: 29\r\n        })\r\n        .directive('bbDateField', ['$q', 'bbMoment', 'bbDateFieldConfig', 'bbResources', function ($q, bbMoment, bbDateFieldConfig, bbResources) {\r\n\r\n            function matchSeparator(value) {\r\n                return value.match(/[.\\/\\-\\s].*?/);\r\n            }\r\n\r\n            //Remove locale specific characters\r\n            function stripLocaleCharacterFromDateString(dateString) {\r\n                return dateString.replace(/\\u200E/g, '');\r\n            }\r\n\r\n            function dateHasSeparator(value) {\r\n                /*\r\n                * Validation criteria:\r\n                * A separator exists\r\n                * There is no separator at the beginning\r\n                * There is no separator at the end\r\n                * Two separators exist\r\n                * All parts of the date have a non-zero value\r\n                */\r\n\r\n                var separator = matchSeparator(value),\r\n                    valueArray = value.split(separator),\r\n                    separatorAtEnd = value.indexOf(separator, value.length - 1) !== -1,\r\n                    separatorAtBeginning = value.indexOf(separator) === 0,\r\n                    hasTwoSeparators = valueArray.length - 1 === 2,\r\n                    anyPartIsZero = valueArray.some(function (e) {\r\n                        return Number(e) === 0;\r\n                    });\r\n\r\n                return (separator && !separatorAtEnd && !separatorAtBeginning && hasTwoSeparators && !anyPartIsZero);\r\n            }\r\n\r\n            function validateDate(value) {\r\n                return !/Invalid|NaN/.test(bbMoment(value, bbDateFieldConfig.currentCultreDateFormatString.toUpperCase())) && dateHasSeparator(value);\r\n            }\r\n\r\n            function beautifyDate(value, format) {\r\n                var separator,\r\n                    parts,\r\n                    yearBegin,\r\n                    monthBegin,\r\n                    dayBegin,\r\n                    formatSeparator,\r\n                    lowerFormat,\r\n                    upperFormat;\r\n\r\n                if (value) {\r\n\r\n                    separator = matchSeparator(value); // look for common separators\r\n                    parts = value.split(separator); // split value based on found separator\r\n                    lowerFormat = format.toLowerCase(); // system expects lowercase format string\r\n                    upperFormat = format.toUpperCase(); // moment js expects uppercase format string\r\n\r\n                    if (value.length === 8 && !isNaN(value)) {\r\n                        yearBegin = lowerFormat.indexOf('y');\r\n                        monthBegin = lowerFormat.indexOf('m');\r\n                        dayBegin = lowerFormat.indexOf('d');\r\n\r\n                        //MMDDYYYY or DDMMYYYY\r\n                        if (((monthBegin < dayBegin) && (dayBegin < yearBegin)) || ((dayBegin < monthBegin) && (monthBegin < yearBegin))) {\r\n                            parts[0] = value.substring(0, 2);\r\n                            parts[1] = value.substring(2, 4);\r\n                            parts[2] = value.substring(4, 8);\r\n                        } else if ((yearBegin < monthBegin) && (monthBegin < dayBegin)) { //YYYYMMDD \r\n                            parts[0] = value.substring(0, 4);\r\n                            parts[1] = value.substring(4, 6);\r\n                            parts[2] = value.substring(6, 8);\r\n                        }\r\n\r\n                        //Get the expected separator and join the date parts with it\r\n                        formatSeparator = matchSeparator(lowerFormat);\r\n                        return parts.join(formatSeparator);\r\n                    }\r\n\r\n                    //If there aren't enough parts to the date or any part is zero, let the validator handle it\r\n                    if (parts.length !== 3 || parts.some(function (e) {\r\n                            return Number(e) === 0;\r\n                    })) {\r\n                        return value;\r\n                    }\r\n\r\n                    //If all else fails and momentjs can't parse the date, log an error and let the validator handle it\r\n                    try {\r\n                        return stripLocaleCharacterFromDateString(bbMoment(value, upperFormat).format(upperFormat));\r\n                    } catch (e) {\r\n                        //console.error(\"Error parsing date value '\" + value + \"': \" + e.toString());\r\n                        return value;\r\n                    }\r\n                }\r\n\r\n                return value;\r\n            }\r\n\r\n            function getLocaleDate(value) {\r\n                var date,\r\n                    datePart,\r\n                    dateArray,\r\n                    separator,\r\n                    year,\r\n                    formatUpper = bbDateFieldConfig.currentCultreDateFormatString.toUpperCase(),\r\n                    yearPart = formatUpper.indexOf('Y') === 0 ? 0 : 2;\r\n\r\n                //If the value is not a valid representation of a date, let the validator handle it\r\n                if (!isNaN(value)) {\r\n                    return value;\r\n                }\r\n\r\n                //If date is passed in as SQL UTC string, we need to do some magic to make sure we don't lose a day due to time zone shifts\r\n                if (typeof value === \"string\" && value.indexOf(\"T00:00:00\") !== -1) {\r\n                    datePart = value.split(\"T\")[0];\r\n                    dateArray = datePart.split(\"-\");\r\n                    date = new Date(dateArray[0], (dateArray[1] - 1), dateArray[2]);\r\n                    return stripLocaleCharacterFromDateString(bbMoment(date).format(bbDateFieldConfig.currentCultreDateFormatString.toUpperCase()));\r\n                }\r\n\r\n                //If the date array doesn't have enough parts or any part is zero, return it as is and let the validator handle it, otherwise create a date\r\n                separator = value.match(/[.\\/\\-\\s].*?/);\r\n                dateArray = value.split(separator);\r\n\r\n                if (dateArray.length !== 3 || dateArray.some(function (e) {\r\n                        return Number(e) === 0;\r\n                })) {\r\n                    return value;\r\n                }\r\n\r\n                year = Number(dateArray[yearPart]);\r\n                if (year < 100) {\r\n                    dateArray[yearPart] = year <= bbDateFieldConfig.twoDigitYearRolloverMax ? year + 2000 : year + 1900;\r\n                    value = dateArray.join(separator);\r\n                }\r\n                date = bbMoment(value, formatUpper);\r\n                return stripLocaleCharacterFromDateString(date.format(formatUpper));\r\n            }\r\n\r\n            return {\r\n                scope: {\r\n                    bbDateFieldOptions: '='\r\n                },\r\n                link: function (scope, el, attrs, ngModel) {\r\n                    /*jslint unparam: true */\r\n                    var hasCustomFormatting = (scope.bbDateFieldOptions && !!scope.bbDateFieldOptions.formatValue),\r\n                        input = el.find('input'),\r\n                        today,\r\n                        datefieldHTML = \"<span class=\\\"add-on input-group-addon add-on-for-datepicker\\\"><i class=\\\"fa fa-calendar for-datepicker\\\"></i></span>\",\r\n                        errorMessage,\r\n                        skipValidation;\r\n\r\n                    function resolveValidation(deferred) {\r\n                        deferred[errorMessage ? 'reject' : 'resolve']();\r\n                    }\r\n\r\n                    input = el.children('input');\r\n\r\n                    input.on('change', function () {\r\n                        if(input.val() === \"\") {\r\n                            errorMessage = null;\r\n                            ngModel.invalidFormatMessage = null;\r\n                        }\r\n                        ngModel.$setViewValue(input.val(), 'change');\r\n                    });\r\n\r\n                    ////set model value as well as datepicker control value when manually entering a date.\r\n                    ngModel.$asyncValidators.dateFormat = function () {\r\n                        var deferred,\r\n                            localeDate,\r\n                            value,\r\n                            customFormattinedResult;\r\n\r\n                        function handleCustomFormattingValidation(result) {\r\n                            var formattedValue;\r\n\r\n                            result = result || {};\r\n                            formattedValue = result.formattedValue;\r\n\r\n                            errorMessage = result.formattingErrorMessage;\r\n\r\n                            ngModel.invalidFormatMessage = errorMessage;\r\n\r\n                            resolveValidation(deferred);\r\n\r\n                            if (formattedValue !== value) {\r\n                                skipValidation = true;\r\n\r\n                                ngModel.$setViewValue(formattedValue);\r\n                                input.val(formattedValue);\r\n                            }\r\n                        }\r\n\r\n                        deferred = $q.defer();\r\n\r\n                        if (skipValidation || ngModel.$pristine) {\r\n                            ngModel.invalidFormatMessage = null;\r\n                            resolveValidation(deferred);\r\n                        } else {\r\n                            if (hasCustomFormatting) {\r\n                                value = input.val();\r\n\r\n                                if (value) {\r\n                                    customFormattinedResult = scope.bbDateFieldOptions.formatValue(value);\r\n                                    if (customFormattinedResult.then) {\r\n                                        customFormattinedResult.then(handleCustomFormattingValidation);\r\n                                    } else {\r\n                                        handleCustomFormattingValidation(customFormattinedResult);\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                value = beautifyDate(input.val(), bbDateFieldConfig.currentCultreDateFormatString);\r\n\r\n                                if (value !== undefined) {\r\n                                    //Need to set input to value to validate\r\n                                    localeDate = getLocaleDate(value);\r\n                                    if (value !== \"Invalid date\" && localeDate !== \"Invalid date\") {\r\n                                        if (validateDate(localeDate)) {\r\n                                            skipValidation = true;\r\n                                            ngModel.$setViewValue(localeDate);\r\n                                            input.val(localeDate);\r\n                                        } else {\r\n                                            errorMessage = bbResources.date_field_invalid_date_message;\r\n                                            ngModel.invalidFormatMessage = errorMessage;\r\n                                        }\r\n                                    } else {\r\n                                        errorMessage = bbResources.date_field_invalid_date_message;\r\n                                        ngModel.invalidFormatMessage = errorMessage;\r\n                                    }\r\n\r\n                                    resolveValidation(deferred);\r\n                                } else {\r\n                                    ngModel.invalidFormatMessage = null;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        skipValidation = false;\r\n\r\n                        return deferred.promise;\r\n                    };\r\n\r\n                    ngModel.$render = function () {\r\n                        el.datepicker('setValue', ngModel.$viewValue);\r\n                        input.val(ngModel.$viewValue);\r\n                    };\r\n\r\n                    //IE11 inserts left-to-right characters (code 8206) for locale strings, removing for now\r\n                    today = getLocaleDate(new Date());\r\n\r\n                    //Set up HTML\r\n                    el.attr('data-date-format', bbDateFieldConfig.currentCultreDateFormatString)\r\n                        .attr('data-date', today)\r\n                        .append(datefieldHTML);\r\n\r\n                    input.attr('class', 'has-right-addon text-box single-line' + (hasCustomFormatting ? ' datefield-customformatting' : ''))\r\n                        .attr('placeholder', (hasCustomFormatting ? \"\" : bbDateFieldConfig.currentCultreDateFormatString.toLowerCase()));\r\n\r\n                    el.datepicker().on('changeDate', function (ev) {\r\n                        var value = ev.formattedDate;\r\n\r\n                        errorMessage = null;\r\n                        skipValidation = true;\r\n\r\n                        // Need to clear validation\r\n                        validateDate(value);\r\n\r\n                        ngModel.$setViewValue(value);\r\n\r\n                        el.datepicker('hide');\r\n                    });\r\n\r\n                    //Override the place function to align the picker with the left side of the input\r\n                    el.datepicker.Constructor.prototype.place = function () {\r\n                        var offset = this.component ? this.component.offset() : this.element.offset();\r\n                        this.picker.css({\r\n                            top: offset.top + this.height,\r\n                            left: offset.left - 118\r\n                        });\r\n                    };\r\n\r\n                    //Remove datepicker element on destroy\r\n                    el.datepicker.Constructor.prototype.destroy = function () {\r\n                        this.picker.remove();\r\n                    };\r\n\r\n                    // Setup max length for input control\r\n                    input.attr('maxlength', '10');\r\n\r\n                    el.on('$destroy', function () {\r\n                        el.datepicker('destroy');\r\n                    });\r\n                },\r\n                replace: true,\r\n                require: 'ngModel',\r\n                restrict: 'E',\r\n                template: function (el, attrs) {\r\n                    /*jslint unparam: true */\r\n                    var html = '<div class=\"date\"><input type=\"text\"';\r\n\r\n                    if (attrs.id) {\r\n                        html += ' id=\"' + attrs.id + '\"';\r\n                    }\r\n\r\n                    if (attrs.bbautoField) {\r\n                        html += ' data-bbauto-field=\"' + attrs.bbautoField + 'Input\"';\r\n                    }\r\n\r\n                    html += '/></div>';\r\n\r\n                    return html;\r\n                }\r\n            };\r\n        }]);\r\n\r\n}());",
    "/*jslint browser: true, plusplus: true */\r\n/*global angular, jQuery */\r\n\r\n(function () {\r\n    'use strict';\r\n    angular.module('sky.daterangepicker', [])\r\n        .factory('bbDateRangePicker', ['bbResources', function (bbResources) {\r\n\r\n            var dateRangeTypes,\r\n                defaultDateRangeOptions,\r\n                pastDateRangeOptions;\r\n\r\n            dateRangeTypes = {\r\n                AT_ANY_TIME: 0,\r\n                NEXT_WEEK: 1,\r\n                THIS_MONTH: 2,\r\n                NEXT_MONTH: 3,\r\n                THIS_QUARTER: 4,\r\n                NEXT_QUARTER: 5,\r\n                THIS_FISCAL_YEAR: 6,\r\n                NEXT_FISCAL_YEAR: 7,\r\n                THIS_CALENDAR_YEAR: 8,\r\n                NEXT_CALENDAR_YEAR: 9,\r\n                LAST_WEEK: 10,\r\n                LAST_MONTH: 11,\r\n                LAST_QUARTER: 12,\r\n                LAST_FISCAL_YEAR: 13,\r\n                LAST_CALENDAR_YEAR: 14,\r\n                TODAY: 15,\r\n                YESTERDAY: 16,\r\n                TOMORROW: 17,\r\n                THIS_WEEK: 18\r\n            };\r\n\r\n            defaultDateRangeOptions = [\r\n                dateRangeTypes.AT_ANY_TIME,\r\n                dateRangeTypes.YESTERDAY,\r\n                dateRangeTypes.TODAY,\r\n                dateRangeTypes.TOMORROW,\r\n                dateRangeTypes.LAST_WEEK,\r\n                dateRangeTypes.THIS_WEEK,\r\n                dateRangeTypes.NEXT_WEEK,\r\n                dateRangeTypes.LAST_MONTH,\r\n                dateRangeTypes.THIS_MONTH,\r\n                dateRangeTypes.NEXT_MONTH,\r\n                dateRangeTypes.LAST_QUARTER,\r\n                dateRangeTypes.THIS_QUARTER,\r\n                dateRangeTypes.NEXT_QUARTER,\r\n                dateRangeTypes.LAST_CALENDAR_YEAR,\r\n                dateRangeTypes.THIS_CALENDAR_YEAR,\r\n                dateRangeTypes.NEXT_CALENDAR_YEAR,\r\n                dateRangeTypes.LAST_FISCAL_YEAR,\r\n                dateRangeTypes.THIS_FISCAL_YEAR,\r\n                dateRangeTypes.NEXT_FISCAL_YEAR\r\n            ];\r\n\r\n            pastDateRangeOptions = [\r\n                dateRangeTypes.AT_ANY_TIME,\r\n                dateRangeTypes.YESTERDAY,\r\n                dateRangeTypes.TODAY,\r\n                dateRangeTypes.LAST_WEEK,\r\n                dateRangeTypes.THIS_WEEK,\r\n                dateRangeTypes.LAST_MONTH,\r\n                dateRangeTypes.THIS_MONTH,\r\n                dateRangeTypes.LAST_QUARTER,\r\n                dateRangeTypes.THIS_QUARTER,\r\n                dateRangeTypes.LAST_CALENDAR_YEAR,\r\n                dateRangeTypes.THIS_CALENDAR_YEAR,\r\n                dateRangeTypes.LAST_FISCAL_YEAR,\r\n                dateRangeTypes.THIS_FISCAL_YEAR\r\n            ];\r\n\r\n            function getDateRangeTypeCaption(dateRangePickerValue) {\r\n                if (angular.isNumber(dateRangePickerValue)) {\r\n                    // If the input is the enum value itself, then map it to the object structure we expect before proceeding.\r\n                    dateRangePickerValue = { dateRangeType: dateRangePickerValue };\r\n                } else {\r\n                    // If the value is undefiend, then map it to a null object.\r\n                    dateRangePickerValue = dateRangePickerValue || {};\r\n                }\r\n\r\n                if (!angular.isDefined(dateRangePickerValue.dateRangeType)) {\r\n                    // If the enum value is undefined, then it represents any time.\r\n                    dateRangePickerValue.dateRangeType = dateRangeTypes.AT_ANY_TIME;\r\n                }\r\n\r\n                switch (dateRangePickerValue.dateRangeType) {\r\n                case dateRangeTypes.AT_ANY_TIME:\r\n                    return bbResources.date_range_picker_at_any_time;\r\n\r\n                case dateRangeTypes.THIS_WEEK:\r\n                    return bbResources.date_range_picker_this_week;\r\n\r\n                case dateRangeTypes.NEXT_WEEK:\r\n                    return bbResources.date_range_picker_next_week;\r\n\r\n                case dateRangeTypes.THIS_MONTH:\r\n                    return bbResources.date_range_picker_this_month;\r\n\r\n                case dateRangeTypes.NEXT_MONTH:\r\n                    return bbResources.date_range_picker_next_month;\r\n\r\n                case dateRangeTypes.THIS_QUARTER:\r\n                    return bbResources.date_range_picker_this_quarter;\r\n\r\n                case dateRangeTypes.NEXT_QUARTER:\r\n                    return bbResources.date_range_picker_next_quarter;\r\n\r\n                case dateRangeTypes.THIS_FISCAL_YEAR:\r\n                    return bbResources.date_range_picker_this_fiscal_year;\r\n\r\n                case dateRangeTypes.NEXT_FISCAL_YEAR:\r\n                    return bbResources.date_range_picker_next_fiscal_year;\r\n\r\n                case dateRangeTypes.THIS_CALENDAR_YEAR:\r\n                    return bbResources.date_range_picker_this_calendar_year;\r\n\r\n                case dateRangeTypes.NEXT_CALENDAR_YEAR:\r\n                    return bbResources.date_range_picker_next_calendar_year;\r\n\r\n                case dateRangeTypes.LAST_WEEK:\r\n                    return bbResources.date_range_picker_last_week;\r\n\r\n                case dateRangeTypes.LAST_MONTH:\r\n                    return bbResources.date_range_picker_last_month;\r\n\r\n                case dateRangeTypes.LAST_QUARTER:\r\n                    return bbResources.date_range_picker_last_quarter;\r\n\r\n                case dateRangeTypes.LAST_FISCAL_YEAR:\r\n                    return bbResources.date_range_picker_last_fiscal_year;\r\n\r\n                case dateRangeTypes.LAST_CALENDAR_YEAR:\r\n                    return bbResources.date_range_picker_last_calendar_year;\r\n\r\n                case dateRangeTypes.TODAY:\r\n                    return bbResources.date_range_picker_today;\r\n\r\n                case dateRangeTypes.YESTERDAY:\r\n                    return bbResources.date_range_picker_yesterday;\r\n\r\n                case dateRangeTypes.TOMORROW:\r\n                    return bbResources.date_range_picker_tomorrow;\r\n\r\n                }\r\n            }\r\n\r\n            function getDateRangeFilterDescription(dateRangePickerValue) {\r\n                // If the value is undefiend, then map it to a null object.\r\n                dateRangePickerValue = dateRangePickerValue || {};\r\n\r\n                if (!angular.isDefined(dateRangePickerValue.dateRangeType)) {\r\n                    // If the enum value is undefined, then it represents any time.\r\n                    dateRangePickerValue.dateRangeType = dateRangeTypes.AT_ANY_TIME;\r\n                }\r\n\r\n                switch (dateRangePickerValue.dateRangeType) {\r\n                case dateRangeTypes.AT_ANY_TIME:\r\n                    return bbResources.date_range_picker_filter_description_at_any_time;\r\n\r\n                case dateRangeTypes.THIS_WEEK:\r\n                    return bbResources.date_range_picker_filter_description_this_week;\r\n\r\n                case dateRangeTypes.NEXT_WEEK:\r\n                    return bbResources.date_range_picker_filter_description_next_week;\r\n\r\n                case dateRangeTypes.THIS_MONTH:\r\n                    return bbResources.date_range_picker_filter_description_this_month;\r\n\r\n                case dateRangeTypes.NEXT_MONTH:\r\n                    return bbResources.date_range_picker_filter_description_next_month;\r\n\r\n                case dateRangeTypes.THIS_QUARTER:\r\n                    return bbResources.date_range_picker_filter_description_this_quarter;\r\n\r\n                case dateRangeTypes.NEXT_QUARTER:\r\n                    return bbResources.date_range_picker_filter_description_next_quarter;\r\n\r\n                case dateRangeTypes.THIS_FISCAL_YEAR:\r\n                    return bbResources.date_range_picker_filter_description_this_fiscal_year;\r\n\r\n                case dateRangeTypes.NEXT_FISCAL_YEAR:\r\n                    return bbResources.date_range_picker_filter_description_next_fiscal_year;\r\n\r\n                case dateRangeTypes.THIS_CALENDAR_YEAR:\r\n                    return bbResources.date_range_picker_filter_description_this_calendar_year;\r\n\r\n                case dateRangeTypes.NEXT_CALENDAR_YEAR:\r\n                    return bbResources.date_range_picker_filter_description_next_calendar_year;\r\n\r\n                case dateRangeTypes.LAST_WEEK:\r\n                    return bbResources.date_range_picker_filter_description_last_week;\r\n\r\n                case dateRangeTypes.LAST_MONTH:\r\n                    return bbResources.date_range_picker_filter_description_last_month;\r\n\r\n                case dateRangeTypes.LAST_QUARTER:\r\n                    return bbResources.date_range_picker_filter_description_last_quarter;\r\n\r\n                case dateRangeTypes.LAST_FISCAL_YEAR:\r\n                    return bbResources.date_range_picker_filter_description_last_fiscal_year;\r\n\r\n                case dateRangeTypes.LAST_CALENDAR_YEAR:\r\n                    return bbResources.date_range_picker_filter_description_last_calendar_year;\r\n\r\n                case dateRangeTypes.TODAY:\r\n                    return bbResources.date_range_picker_filter_description_today;\r\n\r\n                case dateRangeTypes.YESTERDAY:\r\n                    return bbResources.date_range_picker_filter_description_yesterday;\r\n\r\n                case dateRangeTypes.TOMORROW:\r\n                    return bbResources.date_range_picker_filter_description_tomorrow;\r\n\r\n                }\r\n            }\r\n\r\n            return {\r\n                dateRangeTypes: dateRangeTypes,\r\n                defaultDateRangeOptions: defaultDateRangeOptions,\r\n                pastDateRangeOptions: pastDateRangeOptions,\r\n                getDateRangeTypeCaption: getDateRangeTypeCaption,\r\n                getDateRangeFilterDescription: getDateRangeFilterDescription\r\n            };\r\n\r\n        }])\r\n        .directive('bbDateRangePicker', ['bbDateRangePicker', function (bbDateRangePicker) {\r\n            /// <summary>\r\n            /// This directive provides a date range filter control\r\n            /// </summary>\r\n\r\n            return {\r\n                replace: true,\r\n                restrict: 'E',\r\n                templateUrl: 'sky/templates/daterangepicker/daterangepicker.html',\r\n                scope: {\r\n                    bbDateRangePickerValue: \"=\",\r\n                    bbDateRangePickerAutomationId: \"=\",\r\n                    bbDateRangePickerOptions: '='\r\n                },\r\n                controller: ['$scope', function ($scope) {\r\n\r\n                    $scope.locals = {\r\n                        bbDateRangePicker: bbDateRangePicker\r\n                    };\r\n\r\n                    $scope.$watch(\"bbDateRangePickerValue\", function (newVal) {\r\n                        if (!newVal) {\r\n                            $scope.bbDateRangePickerValue = {\r\n                                dateRangeType: bbDateRangePicker.dateRangeTypes.AT_ANY_TIME\r\n                            };\r\n                            return;\r\n                        }\r\n                        newVal.dateRangeType = newVal.dateRangeType || bbDateRangePicker.dateRangeTypes.AT_ANY_TIME;\r\n                    }, true);\r\n                }]\r\n            };\r\n        }]);\r\n\r\n}());",
    "/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('sky.filters', ['sky.format'])\r\n        .filter('encodeURIComponent', ['$window', function ($window) {\r\n            return function (value) {\r\n                return $window.encodeURIComponent(value);\r\n            };\r\n        }])\r\n        .filter(\"format\", ['bbFormat', function (bbFormat) {\r\n            return function () {\r\n                return bbFormat.formatText.apply(this, arguments);\r\n            };\r\n        }]);\r\n}());",
    "/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n    var tagsToReplace = {\r\n        '&': '&amp;',\r\n        '<': '&lt;',\r\n        '>': '&gt;'\r\n    };\r\n\r\n    function replaceTag(tag) {\r\n        return tagsToReplace[tag] || tag;\r\n    }\r\n\r\n    angular.module('sky.format', [])\r\n        .factory('bbFormat', function () {\r\n            return {\r\n                formatText: function (format) {\r\n                    var args = arguments;\r\n                    return format.replace(/\\{(\\d+)\\}/g, function (match, capture) {\r\n                        /*jslint unparam: true */\r\n                        return args[parseInt(capture, 10) + 1];\r\n                    });\r\n                },\r\n                escape: function (str) {\r\n                    if (str !== undefined) {\r\n                        return String(str).replace(/[&<>]/g, replaceTag);\r\n                    }\r\n\r\n                    return '';\r\n                }\r\n            };\r\n        });\r\n}());",
    "/*jslint browser: false, plusplus: true */\r\n/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    function buildCategoryList(columns, all_categories_caption) {\r\n        var categories = [],\r\n            column,\r\n            index,\r\n            len;\r\n\r\n        columns = columns || [];\r\n        len = columns.length;\r\n\r\n        for (index = 0; index < len; index++) {\r\n            column = columns[index];\r\n\r\n            if (column.category) {\r\n                if (categories.indexOf(column.category) === -1) {\r\n                    categories.push(column.category);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (categories.length > 0) {\r\n            categories.unshift(all_categories_caption);\r\n        }\r\n\r\n        return categories;\r\n    }\r\n\r\n    function isVisible(item) {\r\n        return !item.hidden;\r\n    }\r\n\r\n    function columnCompare(a, b) {\r\n        a = a.caption.toLocaleLowerCase();\r\n        b = b.caption.toLocaleLowerCase();\r\n\r\n        if (a < b) {\r\n            return -1;\r\n        }\r\n\r\n        if (a > b) {\r\n            return 1;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function controller($scope, bbResources, availableColumns, initialSelectedColumnIds, columnPickerHelpKey) {\r\n        var all_categories = bbResources.grid_column_picker_all_categories,\r\n            columns = [];\r\n\r\n        angular.forEach(availableColumns, function (column) {\r\n            columns.push({\r\n                id: column.id,\r\n                name: column.name,\r\n                caption: column.caption,\r\n                category: column.category,\r\n                description: column.description,\r\n                selected: (initialSelectedColumnIds.indexOf(column.id) >= 0)\r\n            });\r\n        });\r\n\r\n        columns.sort(columnCompare);\r\n\r\n        $scope.resources = bbResources;\r\n        $scope.columns = columns;\r\n        $scope.categories = buildCategoryList(columns, all_categories);\r\n        $scope.locals = {};\r\n        $scope.locals.selectedCategory = all_categories;\r\n        $scope.locals.isVisible = isVisible;\r\n        $scope.columnPickerHelpKey = columnPickerHelpKey;\r\n\r\n        $scope.applyChanges = function () {\r\n            var column,\r\n                scopeColumns = $scope.columns,\r\n                columnIds = [],\r\n                i;\r\n\r\n            //Loop through previously selected columns.  If they are still selected, add\r\n            //them to the resulting list in their original order.\r\n            angular.forEach(initialSelectedColumnIds, function (columnId) {\r\n                for (i = 0; i < scopeColumns.length; i++) {\r\n                    column = scopeColumns[i];\r\n\r\n                    if (column.id === columnId) {\r\n                        if (column.selected) {\r\n                            columnIds.push(column.id);\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n\r\n            //Loop through all columns.  If they are selected and not already in the list\r\n            //then add them to the end.\r\n            angular.forEach(scopeColumns, function (column) {\r\n                var id;\r\n                if (column.selected) {\r\n                    id = column.id;\r\n\r\n                    for (i = 0; i < columnIds.length; i++) {\r\n                        if (columnIds[i] === id) {\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    columnIds.push(id);\r\n                }\r\n            });\r\n\r\n            $scope.$close(columnIds);\r\n        };\r\n\r\n        function searchTextMatchesColumn(searchText, column) {\r\n            if (searchText) {\r\n                searchText = searchText.toLocaleLowerCase();\r\n                if ((column.caption && column.caption.toLocaleLowerCase().indexOf(searchText) > -1) || (column.description && column.description.toLocaleLowerCase().indexOf(searchText) > -1)) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        $scope.applyFilters = function () {\r\n            var category = $scope.locals.selectedCategory,\r\n                column,\r\n                index,\r\n                len,\r\n                searchText = $scope.locals.searchText,\r\n                showAllCategories;\r\n\r\n            showAllCategories = (category === all_categories ? true : false);\r\n            len = $scope.columns.length;\r\n\r\n            for (index = 0; index < len; index++) {\r\n                column = $scope.columns[index];\r\n\r\n                if (showAllCategories || column.category === category) {\r\n                    if (searchTextMatchesColumn(searchText, column)) {\r\n                        column.hidden = false;\r\n                    } else {\r\n                        column.hidden = true;\r\n                    }\r\n                } else {\r\n                    column.hidden = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        $scope.filterByCategory = function (category) {\r\n            $scope.locals.selectedCategory = category;\r\n            $scope.applyFilters();\r\n        };\r\n    }\r\n\r\n    angular.module('sky.grids.columnpicker', [])\r\n        .controller('BBGridColumnPickerController', ['$scope', 'bbResources', 'columns', 'selectedColumnIds', 'columnPickerHelpKey', controller]);\r\n}());",
    "/*jslint plusplus: true */\r\n/*global angular, jQuery */\r\n\r\n(function ($) {\r\n    'use strict';\r\n\r\n    var DROPDOWN_TOGGLE_COLUMN_NAME = 'dropdownToggle',\r\n        MULTISELECT_COLUMN_NAME = 'cb';\r\n\r\n    angular.module('sky.grids', ['sky.grids.columnpicker'])\r\n        .directive('bbGrid', ['bbModal', '$window', '$compile', '$templateCache', 'bbMediaBreakpoints', 'bbViewKeeperBuilder', 'bbHighlight', 'bbResources', 'bbData', '$controller', '$timeout',\r\n            function (bbModal, $window, $compile, $templateCache, bbMediaBreakpoints, bbViewKeeperBuilder, bbHighlight, bbResources, bbData, $controller, $timeout) {\r\n                return {\r\n                    replace: true,\r\n                    transclude: true,\r\n                    restrict: 'E',\r\n                    scope: {\r\n                        options: '=bbGridOptions',\r\n                        multiselectActions: '=bbMultiselectActions',\r\n                        updateMultiselectActions: '&bbSelectionsUpdated'\r\n                    },\r\n                    controller: ['$scope', function ($scope) {\r\n                        var locals,\r\n                            self = this;\r\n\r\n                        self.setFilters = function (filters) {\r\n                            $scope.options.filters = filters;\r\n                        };\r\n\r\n                        self.syncViewKeepers = function () {\r\n                            if ($scope.syncViewKeepers) {\r\n                                $scope.syncViewKeepers();\r\n                            }\r\n                        };\r\n\r\n                        self.syncActionBarViewKeeper = function () {\r\n                            if (angular.isFunction($scope.syncActionBarViewKeeper)) {\r\n                                $scope.syncActionBarViewKeeper();\r\n                            }\r\n                        };\r\n\r\n                        self.resetMultiselect = function () {\r\n                            if (angular.isFunction(locals.resetMultiselect)) {\r\n                                locals.resetMultiselect();\r\n                            }\r\n                        };\r\n\r\n                        self.scope = $scope;\r\n\r\n                        $scope.resources = bbResources;\r\n\r\n                        locals = $scope.locals = {\r\n                            gridId: 'bbgrid-table-' + $scope.$id,\r\n                            hasAdd: false,\r\n                            hasColPicker: true,\r\n                            hasFilters: true,\r\n                            loadMoreStarted: false,\r\n                            onAddClick: function () {\r\n                                if (locals.hasAdd && $scope.options && $scope.options.onAddClick) {\r\n                                    $scope.options.onAddClick();\r\n                                }\r\n                            },\r\n\r\n                            toggleFilterMenu: function () {\r\n                                if (self.toggleFilterMenu) {\r\n                                    self.toggleFilterMenu();\r\n                                }\r\n                            },\r\n\r\n                            loadMore: function () {\r\n                                $scope.$emit('loadMoreRows');\r\n                                locals.loadMoreStarted = true;\r\n                            },\r\n                            selectedRows: []\r\n                        };\r\n\r\n                        $scope.$watch('options.viewKeeperOffsetElId', function (newValue, oldValue) {\r\n                            if (newValue !== oldValue) {\r\n                                if (self.viewKeeperChangedHandler) {\r\n                                    self.viewKeeperChangedHandler(newValue);\r\n                                }\r\n                            }\r\n                        });\r\n                    }],\r\n                    link: function ($scope, element) {\r\n                        var breakpoints,\r\n                            cellScopes,\r\n                            columnCount = 0,\r\n                            columnModel,\r\n                            compiledTemplates = [],\r\n                            contextMenuItems = {},\r\n                            fullGrid,\r\n                            getContextMenuItems,\r\n                            hasTemplatedColumns,\r\n                            header,\r\n                            id,\r\n                            locals = $scope.locals,\r\n                            seemore_template = 'sky/templates/grids/seemore.html',\r\n                            reorderingColumns,\r\n                            tableBody,\r\n                            tableEl = element.find('table'),\r\n                            tableDomEl = tableEl[0],\r\n                            tableWidth,\r\n                            tableWrapper = element.find('.table-responsive'),\r\n                            toolbarContainer = element.find('.grid-toolbar-container'),\r\n                            toolbarContainerId,\r\n                            verticalOffSetElId,\r\n                            vkActionBarAndBackToTop,\r\n                            vkToolbars,\r\n                            vkHeader,\r\n                            windowEl = $($window),\r\n                            windowWidth;\r\n\r\n                        function updateGridLoadedTimestampAndRowCount(count) {\r\n                            $scope.locals.timestamp = new Date().getTime();\r\n                            $scope.locals.rowcount = count;\r\n                        }\r\n\r\n                        function mediaBreakpointHandler(newBreakpoints) {\r\n                            breakpoints = newBreakpoints;\r\n                        }\r\n\r\n                        function buildColumnClasses(column) {\r\n                            var classes = '';\r\n\r\n                            //if this column does not allow search then add the appropriate class. This is used when highlighting search results\r\n                            if (column.exclude_from_search) {\r\n                                classes += \"grid-no-search \";\r\n                            }\r\n\r\n                            return classes;\r\n                        }\r\n\r\n                        function getEmptyString() {\r\n                            return \"\";\r\n                        }\r\n\r\n                        function buildCellAttribute(rowId, cellValue, rawObject, column) {\r\n                            /*jslint unparam: true*/\r\n                            return \"data-grid-field='\" + column.name + \"'\" + \"data-bbauto-field='\" + column.name + \"'\" + \"data-bbauto-index='\" + (rowId - 1) + \"'\";\r\n                        }\r\n\r\n                        function buildMenuId(rowid) {\r\n                            return id + '-dropdownMenu-' + rowid;\r\n                        }\r\n\r\n                        function buildActionId(menuid, action) {\r\n                            return menuid + \"-\" + action.id;\r\n                        }\r\n\r\n                        function toggleButtonFormatter(cellvalue, options, rowObject) {\r\n                            /*jslint unparam: true */\r\n                            var menuid,\r\n                                i,\r\n                                item,\r\n                                items,\r\n                                rowid,\r\n                                template;\r\n\r\n                            if (angular.isFunction(getContextMenuItems)) {\r\n                                rowid = options.rowId;\r\n                                menuid = buildMenuId(rowid);\r\n                                items = getContextMenuItems(rowid, rowObject);\r\n                                //cache for later\r\n                                contextMenuItems[rowid] = items;\r\n\r\n                                if (items && items.length) {\r\n                                    template =\r\n                                        '<div data-bbauto-field=\"ContextMenuActions\" class=\"dropdown\" id=\"' + menuid + '\">' +\r\n                                        '  <a data-bbauto-field=\"ContextMenuAnchor\" role=\"button\" class=\"dropdown-toggle sky-icon sky-icon-2x sky-icon-multi-action\" data-toggle=\"dropdown\" href=\"\"></a>' +\r\n                                        '  <ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"' + menuid + '\">';\r\n\r\n                                    for (i = 0; i < items.length; i++) {\r\n                                        item = items[i];\r\n                                        template += '<li role=\"presentation\"><a id=\"' + buildActionId(menuid, item) + '\" role=\"menuitem\" href=\"\">' + item.title + '</a></li>';\r\n                                    }\r\n\r\n                                    template += '</ul></div>';\r\n\r\n                                    return template;\r\n                                }\r\n                            }\r\n                            return '';\r\n                        }\r\n\r\n                        function getColumnById(columns, id) {\r\n                            var column,\r\n                                i;\r\n\r\n                            for (i = 0; i < columns.length; i++) {\r\n                                column = columns[i];\r\n                                if (column.id === id) {\r\n                                    return column;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        function buildColumnModel(columns, selectedColumnIds) {\r\n                            var colModel = [],\r\n                                column,\r\n                                index,\r\n                                gridColumn;\r\n\r\n                            hasTemplatedColumns = false;\r\n\r\n                            for (index = 0; index < selectedColumnIds.length; index++) {\r\n                                column = getColumnById(columns, selectedColumnIds[index]);\r\n\r\n                                if (column) {\r\n                                    gridColumn = {\r\n                                        index: column.id.toString(),\r\n                                        sortable: false,\r\n                                        id: column.id,\r\n                                        name: column.name,\r\n                                        label: column.caption,\r\n                                        align: (column.right_align ? 'right' : 'left'),\r\n                                        classes: buildColumnClasses(column),\r\n                                        cellattr: buildCellAttribute,\r\n                                        controller: column.controller,\r\n                                        template_url: column.template_url,\r\n                                        jsonmap: column.jsonmap,\r\n                                        allow_see_more: column.allow_see_more\r\n                                    };\r\n\r\n                                    if (column.allow_see_more && !gridColumn.template_url) {\r\n                                        gridColumn.template_url = seemore_template;\r\n\r\n                                        if (!compiledTemplates[seemore_template]) {\r\n                                            compiledTemplates[seemore_template] = $compile($templateCache.get(seemore_template));\r\n                                        }\r\n                                    }\r\n\r\n                                    if (gridColumn.template_url) {\r\n                                        //Setup a formatter to return an empty string until the\r\n                                        //angular template is processed for the cell.\r\n                                        gridColumn.formatter = getEmptyString;\r\n                                        hasTemplatedColumns = true;\r\n                                    } else if (column.colFormatter) {\r\n                                        gridColumn.formatter = column.colFormatter;\r\n                                    }\r\n\r\n                                    colModel.push(gridColumn);\r\n                                }\r\n                            }\r\n\r\n                            if (getContextMenuItems) {\r\n                                colModel.unshift({\r\n                                    classes: 'grid-dropdown-cell',\r\n                                    fixed: true,\r\n                                    sortable: false,\r\n                                    name: DROPDOWN_TOGGLE_COLUMN_NAME,\r\n                                    label: ' ',\r\n                                    width: 40,\r\n                                    title: false,\r\n                                    hidedlg: true,\r\n                                    resizable: false,\r\n                                    search: false,\r\n                                    formatter: toggleButtonFormatter\r\n                                });\r\n                            }\r\n\r\n                            return colModel;\r\n                        }\r\n\r\n                        function getColumnElementIdFromName(columnName) {\r\n                            return locals.gridId + \"_\" + columnName;\r\n                        }\r\n\r\n                        function getColumnNameFromElementId(columnName) {\r\n                            if (columnName) {\r\n                                return columnName.replace(locals.gridId + \"_\", \"\");\r\n                            }\r\n                        }\r\n\r\n                        function getDesiredGridWidth() {\r\n                            var minWidthForColumns,\r\n                                width = tableWrapper.width();\r\n\r\n                            //On extra small devices, instead of setting size by parent width use some logic\r\n                            if (breakpoints.xs) {\r\n                                //Calculate the minimum width to use on a small device\r\n                                //based on the number of columns\r\n                                minWidthForColumns = columnCount * 110;\r\n                                if (width <= minWidthForColumns) {\r\n                                    width = minWidthForColumns;\r\n                                }\r\n                            }\r\n\r\n                            return width;\r\n                        }\r\n\r\n                        function resetGridWidth() {\r\n                            var width = getDesiredGridWidth();\r\n                            if (width > 0) {\r\n                                tableEl.setGridWidth(width);\r\n                            }\r\n                        }\r\n\r\n                        function resizeStart() {\r\n                            fullGrid.find('.ui-jqgrid-resize-mark').height(fullGrid.height());\r\n                        }\r\n\r\n                        function setSortStyles() {\r\n                            var className,\r\n                                headerElId,\r\n                                sortOptions;\r\n\r\n                            if (header) {\r\n                                header.find('th').removeClass('sorting-asc').removeClass('sorting-desc');\r\n\r\n                                if ($scope.options) {\r\n                                    sortOptions = $scope.options.sortOptions;\r\n                                    if (sortOptions && sortOptions.column) {\r\n                                        headerElId = getColumnElementIdFromName(sortOptions.column);\r\n\r\n                                        if (sortOptions.descending) {\r\n                                            className = 'sorting-desc';\r\n                                        } else {\r\n                                            className = 'sorting-asc';\r\n                                        }\r\n\r\n                                        header.find('#' + headerElId).addClass(className);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        function columnIsSortable(columnName) {\r\n                            var excludedColumns,\r\n                                sortOptions = $scope.options.sortOptions;\r\n\r\n                            if (columnName === DROPDOWN_TOGGLE_COLUMN_NAME || columnName === MULTISELECT_COLUMN_NAME) {\r\n                                return false;\r\n                            }\r\n\r\n                            if (sortOptions) {\r\n                                excludedColumns = sortOptions.excludedColumns;\r\n                                if (excludedColumns) {\r\n                                    if (excludedColumns.indexOf(columnName) > -1) {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                            return true;\r\n                        }\r\n\r\n                        function sortColumn() {\r\n                            var sortOptions = $scope.options.sortOptions,\r\n                                columnName;\r\n\r\n                            if (!sortOptions) {\r\n                                sortOptions = $scope.options.sortOptions = {};\r\n                            }\r\n\r\n                            columnName = getColumnNameFromElementId(this.id);\r\n\r\n                            if (columnIsSortable(columnName)) {\r\n                                sortOptions.column = columnName;\r\n                                sortOptions.descending = $(this).hasClass('sorting-asc');\r\n                                $scope.$apply();\r\n                            }\r\n                        }\r\n\r\n                        function openColumnPicker() {\r\n                            bbModal.open({\r\n                                templateUrl: 'sky/templates/grids/columnpicker.html',\r\n                                controller: 'BBGridColumnPickerController',\r\n                                resolve: {\r\n                                    columns: function () {\r\n                                        return $scope.options.columns;\r\n                                    },\r\n                                    selectedColumnIds: function () {\r\n                                        return $scope.options.selectedColumnIds;\r\n                                    },\r\n                                    columnPickerHelpKey: function () {\r\n                                        return $scope.options.columnPickerHelpKey;\r\n                                    }\r\n                                }\r\n                            }).result.then(function (selectedColumnIds) {\r\n                                $scope.options.selectedColumnIds = selectedColumnIds;\r\n                            });\r\n                        }\r\n\r\n                        function highlightSearchText() {\r\n                            var options = $scope.options;\r\n                            if (options && options.searchText) {\r\n                                bbHighlight(tableEl.find(\"td\").not('.grid-no-search'), options.searchText, 'highlight');\r\n                            } else {\r\n                                bbHighlight.clear(tableEl);\r\n                            }\r\n                        }\r\n\r\n                        function linkCellValue(scope, cell, linkFunction) {\r\n                            linkFunction(scope, function (cloned) {\r\n                                cell.append(cloned);\r\n                            });\r\n                        }\r\n\r\n                        function arrayObjectIndexOf(array, obj) {\r\n                            var i;\r\n                            for (i = 0; i < array.length; i++) {\r\n                                if (angular.equals(array[i], obj)) {\r\n                                    return i;\r\n                                }\r\n                            }\r\n                            return -1;\r\n                        }\r\n\r\n                        function afterInsertRow(rowid, rowdata) {\r\n                            var actionEl,\r\n                                cell,\r\n                                column,\r\n                                columnData,\r\n                                i,\r\n                                invoke,\r\n                                item,\r\n                                items,\r\n                                itemScope,\r\n                                menuid,\r\n                                row;\r\n\r\n                            if (hasTemplatedColumns) {\r\n                                if (!tableBody) {\r\n                                    tableBody = $(this);\r\n                                }\r\n\r\n                                row = tableBody.find('tr:eq(' + rowid + ')');\r\n\r\n                                for (i = 0; i < columnModel.length; i++) {\r\n                                    column = columnModel[i];\r\n\r\n                                    if (column.template_url) {\r\n                                        cell = row.find('[data-grid-field=\"' + column.name + '\"]');\r\n                                        columnData = rowdata[column.name];\r\n\r\n                                        //Create a new scope and apply the cell object's properties to it.\r\n                                        itemScope = $scope.$new(true);\r\n\r\n                                        itemScope.data = columnData;\r\n\r\n                                        if (column.allow_see_more) {\r\n                                            itemScope.skyResources = $scope.resources;\r\n                                        }\r\n\r\n                                        //make the resources from the caller available to the column templates\r\n                                        if ($scope.options.resources) {\r\n                                            itemScope.resources = $scope.options.resources;\r\n                                        }\r\n\r\n                                        if (column.controller) {\r\n                                            $controller(column.controller, {\r\n                                                $scope: itemScope\r\n                                            });\r\n                                        }\r\n\r\n                                        cellScopes.push(itemScope); //Stash scope for cleanup later.\r\n\r\n                                        linkCellValue(itemScope, cell, compiledTemplates[column.template_url]);\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            invoke = function (cmd, actionEl) {\r\n                                return function () {\r\n                                    cmd(rowid);\r\n                                    $(actionEl).dropdown('toggle');\r\n                                    return false;\r\n                                };\r\n                            };\r\n\r\n                            if (contextMenuItems && contextMenuItems[rowid]) {\r\n                                menuid = buildMenuId(rowid);\r\n                                items = contextMenuItems[rowid];\r\n\r\n                                for (i = 0; i < items.length; ++i) {\r\n                                    item = items[i];\r\n                                    actionEl = $('#' + buildActionId(menuid, item));\r\n                                    $(actionEl).on('click', invoke(item.cmd, actionEl));\r\n                                }\r\n                            }\r\n\r\n                            //check if row should be multiselected\r\n                            if (locals.selectedRows && locals.selectedRows.length > 0) {\r\n                                row = $scope.options.data[(rowid - 1)];\r\n                                if (row && arrayObjectIndexOf(locals.selectedRows, row) > -1) {\r\n                                    tableEl.setSelection(rowid, false);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        function gridComplete() {\r\n                            //Add padding to the bottom of the grid for any dropdowns in the last row.\r\n                            if (getContextMenuItems) {\r\n                                $('.ui-jqgrid-bdiv').css('padding-bottom', '100px');\r\n                            }\r\n                        }\r\n\r\n                        function gridColumnsReordered(orderedColumns) {\r\n                            var i,\r\n                                offset = 0,\r\n                                oldIndex,\r\n                                selectedColumnIds = $scope.options.selectedColumnIds,\r\n                                newSelectedColumnIds = [];\r\n\r\n                            //Need to account for context menu if it exists.  It will always be the first\r\n                            //column before and after the reorder\r\n                            if (angular.isFunction(getContextMenuItems)) {\r\n                                offset = 1;\r\n                            }\r\n\r\n                            for (i = offset; i < orderedColumns.length; i++) {\r\n                                oldIndex = orderedColumns[i];\r\n                                newSelectedColumnIds.push(selectedColumnIds[oldIndex - offset]);\r\n                            }\r\n\r\n                            reorderingColumns = true;\r\n                            $scope.options.selectedColumnIds = newSelectedColumnIds;\r\n                            $scope.$apply();\r\n                        }\r\n\r\n                        function getSortable() {\r\n                            var sortable = {\r\n                                update: gridColumnsReordered\r\n                            };\r\n\r\n                            if (getContextMenuItems) {\r\n                                sortable.exclude = \"#\" + $scope.locals.gridId + \"_\" + DROPDOWN_TOGGLE_COLUMN_NAME;\r\n                            }\r\n\r\n                            return sortable;\r\n                        }\r\n\r\n                        function clearSelectedRowsObject() {\r\n                            locals.selectedRows = [];\r\n                        }\r\n\r\n                        function resetMultiselect() {\r\n                            clearSelectedRowsObject();\r\n                            tableEl.resetSelection();\r\n                        }\r\n\r\n                        function onSelectAll(rowIds, status) {\r\n                            /*jslint unparam: true */\r\n                            var allRowData;\r\n\r\n                            clearSelectedRowsObject();\r\n                            if (status === true) {\r\n                                allRowData = $scope.options.data;\r\n                                if (allRowData && allRowData.length > 0) {\r\n                                    locals.selectedRows = allRowData.slice();\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        function onSelectRow(rowId, status) {\r\n                            var index,\r\n                                row = $scope.options.data[(rowId - 1)];\r\n\r\n                            index = arrayObjectIndexOf(locals.selectedRows, row);\r\n\r\n                            if (status === true && index === -1 && row) {\r\n                                locals.selectedRows.push(row);\r\n                            } else if (status === false && index > -1) {\r\n                                locals.selectedRows.splice(index, 1);\r\n                            }\r\n                        }\r\n\r\n                        function initGrid() {\r\n                            var columns,\r\n                                jqGridOptions,\r\n                                selectedColumnIds,\r\n                                useGridView = true,\r\n                                hoverrows = false;\r\n\r\n                            locals.multiselect = false;\r\n\r\n                            //Clear reference to the table body since it will be recreated.\r\n                            tableBody = null;\r\n\r\n                            //Unload grid if it already exists.\r\n                            tableEl.jqGrid('GridUnload');\r\n\r\n                            tableEl = element.find('table');\r\n                            tableDomEl = tableEl[0];\r\n\r\n                            if ($scope.options) {\r\n                                columns = $scope.options.columns;\r\n                                selectedColumnIds = $scope.options.selectedColumnIds;\r\n                                getContextMenuItems = $scope.options.getContextMenuItems;\r\n                                if (angular.isFunction($scope.options.onAddClick)) {\r\n                                    locals.hasAdd = true;\r\n                                }\r\n                                if ($scope.options.hideColPicker) {\r\n                                    locals.hasColPicker = false;\r\n                                }\r\n                                if ($scope.options.hideFilters) {\r\n                                    locals.hasFilters = false;\r\n                                }\r\n\r\n                                if ($scope.options.multiselect) {\r\n                                    locals.multiselect = true;\r\n                                    hoverrows = true;\r\n                                }\r\n                            }\r\n\r\n                            if (getContextMenuItems) {\r\n                                useGridView = false;\r\n                            }\r\n\r\n                            if (columns && selectedColumnIds) {\r\n                                columnModel = buildColumnModel(columns, selectedColumnIds);\r\n                                columnCount = columnModel.length;\r\n\r\n                                jqGridOptions = {\r\n                                    afterInsertRow: afterInsertRow,\r\n                                    autoencode: true,\r\n                                    colModel: columnModel,\r\n                                    datatype: angular.noop,\r\n                                    gridComplete: gridComplete,\r\n                                    gridView: useGridView,\r\n                                    height: 'auto',\r\n                                    hoverrows: hoverrows,\r\n                                    multiselect: locals.multiselect,\r\n                                    multiselectWidth: 25,\r\n                                    onSelectAll: onSelectAll,\r\n                                    onSelectRow: onSelectRow,\r\n                                    resizeStart: resizeStart,\r\n                                    rowNum: -1,\r\n                                    shrinktofit: true,\r\n                                    sortable: getSortable(),\r\n                                    width: getDesiredGridWidth()\r\n                                };\r\n\r\n                                tableEl.jqGrid(jqGridOptions);\r\n\r\n                                header = $(tableDomEl.grid.hDiv);\r\n\r\n                                //Attach click handler for sorting columns\r\n                                header.find('th').on('click', sortColumn);\r\n\r\n                                fullGrid = header.parents('.ui-jqgrid:first');\r\n\r\n                                if (vkHeader) {\r\n                                    vkHeader.destroy();\r\n                                }\r\n\r\n                                toolbarContainer.show();\r\n\r\n                                vkHeader = new bbViewKeeperBuilder.create({\r\n                                    el: header[0],\r\n                                    boundaryEl: fullGrid[0],\r\n                                    verticalOffSetElId: toolbarContainerId\r\n                                });\r\n\r\n                                setSortStyles();\r\n\r\n                                $scope.gridCreated = true;\r\n                            }\r\n                        }\r\n\r\n                        function destroyCellScopes() {\r\n                            var i;\r\n                            if (cellScopes) {\r\n                                for (i = 0; i < cellScopes.length; i++) {\r\n                                    cellScopes[i].$destroy();\r\n                                }\r\n                            }\r\n                            cellScopes = [];\r\n                        }\r\n\r\n                        function loadColumnTemplates(callback) {\r\n                            var columns,\r\n                                templateUrlsToLoad = {};\r\n\r\n                            //Identify any template URLs that haven't been compiled\r\n                            if ($scope.options) {\r\n                                columns = $scope.options.columns;\r\n\r\n                                if (columns) {\r\n                                    angular.forEach(columns, function (column) {\r\n                                        var templateUrl = column.template_url;\r\n\r\n                                        if (templateUrl && !compiledTemplates[templateUrl]) {\r\n                                            templateUrlsToLoad[templateUrl] = templateUrl;\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n\r\n                            //Load template URLs that need compiling\r\n                            bbData.load({\r\n                                text: templateUrlsToLoad\r\n                            }).then(function (result) {\r\n                                var p,\r\n                                    template;\r\n\r\n                                // Compile templates and store them for use when adding rows.\r\n                                for (p in result.text) {\r\n                                    if (result.text.hasOwnProperty(p)) {\r\n                                        template = result.text[p];\r\n\r\n                                        if (template) {\r\n                                            compiledTemplates[p] = $compile(template);\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                callback();\r\n                            });\r\n                        }\r\n\r\n                        function refreshMultiselect() {\r\n                            tableEl.resetSelection();\r\n                            if (!$scope.locals.loadMoreStarted) {\r\n                                clearSelectedRowsObject();\r\n                            } else {\r\n                                $scope.locals.loadMoreStarted = false;\r\n                            }\r\n                        }\r\n\r\n                        function setRows(rows) {\r\n                            if (tableDomEl.addJSONData) {\r\n                                loadColumnTemplates(function () {\r\n                                    refreshMultiselect();\r\n\r\n                                    destroyCellScopes();\r\n\r\n                                    tableDomEl.addJSONData(rows);\r\n\r\n                                    $timeout(highlightSearchText);\r\n\r\n                                    //Update grid with in case new rows have caused a vertical scrollbar, effecting\r\n                                    //the amount of space we want the grid to take up\r\n                                    resetGridWidth();\r\n                                    updateGridLoadedTimestampAndRowCount(rows.length);\r\n                                });\r\n                            }\r\n                        }\r\n\r\n                        function setupToolbarViewKeepers() {\r\n                            if (vkToolbars) {\r\n                                vkToolbars.destroy();\r\n                            }\r\n\r\n                            if (vkActionBarAndBackToTop) {\r\n                                vkActionBarAndBackToTop.destroy();\r\n                            }\r\n\r\n                            if ($scope.options) {\r\n                                verticalOffSetElId = $scope.options.viewKeeperOffsetElId;\r\n                            }\r\n\r\n                            vkToolbars = new bbViewKeeperBuilder.create({\r\n                                el: toolbarContainer[0],\r\n                                boundaryEl: element[0],\r\n                                setWidth: true,\r\n                                verticalOffSetElId: verticalOffSetElId,\r\n                                onStateChanged: function () {\r\n                                    locals.isScrolled = vkToolbars.isFixed;\r\n                                    $scope.$apply();\r\n                                }\r\n                            });\r\n\r\n                            vkActionBarAndBackToTop = new bbViewKeeperBuilder.create({\r\n                                el: element.find('.grid-action-bar-and-back-to-top')[0],\r\n                                boundaryEl: element[0],\r\n                                setWidth: true,\r\n                                verticalOffSetElId: verticalOffSetElId,\r\n                                fixToBottom: true\r\n                            });\r\n                        }\r\n\r\n                        function applySearchText() {\r\n                            element.find('.search-container input').select();\r\n                            $scope.options.searchText = $scope.searchText;\r\n                        }\r\n\r\n                        function backToTop() {\r\n                            vkToolbars.scrollToTop();\r\n                        }\r\n\r\n                        locals.resetMultiselect = resetMultiselect;\r\n\r\n                        id = $scope.$id;\r\n                        toolbarContainerId = id + '-toolbar-container';\r\n\r\n                        locals.openColumnPicker = openColumnPicker;\r\n\r\n                        locals.backToTop = backToTop;\r\n\r\n                        //Apply unique id to the table.  ID is required by jqGrid.\r\n                        toolbarContainer.attr('id', toolbarContainerId);\r\n\r\n                        $scope.$watch('options.selectedColumnIds', function (newValue) {\r\n                            var columnChangedData;\r\n\r\n                            if (newValue) {\r\n                                if (reorderingColumns) {\r\n                                    reorderingColumns = false;\r\n                                    return;\r\n                                }\r\n                                initGrid();\r\n\r\n                                // As an optimization, allow the consumer to specify whether changing columns will cause the row data to be\r\n                                // re-evaluated so the grid won't automatically be reloaded with existing data.\r\n                                columnChangedData = {\r\n                                    willResetData: false\r\n                                };\r\n\r\n                                $scope.$emit('includedColumnsChanged', columnChangedData);\r\n\r\n                                if (!columnChangedData.willResetData && $scope.options.data) {\r\n                                    // Data won't change as a result of the columns changing; reload existing data.\r\n                                    setRows($scope.options.data);\r\n                                }\r\n                            }\r\n                        }, true);\r\n\r\n                        $scope.$watchCollection('options.data', setRows);\r\n\r\n                        locals.applySearchText = applySearchText;\r\n\r\n                        $scope.syncViewKeepers = function () {\r\n                            if (vkToolbars) {\r\n                                vkToolbars.syncElPosition();\r\n                            }\r\n                        };\r\n\r\n                        $scope.syncActionBarViewKeeper = function () {\r\n                            if (vkActionBarAndBackToTop) {\r\n                                vkActionBarAndBackToTop.syncElPosition();\r\n                            }\r\n                        };\r\n\r\n                        $scope.$watch('options.sortOptions', setSortStyles, true);\r\n\r\n                        $scope.$watch('options.viewKeeperOffsetElId', function () {\r\n                            setupToolbarViewKeepers();\r\n                        });\r\n\r\n                        $scope.$watch('options.filters', function (f) {\r\n                            $scope.$broadcast('updateAppliedFilters', f);\r\n                        });\r\n\r\n                        windowWidth = windowEl.width();\r\n                        windowEl.on(\"resize.\" + id + \", orientationchange.\" + id, function () {\r\n                            var newWidth = windowEl.width();\r\n                            if (windowWidth !== newWidth) {\r\n                                windowWidth = newWidth;\r\n                                resetGridWidth();\r\n                            }\r\n                        });\r\n\r\n                        bbMediaBreakpoints.register(mediaBreakpointHandler);\r\n\r\n                        tableWrapper.on(\"scroll\", function () {\r\n                            if (vkHeader) {\r\n                                vkHeader.syncElPosition();\r\n                            }\r\n                        });\r\n\r\n                        tableWidth = tableWrapper.width();\r\n                        tableWrapper.on(\"resize\", function () {\r\n                            var newWidth = tableWrapper.width();\r\n                            if (tableWidth !== newWidth) {\r\n                                tableWidth = newWidth;\r\n                                resetGridWidth();\r\n                            }\r\n                        });\r\n\r\n                        element.on('$destroy', function () {\r\n                            windowEl.off(\"resize.\" + id + \", orientationchange.\" + id);\r\n\r\n                            if (vkToolbars) {\r\n                                vkToolbars.destroy();\r\n                            }\r\n\r\n                            if (vkHeader) {\r\n                                vkHeader.destroy();\r\n                            }\r\n\r\n                            if (vkActionBarAndBackToTop) {\r\n                                vkActionBarAndBackToTop.destroy();\r\n                            }\r\n\r\n                            tableWrapper.off();\r\n\r\n                            bbMediaBreakpoints.unregister(mediaBreakpointHandler);\r\n                        });\r\n                    },\r\n                    templateUrl: 'sky/templates/grids/grid.html'\r\n                };\r\n            }])\r\n        .directive('bbGridFilters', ['$window', 'bbResources', function ($window, bbResources) {\r\n            return {\r\n                require: '^bbGrid',\r\n                replace: true,\r\n                transclude: true,\r\n                restrict: 'E',\r\n                scope: {\r\n                    bbOptions: \"=\"\r\n                },\r\n                controller: ['$scope', function ($scope) {\r\n                    $scope.applyFilters = function () {\r\n                        var args = {},\r\n                            options = $scope.bbOptions;\r\n\r\n                        if (options && options.applyFilters) {\r\n                            options.applyFilters(args);\r\n                        }\r\n\r\n                        $scope.updateFilters(args.filters);\r\n                    };\r\n\r\n                    $scope.clearFilters = function () {\r\n                        var args = {},\r\n                            options = $scope.bbOptions;\r\n\r\n                        if (options && options.clearFilters) {\r\n                            options.clearFilters(args);\r\n                        }\r\n\r\n                        $scope.updateFilters(args.filters);\r\n                    };\r\n                }],\r\n                link: function ($scope, element, attrs, bbGrid) {\r\n                    /*jslint unparam: true */\r\n                    var box = element.find('.grid-filters-box'),\r\n                        filtersContainer = element.find('.grid-filters-container');\r\n\r\n                    $scope.viewKeeperOptions = {};\r\n\r\n                    bbGrid.viewKeeperChangedHandler = function (val) {\r\n                        $scope.viewKeeperOptions.viewKeeperOffsetElId = val;\r\n                    };\r\n\r\n                    bbGrid.toggleFilterMenu = function () {\r\n                        $scope.expanded = !$scope.expanded;\r\n                        if ($scope.expanded) {\r\n                            $window.BBHELP.HelpWidget.close();\r\n                        }\r\n                    };\r\n\r\n                    bbGrid.openFilterMenu = function () {\r\n                        $scope.expanded = true;\r\n                    };\r\n\r\n                    bbGrid.scope.$watch('gridCreated', function (newValue) {\r\n                        if (newValue) {\r\n                            element.show();\r\n                        }\r\n                    });\r\n\r\n                    $scope.updateFilters = function (filters) {\r\n                        bbGrid.setFilters(filters);\r\n                    };\r\n\r\n                    $scope.resources = bbResources;\r\n\r\n                    $scope.$watch('expanded', function (newValue, oldValue) {\r\n                        var animationDuration = 250;\r\n\r\n                        if (newValue !== oldValue) {\r\n                            if (newValue) {\r\n                                box.css('left', '240px');\r\n                                filtersContainer.show();\r\n                                box.animate({ 'left': '0' }, animationDuration);\r\n                            } else {\r\n                                box.animate({ 'left': '240px' }, {\r\n                                    duration: animationDuration,\r\n                                    complete: function () {\r\n                                        box.css('left', '0');\r\n                                        filtersContainer.hide();\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n                },\r\n                templateUrl: 'sky/templates/grids/filters.html'\r\n            };\r\n        }])\r\n        .directive('bbGridFiltersGroup', function () {\r\n            return {\r\n                replace: true,\r\n                transclude: true,\r\n                restrict: 'E',\r\n                scope: {\r\n                    bbGridFiltersGroupLabel: '=',\r\n                    isCollapsed: '=?bbGridFiltersGroupIsCollapsed'\r\n                },\r\n                templateUrl: 'sky/templates/grids/filtersgroup.html'\r\n            };\r\n        })\r\n        .directive('bbGridFiltersSummary', ['bbResources', function (bbResources) {\r\n            return {\r\n                require: '^bbGrid',\r\n                replace: true,\r\n                transclude: true,\r\n                restrict: 'E',\r\n                scope: {\r\n                    bbOptions: \"=\"\r\n                },\r\n                controller: ['$scope', function ($scope) {\r\n                    $scope.clearFilters = function () {\r\n                        var args = {},\r\n                            options = $scope.bbOptions;\r\n\r\n                        if (options && options.clearFilters) {\r\n                            options.clearFilters(args);\r\n                        }\r\n\r\n                        $scope.updateFilters(args.filters);\r\n                    };\r\n\r\n                    $scope.resources = bbResources;\r\n                }],\r\n                link: function ($scope, element, attrs, bbGrid) {\r\n                    /*jslint unparam: true */\r\n                    var toolbarContainer = element.parents('.bb-grid-container').find('.grid-toolbar-container');\r\n\r\n                    toolbarContainer.append(element);\r\n\r\n                    $scope.updateFilters = function (filters) {\r\n                        bbGrid.setFilters(filters);\r\n                    };\r\n\r\n                    $scope.openFilterMenu = function () {\r\n                        if (bbGrid.openFilterMenu) {\r\n                            bbGrid.openFilterMenu();\r\n                        }\r\n                    };\r\n\r\n                    $scope.$watch(function () { return element.is(':visible'); }, function (newValue, oldValue) {\r\n                        if (newValue !== oldValue) {\r\n                            bbGrid.syncViewKeepers();\r\n                        }\r\n                    });\r\n                },\r\n                templateUrl: 'sky/templates/grids/filterssummary.html'\r\n            };\r\n        }])\r\n        .directive('bbGridActionBar', ['bbMediaBreakpoints', 'bbResources', '$timeout', function (bbMediaBreakpoints, bbResources, $timeout) {\r\n            return {\r\n                require: '^bbGrid',\r\n                replace: true,\r\n                transclude: true,\r\n                restrict: 'E',\r\n                scope: {\r\n                    bbMultiselectActions: '=',\r\n                    bbSelectionsUpdated: '&'\r\n                },\r\n                controller: ['$scope', function ($scope) {\r\n                    $scope.locals = {\r\n                        actions: $scope.bbMultiselectActions,\r\n                        showActionBar: false,\r\n                        mobileButtons: false,\r\n                        showMobileActions: false\r\n                    };\r\n\r\n                    $scope.resources = bbResources;\r\n                }],\r\n                link: function ($scope, element, attrs, bbGrid) {\r\n                    /*jslint unparam: true */\r\n\r\n                    bbGrid.scope.$watchCollection('locals.selectedRows', function (newValue) {\r\n                        var action,\r\n                            i,\r\n                            showActionBar;\r\n\r\n                        if (newValue) {\r\n                            //this notation is necessary because the argument is passed through grid and then to the controller\r\n                            //in which grid resides.\r\n                            $scope.bbSelectionsUpdated({ selections: { selections: newValue } });\r\n\r\n                            showActionBar = false;\r\n                            if ($scope.locals.actions) {\r\n                                //only show the action bar if an action has an available selection\r\n                                for (i = 0; i < $scope.locals.actions.length; i++) {\r\n                                    action = $scope.locals.actions[i];\r\n                                    if (action.selections.length > 0) {\r\n                                        showActionBar = true;\r\n                                    }\r\n                                }\r\n                            }\r\n                            $scope.locals.showActionBar = showActionBar;\r\n\r\n                            if (showActionBar) {\r\n                                $timeout(function () { bbGrid.syncActionBarViewKeeper(); });\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    //on mobile do an ng-if that changes the stuff.\r\n                    function mediaBreakpointHandler(newBreakpoints) {\r\n                        $scope.locals.mobileButtons = newBreakpoints.xs;\r\n                    }\r\n\r\n                    bbMediaBreakpoints.register(mediaBreakpointHandler);\r\n\r\n                    element.on('$destroy', function () {\r\n                        bbMediaBreakpoints.unregister(mediaBreakpointHandler);\r\n                    });\r\n\r\n                    $scope.locals.clearSelection = function () {\r\n                        bbGrid.resetMultiselect();\r\n                    };\r\n\r\n                    $scope.locals.chooseAction = function () {\r\n                        $scope.locals.showMobileActions = true;\r\n                    };\r\n\r\n                    $scope.locals.cancelChooseAction = function () {\r\n                        $scope.locals.showMobileActions = false;\r\n                    };\r\n                },\r\n                templateUrl: 'sky/templates/grids/actionbar.html'\r\n            };\r\n        }]);\r\n}(jQuery));",
    "/*jslint browser: true, plusplus: true */\r\n/*global angular, jQuery */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('sky.helpbutton', [])\r\n        .directive('bbHelpButton', ['$state', function ($state) {\r\n            /// <summary>\r\n            /// This directive provides a button that launches the Blackbaud Help Widget.\r\n            /// The bbHelpKey attribute sets the help key. The widget will show the given key's corresponding help page\r\n            /// The bbSetHelpKeyOverride attribute, when set to \"true\", makes this directive's help key override the current page help key.\r\n            ///     The help key override will be removed when the directive is removed from the page.\r\n            /// </summary>\r\n\r\n            function link(scope, el, attrs) {\r\n                /*jslint unparam: true */\r\n                var oldHelpKeyOverride;\r\n\r\n                el.addClass('bb-helpbutton fa fa-question-circle close');\r\n\r\n                if (attrs.bbSetHelpKeyOverride && attrs.bbSetHelpKeyOverride.toLowerCase() === 'true') {\r\n                    oldHelpKeyOverride = $state.current.helpKeyOverride;\r\n                    $state.current.helpKeyOverride = attrs.bbHelpKey;\r\n\r\n                    el.on(\"remove\", function () {\r\n                        $state.current.helpKeyOverride = oldHelpKeyOverride;\r\n                    });\r\n                }\r\n\r\n                el.click(function () {\r\n                    window.BBHELP.HelpWidget.open(attrs.bbHelpKey);\r\n                });\r\n            }\r\n\r\n            return {\r\n                link: link\r\n            };\r\n        }]);\r\n\r\n}());\r\n",
    "/*jslint browser: true, plusplus: true */\r\n/*global angular, jQuery */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('sky.helpwidget', [])\r\n        .constant('bbHelpwidgetConfig', {\r\n            productId: 'Sky',\r\n            customLocales: [],\r\n            url: null\r\n        })\r\n        .directive('bbHelpwidget', ['$state', 'bbHelpwidgetConfig', function ($state, bbHelpwidgetConfig) {\r\n\r\n            function loadHelpWidget($state) {\r\n                if (!bbHelpwidgetConfig.url) {\r\n                    throw \"bbHelpwidgetConfig.url is not defined.\";\r\n                }\r\n\r\n                jQuery.ajax({\r\n                    cache: true,\r\n                    dataType: 'script',\r\n                    url: bbHelpwidgetConfig.url\r\n                }).done(function () {\r\n                    window.BBHELP.HelpWidget.load({\r\n                        product: bbHelpwidgetConfig.productId,\r\n                        customLocales: bbHelpwidgetConfig.customLocales,\r\n                        getCurrentHelpKey: function () {\r\n                            // $state.current.helpKeyOverride outranks $state.current.pageData.helpKey\r\n                            if ($state.current.helpKeyOverride) {\r\n                                return $state.current.helpKeyOverride;\r\n                            }\r\n\r\n                            if ($state.current.pageData) {\r\n                                return $state.current.pageData.helpKey;\r\n                            }\r\n                            return null;\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n\r\n            return {\r\n                link: function () {\r\n                    loadHelpWidget($state);\r\n                }\r\n            };\r\n        }]);\r\n\r\n}());\r\n",
    "/*jslint browser: true, plusplus: true */\r\n/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('sky.highlight', [])\r\n        .factory('bbHighlight', function () {\r\n            // Copied and modified from here so we don't have yet another jQuery plugin dependency.\r\n            // http://johannburkard.de/blog/programming/javascript/highlight-javascript-text-higlighting-jquery-plugin.html\r\n            function highlight(el, pat, classn) {\r\n                function innerHighlight(node, pat) {\r\n                    var pos,\r\n                        skip = 0,\r\n                        spannode,\r\n                        middlebit,\r\n                        i,\r\n                        middleclone;\r\n\r\n                    if (node.nodeType === 3) {\r\n                        pos = node.data.toUpperCase().indexOf(pat);\r\n                        if (pos >= 0) {\r\n                            classn = classn || 'highlight';\r\n\r\n                            spannode = document.createElement('span');\r\n                            spannode.className = String(classn);\r\n                            middlebit = node.splitText(pos);\r\n                            middlebit.splitText(pat.length);\r\n                            middleclone = middlebit.cloneNode(true);\r\n                            spannode.appendChild(middleclone);\r\n                            middlebit.parentNode.replaceChild(spannode, middlebit);\r\n                            skip = 1;\r\n                        }\r\n                    } else if (node.nodeType === 1 && node.childNodes && !/(script|style)/i.test(node.tagName)) {\r\n                        for (i = 0; i < node.childNodes.length; ++i) {\r\n                            i += innerHighlight(node.childNodes[i], pat);\r\n                        }\r\n                    }\r\n                    return skip;\r\n                }\r\n\r\n                return el.length && pat && pat.length ? el.each(function () {\r\n                    innerHighlight(this, pat.toUpperCase());\r\n                }) : el;\r\n            }\r\n\r\n            function removeHighlight(el) {\r\n                return el.find(\"span.highlight\").each(function () {\r\n                    var parentNode = this.parentNode;\r\n\r\n                    parentNode.replaceChild(this.firstChild, this);\r\n                    parentNode.normalize();\r\n                }).end();\r\n            }\r\n\r\n            highlight.clear = removeHighlight;\r\n\r\n            return highlight;\r\n        })\r\n        .directive('bbHighlight', ['bbHighlight', function (bbHighlight) {\r\n            return {\r\n                link: function (scope, el) {\r\n                    function highlight() {\r\n                        bbHighlight.clear(el);\r\n\r\n                        if (scope.highlightText) {\r\n                            bbHighlight(el, scope.highlightText);\r\n                        }\r\n                    }\r\n\r\n                    scope.$watch('highlightText', function (newValue, oldValue) {\r\n                        if (newValue !== oldValue) {\r\n                            highlight();\r\n                        }\r\n                    });\r\n\r\n                    scope.$watch('beacon', function (newValue, oldValue) {\r\n                        if (newValue !== oldValue) {\r\n                            scope.$evalAsync(highlight);\r\n                        }\r\n                    }, true);\r\n                },\r\n                restrict: 'A',\r\n                scope: {\r\n                    highlightText: '=bbHighlight',\r\n                    beacon: '=bbHighlightBeacon'\r\n                }\r\n            };\r\n        }]);\r\n}());",
    "/*global angular, define, enquire, require */\r\n(function (window) {\r\n    'use strict';\r\n\r\n    var XS_MEDIA_QUERY = '(max-width: 767px)',\r\n        SM_MEDIA_QUERY = '(min-width: 768px) and (max-width: 991px)',\r\n        MD_MEDIA_QUERY = '(min-width: 992px) and (max-width: 1199px)',\r\n        LG_MEDIA_QUERY = '(min-width: 1200px)',\r\n        bp = {},\r\n        handlers = [],\r\n        mediaBreakpoints;\r\n\r\n    function updateStatus(newSize) {\r\n        var handler,\r\n            i;\r\n\r\n        bp.xs = bp.sm = bp.md = bp.lg = false;\r\n        bp[newSize] = true;\r\n\r\n        for (i = 0; i < handlers.length; i += 1) {\r\n            handler = handlers[i];\r\n            if (handler) {\r\n                handler(bp);\r\n            }\r\n        }\r\n    }\r\n\r\n    (function (register) {\n        if (typeof define === 'function' && define.amd) {\n            // AMD. Register as an anonymous module.\n            require(['enquire'], register);\r\n        } else if (window.enquire) {\n            // Browser globals\n            register(enquire);\r\n        }\n    }(function (enquire) {\n        enquire.register(XS_MEDIA_QUERY, function () { updateStatus('xs'); });\r\n        enquire.register(SM_MEDIA_QUERY, function () { updateStatus('sm'); });\r\n        enquire.register(MD_MEDIA_QUERY, function () { updateStatus('md'); });\r\n        enquire.register(LG_MEDIA_QUERY, function () { updateStatus('lg'); });\r\n    }));\n\n\r\n    mediaBreakpoints = {\r\n        register: function (callback) {\r\n            handlers.push(callback);\r\n\r\n            //Fire handler immediately\r\n            callback(bp);\r\n        },\r\n\r\n        unregister: function (callback) {\r\n            var i;\r\n\r\n            for (i = 0; i < handlers.length; i += 1) {\r\n                if (handlers[i] === callback) {\r\n                    handlers.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        },\r\n\r\n        getCurrent: function () {\r\n            return bp;\r\n        }\r\n    };\r\n\r\n    angular.module('sky.mediabreakpoints', [])\r\n        .factory('bbMediaBreakpoints', function () {\r\n            return mediaBreakpoints;\r\n        });\r\n}(this));",
    "/*jslint browser: true, plusplus: true */\r\n/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('sky.modal', [])\r\n        .factory('bbModal', ['$modal', function ($modal) {\r\n            return {\r\n                open: function (opts) {\r\n                    // Change default values for modal options\r\n                    opts = angular.extend({\r\n                        backdrop: 'static'\r\n                    }, opts);\r\n\r\n                    return $modal.open(opts);\r\n                }\r\n            };\r\n        }])\r\n        .directive('bbModal', function () {\r\n                return {\r\n                    controller: angular.noop,\r\n                    replace: true,\r\n                    transclude: true,\r\n                    restrict: 'E',\r\n                    template: '<div class=\"bb-modal-content-wrapper\" ng-transclude></div>'\r\n                };\r\n        })\r\n        .directive('bbModalBody', function () {\r\n            return {\r\n                restrict: 'A',\r\n                template: function (el) {\r\n                    el.addClass('modal-body');\r\n                }\r\n            };\r\n        })\r\n        .directive('bbModalHeader', function () {\r\n            return {\r\n                controller: angular.noop,\r\n                replace: true,\r\n                transclude: true,\r\n                require: '^bbModal',\r\n                restrict: 'E',\r\n                templateUrl: 'sky/templates/modals/modalheader.html',\r\n                scope: {\r\n                    bbModalHelpKey: '='\r\n                }\r\n            };\r\n        })\r\n        .directive('bbModalFooter', function () {\r\n            return {\r\n                controller: angular.noop,\r\n                replace: true,\r\n                transclude: true,\r\n                require: '^bbModal',\r\n                restrict: 'E',\r\n                template: '<div class=\"modal-footer\" ng-transclude></div>'\r\n            };\r\n        })\r\n        .directive('bbModalFooterButton', function () {\r\n            return {\r\n                replace: true,\r\n                transclude: true,\r\n                require: '^bbModalFooter',\r\n                restrict: 'E',\r\n                template: '<button class=\"btn btn-white\" type=\"button\" ng-transclude></button>'\r\n            };\r\n        })\r\n        .directive('bbModalFooterButtonPrimary', ['bbResources', function (bbResources) {\r\n            return {\r\n                replace: true,\r\n                transclude: true,\r\n                require: '^bbModalFooter',\r\n                restrict: 'E',\r\n                template: '<button class=\"btn btn-primary\" type=\"submit\" ng-transclude></button>',\r\n                link: function ($scope, el) {\r\n                    if (el.children().length === 0) {\r\n                        el.append(\"<span>\" + bbResources.modal_footer_primary_button + \"</span>\");\r\n                    }\r\n                }\r\n            };\r\n        }])\r\n        .directive('bbModalFooterButtonCancel', ['bbResources', function (bbResources) {\r\n            return {\r\n                replace: true,\r\n                transclude: true,\r\n                require: '^bbModalFooter',\r\n                restrict: 'E',\r\n                template: '<button class=\"btn btn-white\" type=\"button\" ng-click=\"$parent.$parent.$dismiss(\\'cancel\\');\" ng-transclude></button>',\r\n                link: function ($scope, el) {\r\n                    if (el.children().length === 0) {\r\n                        el.append(\"<span>\" + bbResources.modal_footer_cancel_button + \"</span>\");\r\n                    }\r\n                }\r\n            };\r\n        }])\r\n}());\r\n",
    "/*jslint browser: true, plusplus: true */\r\n/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('sky.money', [])\r\n        .constant('bbMoneyConfig', {\r\n            currencyPositivePattern: '$n',\r\n            currencyDecimalDigits: 2,\r\n            currencyDecimalSeparator: '.',\r\n            currencyGroupSize: 3,\r\n            currencyGroupSeparator: ',',\r\n            currencySymbol: '$'\r\n        })\r\n        .directive('bbMoneyInput', ['$timeout', 'bbMoneyConfig', function ($timeout, bbMoneyConfig) {\r\n            return {\r\n                restrict: 'A',\r\n                scope: {\r\n                    numericValue: '=bbMoneyInput'\r\n                },\r\n                link: function ($scope, element) {\r\n                    var currencySymbol = bbMoneyConfig.currencySymbol,\r\n                        currencySymbolPlacement;\r\n\r\n                    //Derive some options based on the currency formatting pattern from the server.\r\n                    switch (bbMoneyConfig.currencyPositivePattern) {\r\n                    case 0: //$n\r\n                        currencySymbolPlacement = 'p'; //prefix\r\n                        break;\r\n                    case 1: //n$\r\n                        currencySymbolPlacement = 's'; //suffix\r\n                        break;\r\n                    case 2: //$ n\r\n                        currencySymbolPlacement = 'p'; //prefix\r\n                        currencySymbol += ' ';\r\n                        break;\r\n                    case 3: //n $\r\n                        currencySymbolPlacement = 's'; //suffix\r\n                        currencySymbol = ' ' + currencySymbol;\r\n                        break;\r\n                    }\r\n\r\n                    element.autoNumeric({\r\n                        aSep: bbMoneyConfig.currencyGroupSeparator,\r\n                        dGroup: bbMoneyConfig.currencyGroupSize,\r\n                        aDec: bbMoneyConfig.currencyDecimalSeparator,\r\n                        aSign: currencySymbol,\r\n                        pSign: currencySymbolPlacement,\r\n                        mDec: bbMoneyConfig.currencyDecimalDigits\r\n                    });\r\n\r\n                    //Setup on change handler to update scope value\r\n                    element.change(function () {\r\n                        var value = parseFloat(element.autoNumeric('get'));\r\n                        $scope.numericValue = value;\r\n                        $scope.$apply();\r\n                    });\r\n\r\n                    //When focusing in textbox, select all.  This is to workaround not having placeholder text for autonumeric.\r\n                    element.on('focus.bbMoneyInput', function () {\r\n                        $timeout(function () {\r\n                            element.select();\r\n                        });\r\n                    });\r\n\r\n                    $scope.$watch('numericValue', function (newValue, oldValue) {\r\n                        if (newValue !== oldValue) {\r\n                            if (newValue !== undefined && newValue !== null) {\r\n                                element.autoNumeric('set', newValue);\r\n                            } else {\r\n                                element.val(null);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n        }]);\r\n}());\r\n",
    "/*global angular, BBAUTH, jQuery */\r\n\r\n(function ($) {\r\n    'use strict';\r\n\r\n    angular.module('sky.omnibar', [])\r\n        .constant('bbOmnibarConfig', {\r\n            appLookupUrl: '',\r\n            enableHelp: false,\r\n            enableSearch: false,\r\n            productId: 'Sky',\r\n            searchPlaceholder: 'Search',\r\n            serviceName: 'Sky',\r\n            signOutUrl: '',\r\n            tenantId: '',\r\n            url: '//signin.blackbaud.com/omnibar.js'\r\n        })\r\n        .directive('bbOmnibar', ['$window', 'bbOmnibarConfig', function ($window, bbOmnibarConfig) {\r\n            return {\r\n                transclude: true,\r\n                template: '<div class=\"bb-omnibar-wrap\"></div><div class=\"bb-omnibar-menu-wrap\" ng-transclude></div>',\r\n                link: function (scope, el) {\r\n                    var omnibarEl = el.children('.bb-omnibar-wrap'),\r\n                        omnibarMenuEl = el.find('.bb-omnibar-menu-wrap .bb-omnibar-menu');\r\n\r\n                    function afterLoad() {\r\n                        var searchBox = omnibarEl.find('.searchbox'),\r\n                            searchContainer = omnibarEl.find('.searchContainer'),\r\n                            searchValue;\r\n\r\n                        // No longer need this holding div now that the menu was moved into the right location in the omnibar.\r\n                        el.children(\".bb-omnibar-menu-wrap\").remove();\r\n\r\n                        if (omnibarEl.find(\".mobile .productmenucontainer\").length === 0) {\r\n                            $(\".nav-wrap\").addClass(\"nav-wrap-showmobile\");\r\n                        }\r\n\r\n                        searchBox.attr('placeholder', bbOmnibarConfig.searchPlaceholder);\r\n\r\n                        scope.searchBox = searchBox;\r\n\r\n                        searchBox.on('keyup', function (event) {\r\n                            var value = searchBox.val();\r\n\r\n                            if (value !== searchValue) {\r\n                                searchValue = value;\r\n\r\n                                scope.searchText = value;\r\n                                scope.$apply();\r\n                            }\r\n\r\n                            scope.$emit('searchBoxKeyUp', event.keyCode);\r\n                        });\r\n\r\n                        scope.$watch('searching', function (searching) {\r\n                            if (searching) {\r\n                                searchContainer.addClass('searching');\r\n                            } else {\r\n                                searchContainer.removeClass('searching');\r\n                            }\r\n                        });\r\n\r\n                        scope.$watch('searchText', function (searchText) {\r\n                            searchText = searchText || '';\r\n                            if (searchText !== searchBox.val()) {\r\n                                searchValue = searchText;\r\n                                searchBox.val(searchText);\r\n                            }\r\n                        });\r\n\r\n                        scope.$apply();\r\n                    }\r\n\r\n                    function userLoaded(userData) {\r\n                        //If the user ID loaded in the omnibar does not match the user who loaded the page, sign the\r\n                        //user out of the application.  This will result in a redirect back to the auth size to update\r\n                        //the user's claims or ask the user to log back in.\r\n                        if (userData.id !== bbOmnibarConfig.authenticationUserId && bbOmnibarConfig.signOutUrl) {\r\n\r\n                            if (userData.id === null) {\r\n                                //If userData.id ==null then it may just means the omnibar is stale or there was a problem\r\n                                //with the interaction of the omnibar and the rex shell SPA client side code.\r\n                                //\r\n                                //If we can use localStorage to track data across sessions, then attempt to log out of NXT once\r\n                                //and see if this fixes it, but avoid an infinite redirect loop with the Auth Svc.\r\n                                //\r\n                                //If the browser doesn't support localStorage, then just return.\r\n                                //\r\n                                //If we don't back to the auth sign in site here, then it will just stay on the current page\r\n                                //with the understanding that the omnibar may be in a state of acting as though the user\r\n                                //is signed out.  The page is still secure because the Auth claims are evaluated on the server.\r\n                                //This special case is just about dealing with an edge case issue with client side javascript.\r\n                                if ($window.localStorage) {\r\n                                    var omnibarIndicatesNullUserTime = $window.localStorage.omnibarIndicatesNullUserTime;\r\n                                    if (omnibarIndicatesNullUserTime && (new Date() - Date.parse(omnibarIndicatesNullUserTime)) / 1000 <= 10) {\r\n                                        // We just looped through Auth within the last 10 seconds, so don't leave again now.\r\n                                        return;\r\n                                    }\r\n\r\n                                    try {\r\n                                        // Stash the time that we're doing this redirect to avoid infinite loops.\r\n                                        $window.localStorage.omnibarIndicatesNullUserTime = (new Date()).toString();\r\n                                    } catch (e) {\r\n                                        // Safari private browsing will throw an exception on setting localStroage.\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            }\r\n\r\n                            // Log out and redirec to auth service.\r\n                            $window.location.href = bbOmnibarConfig.signOutUrl;\r\n                        }\r\n                    }\r\n\r\n                    $.ajax({\r\n                        cache: true,\r\n                        dataType: 'script',\r\n                        url: bbOmnibarConfig.url\r\n                    }).done(function () {\r\n                        BBAUTH.Omnibar.load(\r\n                            omnibarEl,\r\n                            {\r\n                                appLookupUrl: bbOmnibarConfig.appLookupUrl,\r\n                                serviceName: bbOmnibarConfig.serviceName,\r\n                                signOutRedirectUrl: bbOmnibarConfig.signOutRedirectUrl,\r\n                                enableSearch: bbOmnibarConfig.enableSearch,\r\n                                afterLoad: afterLoad,\r\n                                userLoaded: userLoaded,\r\n                                productId: bbOmnibarConfig.productId,\r\n                                tenantId: bbOmnibarConfig.tenantId,\r\n                                enableHelp: bbOmnibarConfig.enableHelp,\r\n                                menuEl: omnibarMenuEl\r\n                            }\r\n                        );\r\n                    });\r\n                }\r\n            };\r\n        }])\r\n        .directive('bbOmnibarMenu', function () {\r\n            return {\r\n                replace: true,\r\n                require: '^bbOmnibar',\r\n                restrict: 'E',\r\n                transclude: true,\r\n                template: '<div class=\"bb-omnibar-menu\" ng-transclude></div>'\r\n            };\r\n        });\r\n}(jQuery));\r\n",
    "/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var evtNsPos = 0;\r\n\r\n    angular.module('sky.pagination', ['ui.bootstrap.pagination'])\r\n        .config(['paginationConfig', function (paginationConfig) {\r\n            paginationConfig.maxSize = 4;\r\n            paginationConfig.itemsPerPage = 5;\r\n\r\n            paginationConfig.nextText = paginationConfig.previousText = '';\r\n        }])\r\n        .factory('bbPaging', function () {\r\n            return {\r\n                init: function (sourceData, config) {\r\n                    var paging;\r\n\r\n                    function setPageData() {\r\n                        var startingIndex,\r\n                            currentPage;\r\n\r\n                        if (!paging.disabled && sourceData) {\r\n                            currentPage = paging.currentPage - 1; // 1-based\r\n\r\n                            startingIndex = currentPage * paging.itemsPerPage;\r\n                            paging.items = sourceData.slice(startingIndex, startingIndex + paging.itemsPerPage);\r\n                        }\r\n                    }\r\n\r\n                    paging = {\r\n                        currentPage: 1,\r\n                        itemsPerPage: 5,\r\n                        totalItems: sourceData ? sourceData.length : 0,\r\n                        pageChanged: setPageData\r\n                    };\r\n\r\n                    angular.extend(paging, config);\r\n\r\n                    setPageData();\r\n\r\n                    return paging;\r\n                }\r\n            };\r\n        })\r\n        .directive('bbPagination', function () {\r\n            return {\r\n                restrict: 'A',\r\n                scope: {\r\n                    paginationDisabled: '=bbPaginationDisabled'\r\n                },\r\n                compile: function (el, attrs) {\r\n                    var pagedData = attrs.bbPagination;\r\n\r\n                    /*jslint white: true */\r\n                    el.html(\r\n                        '<pagination ng-show=\"' + pagedData + '.totalItems > ' + pagedData + '.itemsPerPage\" total-items=\"' + pagedData + '.totalItems\" ng-model=\"' + pagedData + '.currentPage\" ng-change=\"' + pagedData + '.pageChanged()\" items-per-page=\"' + pagedData + '.itemsPerPage\"></pagination>' +\r\n                        '<div class=\"clearfix\"></div>'\r\n                    );\r\n                    /*jslint white: false */\r\n\r\n                    return function (scope, el) {\r\n                        scope.$watch('paginationDisabled', function (newValue) {\r\n                            var paginationDummyEl,\r\n                                paginationEl;\r\n\r\n                            // Since we don't have complete control over the Angular Bootstrap UI pagination directive,\r\n                            // we can't disable it directly.  Instead just clone the pagination element, disable it\r\n                            // and show it while hiding the original element when pagination is disabled.\r\n                            if (angular.isDefined(newValue)) {\r\n                                paginationEl = el.find('.pagination');\r\n\r\n                                if (newValue) {\r\n                                    paginationDummyEl = paginationEl\r\n                                        .clone()\r\n                                        .addClass('bb-pagination-dummy');\r\n\r\n                                    paginationEl\r\n                                        .before(paginationDummyEl)\r\n                                        .hide();\r\n\r\n                                    paginationDummyEl.find('li').addClass('disabled');\r\n                                } else {\r\n                                    el.find('.bb-pagination-dummy').remove();\r\n                                    paginationEl.show();\r\n                                }\r\n                            }\r\n                        });\r\n                    };\r\n                }\r\n            };\r\n        })\r\n        .directive('bbPaginationContent', ['$timeout', '$window', function ($timeout, $window) {\r\n            return {\r\n                link: function (scope, el) {\r\n                    var evtNs;\r\n\r\n                    evtNsPos += 1;\r\n\r\n                    evtNs = \"bbPaginationContent\" + evtNsPos;\r\n\r\n                    function removeWindowResizeHandler() {\r\n                        angular.element($window).off('.' + evtNs);\r\n                    }\r\n\r\n                    scope.$watch('pagedData', function () {\r\n                        var pageCount,\r\n                            pagedData,\r\n                            tries = 0,\r\n                            windowResizeTimeout;\r\n\r\n                        // Try for 1 second to set a min-height on paged data so the paging bar doesn't jump\r\n                        // up when the user hits a page with less than the max number of items.\r\n                        function trySetMinHeight() {\r\n                            $timeout(function () {\r\n                                var currentPage,\r\n                                    height = el.height(),\r\n                                    i,\r\n                                    maxHeight = 0;\r\n\r\n                                function changePage(pageNumber) {\r\n                                    pagedData.currentPage = pageNumber;\r\n                                    pagedData.pageChanged();\r\n\r\n                                    scope.$apply();\r\n                                }\r\n\r\n                                if (pageCount <= 1) {\r\n                                    return;\r\n                                }\r\n\r\n                                if (height === 0 && tries < 5) {\r\n                                    tries += 1;\r\n                                    trySetMinHeight();\r\n                                    return;\r\n                                }\r\n\r\n                                el.addClass('bb-pagination-content bb-pagination-content-calculating');\r\n\r\n                                // Cache the current page so we can put it back.\r\n                                currentPage = pagedData.currentPage;\r\n\r\n                                // Reset the min height from any previous iteration.\r\n                                el.css('min-height', 0);\r\n\r\n                                // Navigate through each page and find the tallest page.\r\n                                for (i = 1; i <= pageCount; i += 1) {\r\n                                    changePage(i);\r\n                                    maxHeight = Math.max(el.height(), maxHeight);\r\n                                }\r\n\r\n                                // Set the min height to the height of the tallest page.\r\n                                el.css('min-height', maxHeight);\r\n\r\n                                // Navigate back to the initial page.\r\n                                changePage(currentPage);\r\n\r\n                                el.removeClass('bb-pagination-content-calculating');\r\n                            }, 200);\r\n                        }\r\n\r\n                        pagedData = scope.pagedData;\r\n\r\n                        if (angular.isDefined(scope.pagedData)) {\r\n                            pageCount = Math.ceil(pagedData.totalItems / (pagedData.itemsPerPage || 1));\r\n\r\n                            if (pageCount > 1) {\r\n                                trySetMinHeight();\r\n\r\n                                removeWindowResizeHandler();\r\n\r\n                                angular.element($window).on('resize.' + evtNs, function () {\r\n                                    if (windowResizeTimeout) {\r\n                                        $timeout.cancel(windowResizeTimeout);\r\n                                    }\r\n\r\n                                    windowResizeTimeout = $timeout(trySetMinHeight, 500);\r\n                                });\r\n\r\n                                el.on('$destroy', removeWindowResizeHandler);\r\n                            }\r\n                        }\r\n                    });\r\n                },\r\n                scope: {\r\n                    pagedData: '=bbPaginationContent'\r\n                }\r\n            };\r\n        }]);\r\n}());",
    "/*global angular */\r\n\r\n(function ($) {\r\n    'use strict';\r\n\r\n    angular.module('sky.popover', ['sky.data'])\r\n        .directive('bbPopoverTemplatePopup', ['$templateCache', '$compile', '$timeout', function ($templateCache, $compile, $timeout) {\r\n            return {\r\n                restrict: 'EA',\r\n                replace: true,\r\n                scope: { title: '@', content: '@', placement: '@', animation: '&', isOpen: '&' },\r\n                templateUrl: 'sky/templates/popover/popup.html',\r\n                compile: function () {\r\n                    return function ($scope, el) {\r\n                        var compiledEl,\r\n                            html = $templateCache.get($scope.content),\r\n                            popupScope,\r\n                            origScope = $scope.$parent.$parent.$parent;\r\n\r\n                        function removeTooltip() {\r\n                            if (el) {\r\n                                el.remove();\r\n                                el = null;\r\n                            }\r\n                            if (popupScope) {\r\n                                popupScope.$destroy();\r\n                                popupScope = null;\r\n                            }\r\n                        };\r\n\r\n                        popupScope = origScope.$new();\r\n                        popupScope.hide = function () {\r\n                            $scope.$parent.$parent.isOpen = false;\r\n\r\n                            //Borrowed from $tooltip, need to remove the item after the animation\r\n                            $timeout(removeTooltip, 500);\r\n                        };\r\n\r\n                        compiledEl = $compile(html)(popupScope);\r\n                        el.find('.popover-content').html(compiledEl);\r\n                        popupScope.$apply();\r\n                    };\r\n                }\r\n            };\r\n        }])\r\n        .directive('bbPopoverTemplate', ['$tooltip', function ($tooltip) {\r\n            return $tooltip('bbPopoverTemplate', 'popover', 'click');\r\n        }]);\r\n}(jQuery));",
    "/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var serviceModules = [];\r\n\r\n    angular.module('sky.resources', serviceModules)\r\n        .factory('bbResources', function () {\r\n            return {\r\n                'checklist_select_all': 'Select all', // Text for the link in a checklist to select all items.\r\n                'checklist_clear_all': 'Clear all', // Text for the link in a checklist to clear selections.\r\n                'checklist_no_items': 'No items found', // Text in a checklist when no items are shown based on the current filter.\r\n                'grid_back_to_top': 'Back to top', // Text for link in grid to scroll back to the top.\r\n                'grid_column_picker_all_categories': 'All', // Button text for category filters used to indicate that all columns should be shown in the column picker\r\n                'grid_column_picker_description_header': 'Description', // In the column picker, the header for the column showing the description of the columns to include in the grid.\r\n                'grid_column_picker_header': 'Choose columns to show in the list', // Header text for the grid column picker screen\r\n                'grid_column_picker_name_header': 'Column', // In the column picker, the header for the column showing the names of the columns to include in the grid.\r\n                'grid_column_picker_search_placeholder': 'Search by name', // Search text placeholder for the search box on the grid column picker\r\n                'grid_column_picker_submit': 'Apply changes', // Button text for applying changes made in the grid column picker\r\n                'grid_columns_button': ' Choose columns', // Label for button to select columns to display in a grid.\r\n                'grid_filters_apply': 'Apply filters', // Text for button on filters flyout to apply the selected filters to the grid\r\n                'grid_filters_button': 'Filters', // Label for button to select filters to be applied to a grid.\r\n                'grid_filters_clear': 'Clear', // Text for button on filters flyout to clear the selected filters for the grid\r\n                'grid_filters_header': 'Filter', // Header text for grid filters flyout\r\n                'grid_filters_hide': 'Hide', // Hide link text for grid filters flyout\r\n                'grid_filters_summary_header': 'Filter:', // Header text for filter summary on top of grid\r\n                'grid_load_more': 'Load more', // The text for the button to load additional rows into the grid if more rows are available.\r\n                'grid_search_placeholder': 'Find in this list', // Placeholder text in grid search box\r\n                'modal_footer_cancel_button': 'Cancel', // Default lable text for modal cancel button\r\n                'modal_footer_primary_button': 'Save', // Default lable text for modal primary button\r\n                'month_short_april': 'Apr',\r\n                'month_short_august': 'Aug',\r\n                'month_short_december': 'Dec',\r\n                'month_short_february': 'Feb',\r\n                'month_short_january': 'Jan',\r\n                'month_short_july': 'Jul',\r\n                'month_short_june': 'Jun',\r\n                'month_short_march': 'Mar',\r\n                'month_short_may': 'May',\r\n                'month_short_november': 'Nov',\r\n                'month_short_october': 'Oct',\r\n                'month_short_september': 'Sep',\r\n                'text_expand_see_less': 'See less', // Display less text content\r\n                'text_expand_see_more': 'See more',\r\n                'grid_action_bar_clear_selection': 'Clear selection', // Clear the selections in the grid.\r\n                'grid_action_bar_cancel_mobile_actions': 'Cancel', // Close the menu where you choose an action in mobile multiselect.\r\n                'grid_action_bar_choose_action': 'Choose an action', // Open a menu to choose an action in mobile  multiselect.\r\n                'date_field_invalid_date_message': 'Please enter a valid date', // error message shown when an invalid date is entered.\r\n                'date_range_picker_this_week': 'This week', //text for date range picker\r\n                'date_range_picker_last_week': 'Last week', //text for date range picker\r\n                'date_range_picker_next_week': 'Next week', //text for date range picker\r\n                'date_range_picker_this_month': 'This month', //text for date range picker\r\n                'date_range_picker_last_month': 'Last month', //text for date range picker\r\n                'date_range_picker_next_month': 'Next month', //text for date range picker\r\n                'date_range_picker_this_calendar_year': 'This calendar year', //text for date range picker\r\n                'date_range_picker_last_calendar_year': 'Last calendar year', //text for date range picker\r\n                'date_range_picker_next_calendar_year': 'Next calendar year', //text for date range picker\r\n                'date_range_picker_this_fiscal_year': 'This fiscal year', //text for date range picker\r\n                'date_range_picker_last_fiscal_year': 'Last fiscal year', //text for date range picker\r\n                'date_range_picker_next_fiscal_year': 'Next fiscal year', //text for date range picker\r\n                'date_range_picker_this_quarter': 'This quarter', //text for date range picker\r\n                'date_range_picker_last_quarter': 'Last quarter', //text for date range picker\r\n                'date_range_picker_next_quarter': 'Next quarter', //text for date range picker\r\n                'date_range_picker_at_any_time': 'At any time', //text for date range picker\r\n                'date_range_picker_today': 'Today', //text for date range picker\r\n                'date_range_picker_tomorrow': 'Tomorrow', //text for date range picker\r\n                'date_range_picker_yesterday': 'Yesterday', //text for date range picker\r\n                'date_range_picker_filter_description_this_week': '{0} for this week', //text for date range picker\r\n                'date_range_picker_filter_description_last_week': '{0} from last week', //text for date range picker\r\n                'date_range_picker_filter_description_next_week': '{0} for next week', //text for date range picker\r\n                'date_range_picker_filter_description_this_month': '{0} for this month', //text for date range picker\r\n                'date_range_picker_filter_description_last_month': '{0} from last month', //text for date range picker\r\n                'date_range_picker_filter_description_next_month': '{0} for next month', //text for date range picker\r\n                'date_range_picker_filter_description_this_calendar_year': '{0} for this calendar year', //text for date range picker\r\n                'date_range_picker_filter_description_last_calendar_year': '{0} from last calendar year', //text for date range picker\r\n                'date_range_picker_filter_description_next_calendar_year': '{0} for next calendar year', //text for date range picker\r\n                'date_range_picker_filter_description_this_fiscal_year': '{0} for this fiscal year', //text for date range picker\r\n                'date_range_picker_filter_description_last_fiscal_year': '{0} from last fiscal year', //text for date range picker\r\n                'date_range_picker_filter_description_next_fiscal_year': '{0} for next fiscal year', //text for date range picker\r\n                'date_range_picker_filter_description_this_quarter': '{0} for this quarter', //text for date range picker\r\n                'date_range_picker_filter_description_last_quarter': '{0} from last quarter', //text for date range picker\r\n                'date_range_picker_filter_description_next_quarter': '{0} for next quarter', //text for date range picker\r\n                'date_range_picker_filter_description_at_any_time': '{0} at any time', //text for date range picker\r\n                'date_range_picker_filter_description_today': '{0} for today', //text for date range picker\r\n                'date_range_picker_filter_description_yesterday': '{0} from yesterday', //text for date range picker\r\n                'date_range_picker_filter_description_tomorrow': '{0} for tomorrow' //text for date range picker\r\n            };\r\n        });\r\n}());",
    "/*jslint plusplus: true */\r\n/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var RETRY_INTERVAL = 100,\r\n        RETRY_MAX = 10;\r\n\r\n    angular.module('sky.scrollintoview', [])\r\n        .constant('bbScrollIntoViewConfig', {\r\n            reservedBottom: 0,\r\n            reservedTop: 0\r\n        })\r\n        .factory('bbScrollIntoView', ['$window', function ($window) {\r\n            function scrollIntoView(el, options) {\r\n                var currentScrollTop,\r\n                    elBottom,\r\n                    elHeight,\r\n                    elOffset,\r\n                    elTop,\r\n                    isScrolledOffBottom,\r\n                    isScrolledOffTop,\r\n                    newScrollTop,\r\n                    reservedBottom,\r\n                    reservedTop,\r\n                    viewportHeight,\r\n                    windowHeight,\r\n                    windowEl;\r\n\r\n                windowEl = angular.element($window);\r\n\r\n                options = options || {};\r\n                reservedBottom = options.reservedBottom || 0;\r\n                reservedTop = options.reservedTop || 0;\r\n\r\n                elOffset = el.offset();\r\n                elHeight = el.outerHeight();\r\n\r\n                elTop = elOffset.top;\r\n                elBottom = elTop + elHeight;\r\n\r\n                windowHeight = windowEl.height();\r\n                currentScrollTop = windowEl.scrollTop();\r\n\r\n                isScrolledOffBottom = elBottom > windowHeight + (currentScrollTop - reservedBottom);\r\n                isScrolledOffTop = elTop < (currentScrollTop + reservedTop);\r\n\r\n                if (isScrolledOffBottom || isScrolledOffTop) {\r\n                    if (isScrolledOffBottom) {\r\n                        newScrollTop = elBottom - (windowHeight + reservedBottom);\r\n                    }\r\n\r\n                    viewportHeight = windowHeight - (reservedTop + reservedBottom);\r\n\r\n                    if (!isScrolledOffBottom || newScrollTop + elHeight > viewportHeight) {\r\n                        newScrollTop = elTop - reservedTop;\r\n                    }\r\n\r\n                    angular.element('html, body').animate(\r\n                        {\r\n                            scrollTop: newScrollTop\r\n                        },\r\n                        {\r\n                            duration: 250\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n\r\n            return scrollIntoView;\r\n        }])\r\n        .directive('bbScrollIntoView', ['$timeout', 'bbScrollIntoViewConfig', 'bbScrollIntoView', function ($timeout, bbScrollIntoViewConfig, bbScrollIntoView) {\r\n            function link(scope, el) {\r\n                var previousTimeout,\r\n                    retryCount;\r\n\r\n                function doScroll(firstTry) {\r\n                    if (previousTimeout) {\r\n                        // Make sure any pending scrolling is canceled.\r\n                        $timeout.cancel(previousTimeout);\r\n                    }\r\n\r\n                    if (firstTry) {\r\n                        retryCount = 0;\r\n                    }\r\n\r\n                    if (el.is(':visible') && el.children('.collapsing').length === 0) {\r\n                        bbScrollIntoView(el, bbScrollIntoViewConfig);\r\n                    } else if (retryCount < RETRY_MAX) {\r\n                        // Keep trying to scroll until the element is visible or we run out of retry attempts.\r\n                        retryCount++;\r\n                        previousTimeout = $timeout(doScroll, RETRY_INTERVAL);\r\n                    }\r\n                }\r\n\r\n                scope.$watch('trigger', function (newValue, oldValue) {\r\n                    if (newValue && !oldValue) {\r\n                        doScroll(true);\r\n                    }\r\n                });\r\n            }\r\n\r\n            return {\r\n                link: link,\r\n                restrict: 'A',\r\n                scope: {\r\n                    trigger: '=bbScrollIntoView'\r\n                }\r\n            };\r\n        }]);\r\n}());",
    "/*jslint browser: true, plusplus: true */\r\n/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var elIdSuffix = 0;\r\n\r\n    function createListAnchorItem(id, automationId) {\r\n        var automationAttribute;\r\n        if (automationId) {\r\n            automationAttribute = ' data-bbauto-field=\"' + automationId + '\"';\r\n        }\r\n        return '<li><a href=\"#' + id + '\"' + automationAttribute + '></a></li>';\r\n    }\r\n\r\n    function createGroupHeaderDiv() {\r\n        return '<div class=\"rt-tab-accordion-header\"></div>';\r\n    }\r\n\r\n    function createTabContentDiv(content, id) {\r\n        var tabContentEl = angular.element(content).wrap('<div id=\"' + id + '\"></div>');\r\n        tabContentEl.append('<div class=\"clearfix\"></div>');\r\n\r\n        return angular.element(\"#\" + id);\r\n    }\r\n\r\n    function getResponsiveTabHeader(headerCount, headerTitle) {\r\n        var header =\r\n            '<div>' +\r\n            '<span class=\"bb-tab-header-title-responsive\">' + (headerTitle || '') + '</span>' +\r\n            '<span class=\"bb-tab-header-count-responsive\">' + (headerCount >= 0 ? headerCount : '') + '</span>' +\r\n            '<div class=\"bb-tab-header-chervon-responsive glyphicon glyphicon-chevron-down\"></div>' +\r\n            '<div class=\"bb-tab-header-chervon-responsive glyphicon glyphicon-chevron-up\"></div>' +\r\n            '</div>';\r\n        return header;\r\n    }\r\n\r\n    function getTabHeader(headerCount, headerTitle) {\r\n        var header =\r\n            '<div>' +\r\n            '<span class=\"bb-tab-header-title\">' + (headerTitle || '') + '</span>' +\r\n            '<span class=\"bb-tab-header-count\">' + (headerCount >= 0 ? headerCount : '') + '</span>' +\r\n            '</div>';\r\n        return header;\r\n    }\r\n\r\n    angular.module('sky.tabs', [])\r\n        .directive('bbTab', ['$state', '$rootScope',\r\n            function ($state, $rootScope) {\r\n                return {\r\n                    replace: true,\r\n                    transclude: true,\r\n                    restrict: 'E',\r\n                    templateUrl: 'sky/templates/tabs/tab.html',\r\n                    scope: {\r\n                        bbTabAutomationId: '=',\r\n                        bbTabOptions: '='\r\n                    },\r\n                    controller: ['$scope', function ($scope) {\r\n                        $scope.tabGroups = [];\r\n                        $scope.tabsInitialized = false;\r\n\r\n                        this.addTabGroup = function (group) {\r\n                            $scope.tabGroups.push(group);\r\n                        };\r\n\r\n                        this.updateTabItemHeader = function (item) {\r\n                            $scope.updateTabItemHeader(item);\r\n                        };\r\n                    }],\r\n                    link: function ($scope, element) {\r\n                        var activeTab = null,\r\n                            nextTabIndexToUse = 0,\r\n                            stateChangeDeregistration;\r\n\r\n                        function getActiveTabIndexFromCurrentState() {\r\n                            var i,\r\n                                j,\r\n                                tabGroup,\r\n                                tabGroupItem,\r\n                                tabGroups = $scope.tabGroups;\r\n\r\n                            for (i = 0; i < tabGroups.length; i++) {\r\n                                tabGroup = tabGroups[i];\r\n                                for (j = 0; j < tabGroup.tabs.length; j++) {\r\n                                    tabGroupItem = tabGroup.tabs[j];\r\n                                    if (tabGroupItem.sref && $state.is(tabGroupItem.sref)) {\r\n                                        return tabGroupItem.index - 1;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        function buildTabs() {\r\n                            var contentEls,\r\n                                contentIndex = 0,\r\n                                i,\r\n                                j,\r\n                                tabGroups = $scope.tabGroups,\r\n                                tabGroup,\r\n                                tabGroupItem,\r\n                                unorderedListEl = element.find('ul:first');\r\n\r\n                            contentEls = element.find('bb-tab-group-item > div');\r\n\r\n                            //take div with ids of each tab and move them outside the ul\r\n                            for (i = 0; i < tabGroups.length; i++) {\r\n                                tabGroup = tabGroups[i];\r\n                                element.append(createGroupHeaderDiv());\r\n                                for (j = 0; j < tabGroup.tabs.length; j++) {\r\n                                    tabGroupItem = tabGroup.tabs[j];\r\n                                    tabGroupItem.index = (++nextTabIndexToUse);\r\n                                    tabGroupItem.id = 'bb-tab-id-' + (++elIdSuffix);\r\n\r\n                                    unorderedListEl.append(createListAnchorItem(tabGroupItem.id, tabGroupItem.automationId));\r\n                                    element.append(createTabContentDiv(contentEls[contentIndex], tabGroupItem.id));\r\n\r\n                                    contentIndex = contentIndex + 1;\r\n                                }\r\n                                unorderedListEl.append('<li class=\"rt-tab-spacer\"></li>');\r\n                                element.append('<div class=\"rt-tab-accordion-spacer\"></div>');\r\n                            }\r\n                            element.find('bb-tab-group').remove();\r\n                        }\r\n\r\n                        function activateActiveTabModel() {\r\n                            if (activeTab) {\r\n                                var activeTabModel,\r\n                                    activeTabId = activeTab.selector.substring(1),\r\n                                    i,\r\n                                    j,\r\n                                    sref,\r\n                                    tabGroup,\r\n                                    tabGroupItem,\r\n                                    tabGroups = $scope.tabGroups;\r\n\r\n                                for (i = 0; i < tabGroups.length; i++) {\r\n                                    tabGroup = tabGroups[i];\r\n                                    for (j = 0; j < tabGroup.tabs.length; j++) {\r\n                                        tabGroupItem = tabGroup.tabs[j];\r\n                                        if (tabGroupItem.id === activeTabId) {\r\n                                            activeTabModel = tabGroupItem;\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                if (activeTabModel) {\r\n                                    sref = activeTabModel.sref;\r\n                                    if (sref) {\r\n                                        if (!$state.is(sref)) {\r\n                                            $state.go(sref);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                //this is where lazy loading/responsive logic would go, fire an event\r\n                            }\r\n                        }\r\n\r\n                        function handleTabActivate(event, tab) {\r\n                            /*jslint unparam: true */\r\n                            activeTab = tab;\r\n                            activateActiveTabModel();\r\n                        }\r\n\r\n                        function handleTabsActivateState(event, state) {\r\n                            /*jslint unparam: true */\r\n                            if (state.oldState !== state.newState) {\r\n                                activateActiveTabModel();\r\n                            }\r\n                        }\r\n\r\n                        //https://github.com/jellekralt/Responsive-Tabs\r\n                        function addResponsiveTabs() {\r\n                            var defaults,\r\n                                fixed,\r\n                                options;\r\n\r\n                            defaults = {\r\n                                active: getActiveTabIndexFromCurrentState() || 0,\r\n                                collapsible: 'accordion',\r\n                                rotate: false,\r\n                                startCollapsed: false\r\n                            };\r\n\r\n                            options = $scope.bbTabOptions || defaults;\r\n\r\n                            fixed = {\r\n                                activate: handleTabActivate,\r\n                                activateState: handleTabsActivateState\r\n                                //Needs implementation with routes\r\n                                //setHash: false\r\n                            };\r\n\r\n                            options = angular.extend({}, options, fixed);\r\n\r\n                            element.responsiveTabs(options);\r\n                        }\r\n\r\n                        function headersExistForAllTabs() {\r\n                            var i,\r\n                                j,\r\n                                tabGroup,\r\n                                tabGroupItem;\r\n                            for (i = 0; i < $scope.tabGroups.length; i++) {\r\n                                tabGroup = $scope.tabGroups[i];\r\n                                for (j = 0; j < tabGroup.tabs.length; j++) {\r\n                                    tabGroupItem = tabGroup.tabs[j];\r\n                                    if (!angular.isDefined(tabGroupItem.header) || tabGroupItem.header === null) {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                            return true;\r\n                        }\r\n\r\n                        function headerCallBack(data, args) {\r\n                            var tabHeaderInfo = data,\r\n                                tabElements;\r\n                            if (tabHeaderInfo) {\r\n                                tabElements = angular.element('a[href=#' + args.id + ']');\r\n                                if (tabElements[0]) {\r\n                                    angular.element(tabElements[0]).html(getTabHeader(tabHeaderInfo.headerCount, tabHeaderInfo.headerTitle));\r\n                                }\r\n                                if (tabElements[1]) {\r\n                                    angular.element(tabElements[1]).html(getResponsiveTabHeader(tabHeaderInfo.headerCount, tabHeaderInfo.headerTitle));\r\n                                }\r\n                            }\r\n\r\n                            $scope.tabsInitialized = headersExistForAllTabs();\r\n                        }\r\n\r\n                        function initializeTabHeaders() {\r\n                            var headerCallBackArgs,\r\n                                i,\r\n                                j,\r\n                                tabGroup,\r\n                                tabGroupItem;\r\n                            for (i = 0; i < $scope.tabGroups.length; i++) {\r\n                                tabGroup = $scope.tabGroups[i];\r\n                                for (j = 0; j < tabGroup.tabs.length; j++) {\r\n                                    tabGroupItem = tabGroup.tabs[j];\r\n\r\n                                    headerCallBackArgs = { id: tabGroupItem.id };\r\n                                    if (angular.isDefined(tabGroupItem.header) && tabGroupItem.header !== null) {\r\n                                        if (angular.isString(tabGroupItem.header)) {\r\n                                            headerCallBack({ headerTitle: tabGroupItem.header }, headerCallBackArgs);\r\n                                        } else {\r\n                                            headerCallBack({ headerTitle: tabGroupItem.header.headerTitle, headerCount: tabGroupItem.header.headerCount }, headerCallBackArgs);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        function afterContentRender() {\r\n                            addResponsiveTabs(element[0], $scope.bbTabOptions);\r\n                            initializeTabHeaders();\r\n                        }\r\n\r\n                        buildTabs();\r\n\r\n                        afterContentRender();\r\n\r\n                        stateChangeDeregistration = $rootScope.$on('$stateChangeSuccess', function () {\r\n                            var tabId = getActiveTabIndexFromCurrentState();\r\n\r\n                            if (tabId >= 0 && activeTab && tabId !== activeTab.id) {\r\n                                //The state has changed and the new state matches a different tab\r\n                                //than is current active.  Activate that tab.\r\n                                element.responsiveTabs('activate', tabId);\r\n                            }\r\n                        });\r\n\r\n                        $scope.updateTabItemHeader = function (item) {\r\n                            var headerObject;\r\n                            if (angular.isString(item.header)) {\r\n                                headerObject = {\r\n                                    headerTitle: item.header\r\n                                };\r\n                            } else {\r\n                                headerObject = {\r\n                                    headerTitle: item.header.headerTitle,\r\n                                    headerCount: item.header.headerCount\r\n                                };\r\n                            }\r\n                            headerCallBack(\r\n                                headerObject,\r\n                                {\r\n                                    id: item.id\r\n                                }\r\n                            );\r\n                        };\r\n\r\n                        $scope.$on('$destroy', function () {\r\n                            stateChangeDeregistration();\r\n                            element.responsiveTabs('destroy');\r\n                        });\r\n                    }\r\n                };\r\n            }])\r\n        .directive('bbTabGroup', function () {\r\n            return {\r\n                require: '^bbTab',\r\n                restrict: 'E',\r\n                scope: {\r\n                },\r\n                controller: ['$scope', function ($scope) {\r\n                    $scope.tabGroupItems = [];\r\n\r\n                    this.addTabGroupItem = function (item) {\r\n                        $scope.tabGroupItems.push(item);\r\n                    };\r\n\r\n                    this.updateTabItemHeader = function (item) {\r\n                        $scope.tabCtrl.updateTabItemHeader(item);\r\n                    };\r\n                }],\r\n                link: function ($scope, element, attrs, tabCtrl) {\r\n                    /*jslint unparam: true */\r\n                    $scope.tabCtrl = tabCtrl;\r\n                    tabCtrl.addTabGroup({ tabs: $scope.tabGroupItems });\r\n                }\r\n            };\r\n        })\r\n        .directive('bbTabGroupItem', function () {\r\n            return {\r\n                require: '^bbTabGroup',\r\n                restrict: 'E',\r\n                transclude: true,\r\n                scope: {\r\n                    bbTabItemHeaderFunction: '&',\r\n                    bbTabItemHeader: '=',\r\n                    bbTabItemCount: '=',\r\n                    bbTabItemSref: '=',\r\n                    bbTabItemAutomationId: '='\r\n                },\r\n                link: function ($scope, element, attrs, tabGroupCtrl) {\r\n                    /*jslint unparam: true */\r\n                    var item = {\r\n                        header: $scope.bbTabItemHeader,\r\n                        sref: $scope.bbTabItemSref,\r\n                        automationId: $scope.bbTabItemAutomationId,\r\n                        id: null\r\n                    };\r\n                    tabGroupCtrl.addTabGroupItem(item);\r\n\r\n                    // Watching the header and its child properties so that changes to counts, etc will update the UI.\r\n                    $scope.$watch('bbTabItemHeader', function (newValue, oldValue) {\r\n                        if (angular.isDefined(newValue) && newValue !== null) {\r\n                            item.header = newValue;\r\n                            tabGroupCtrl.updateTabItemHeader(item);\r\n                        }\r\n                    }, true);\r\n                },\r\n                template: '<div ng-transclude></div>'\r\n            };\r\n        });\r\n}());\r\n",
    "/*jslint nomen: true, plusplus: true */\r\n/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var BB_TEMPLATE_RESULT = 'bb-template-result';\r\n\r\n    function createItemClassName(index) {\r\n        return 'bb-template-item-' + index;\r\n    }\r\n\r\n    function insertTemplateItems(templateEl, items) {\r\n        var i,\r\n            n;\r\n\r\n        // Move each item into the template element.\r\n        for (i = 0, n = items.length; i < n; i++) {\r\n            items[i].appendTo(templateEl.find('.' + createItemClassName(i)));\r\n        }\r\n    }\r\n\r\n    angular.module('sky.templating', [])\r\n        .directive('bbTemplate', ['bbFormat', function (bbFormat) {\r\n            function createTemplateHtml(template) {\r\n                // The template string itself should not contain HTML, so be sure to escape it to avoid HTML injection.\r\n                template = bbFormat.escape(template);\r\n\r\n                // Replace {0}, {1}, etc. with span elements that will serve as placeholders for the item elements.\r\n                return template.replace(/\\{(\\d+)\\}/g, function (match, number) {\r\n                    /*jslint unparam: true */\r\n                    return '<span class=\"' + createItemClassName(number) + '\"></span>';\r\n                });\r\n            }\r\n\r\n            return {\r\n                controller: ['$scope', function ($scope) {\r\n                    $scope.items = [];\r\n\r\n                    this.addItem = function (item) {\r\n                        $scope.items.push(item);\r\n                    };\r\n                }],\r\n                link: function (scope, el) {\r\n\r\n                    scope.$watch('template', function (newValue) {\r\n                        var newEl,\r\n                            oldEl = el.find('.' + BB_TEMPLATE_RESULT),\r\n                            templateHtml;\r\n\r\n                        if (angular.isDefined(newValue)) {\r\n                            templateHtml = createTemplateHtml(newValue);\r\n\r\n                            // Create and append a new template item, move the existing items to it, then\r\n                            // destroy the old items.  Doing it in this order should ensure any elements\r\n                            // with bindings remain bound after being moved.\r\n                            newEl = angular.element('<span class=\"' + BB_TEMPLATE_RESULT + '\">' + templateHtml + '</span>')\r\n                                .appendTo(el);\r\n\r\n                            insertTemplateItems(newEl, scope.items);\r\n\r\n                            // Remove old elements if they exist.\r\n                            oldEl.remove();\r\n                        }\r\n                    });\r\n                },\r\n                scope: {\r\n                    template: '=bbTemplate'\r\n                },\r\n                restrict: 'A'\r\n            };\r\n        }])\r\n        .directive('bbTemplateItem', function () {\r\n            return {\r\n                link: function (scope, el, attr, bbFormatCtrl) {\r\n                    /*jslint unparam: true */\r\n                    bbFormatCtrl.addItem(el);\r\n                },\r\n                require: '^bbTemplate',\r\n                restrict: 'AE'\r\n            };\r\n        });\r\n}());",
    "/*jslint plusplus: true */\r\n/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var modules = [\r\n            'sky.resources'\r\n        ];\r\n\r\n    function getNewlineCount(value) {\r\n        var matches = value.match(/\\n/gi);\r\n\r\n        if (matches) {\r\n            return matches.length;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    angular.module('sky.textexpand', modules)\r\n        .directive('bbTextExpand', ['bbResources', 'bbScrollIntoView', function (bbResources, bbScrollIntoView) {\r\n            function link(scope, el, attrs) {\r\n                var isExpanded,\r\n                    maxLength = +attrs.bbTextExpandMaxLength || 200,\r\n                    maxExpandedLength = +attrs.bbTextExpandMaxExpandedLength || 6500,\r\n                    maxNewlines = 1,\r\n                    maxExpandedNewlines = 50;\r\n\r\n                function getTruncatedText(value, length, newlines) {\r\n                    var i;\r\n\r\n                    if (newlines && getNewlineCount(value) >= newlines) {\r\n                        value = value.replace(/\\s+/gi, ' ');\r\n                    }\r\n\r\n                    for (i = length - 1; i > length - 10; i--) {\r\n                        if (/\\s/.test(value.charAt(i))) {\r\n                            length = i;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    return value.substr(0, length);\r\n                }\r\n\r\n                scope.$watch(attrs.bbTextExpand, function (newValue) {\r\n                    var collapsedText,\r\n                        expandedText,\r\n                        containerEl,\r\n                        currentHeight,\r\n                        ellipsisEl,\r\n                        expandEl,\r\n                        newHeight,\r\n                        textEl;\r\n\r\n                    function animateText(previousText, newText, newExpandText, showEllipsis) {\r\n                        // Measure the current height so we can animate from it.\r\n                        currentHeight = containerEl.height();\r\n\r\n                        expandEl.text(newExpandText);\r\n                        textEl.text(newText);\r\n\r\n                        newHeight = containerEl.height();\r\n\r\n                        if (newHeight < currentHeight) {\r\n                            // The new text is smaller than the old text, so put the old text back before doing\r\n                            // the collapse animation to avoid showing a big chunk of whitespace.\r\n                            textEl.text(previousText);\r\n                        }\r\n\r\n                        ellipsisEl.text(showEllipsis ? '...' : '');\r\n\r\n                        containerEl\r\n                            .height(currentHeight)\r\n                            .animate(\r\n                                {\r\n                                    height: newHeight\r\n                                },\r\n                                250,\r\n                                function () {\r\n                                    if (newHeight < currentHeight) {\r\n                                        textEl.text(newText);\r\n                                    }\r\n                                    containerEl.css('height', 'auto');\r\n                                }\r\n                            );\r\n                    }\r\n\r\n                    containerEl = angular.element('<div></div>');\r\n\r\n                    if (newValue) {\r\n                        collapsedText = getTruncatedText(newValue, maxLength, maxNewlines);\r\n                        expandedText = getTruncatedText(newValue, maxExpandedLength, maxExpandedNewlines); // Get text based on max expanded length\r\n\r\n                        if (collapsedText !== newValue) {\r\n                            isExpanded = true;\r\n\r\n                            textEl = angular.element('<span></span>');\r\n                            textEl.text(collapsedText);\r\n\r\n                            ellipsisEl = angular.element('<span class=\"bb-text-expand-ellipsis\">...</span>');\r\n\r\n                            expandEl = angular.element('<a href=\"#\"></a>');\r\n                            expandEl.text(bbResources.text_expand_see_more);\r\n\r\n                            containerEl\r\n                                .empty()\r\n                                .append(textEl)\r\n                                .append(ellipsisEl)\r\n                                .append(expandEl);\r\n\r\n                            expandEl.on('click', function () {\r\n                                if (isExpanded) {\r\n                                    animateText(collapsedText, expandedText, bbResources.text_expand_see_less, (expandedText !== newValue));\r\n                                } else {\r\n                                    animateText(expandedText, collapsedText, bbResources.text_expand_see_more, true);\r\n                                }\r\n\r\n                                bbScrollIntoView(expandEl);\r\n                                isExpanded = !isExpanded;\r\n\r\n                                return false;\r\n                            });\r\n                        } else {\r\n                            containerEl.text(newValue);\r\n                        }\r\n                    }\r\n\r\n                    el.empty().append(containerEl);\r\n\r\n                    el.on('$destroy', function () {\r\n                        containerEl = null;\r\n                        expandEl = null;\r\n                        textEl = null;\r\n                    });\r\n                });\r\n            }\r\n\r\n            return {\r\n                link: link\r\n            };\r\n        }]);\r\n}());",
    "/*jslint browser: true, plusplus: true */\r\n/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    //Removes the specified tiles from the source container and appends them\r\n    //in the specified order to the target container.\r\n    function moveTilesToContainer(sourceContainer, targetContainer, tiles) {\r\n        angular.forEach(tiles, function (tileId) {\r\n            var tile = sourceContainer.find('[data-tile-id=\"' + tileId + '\"]');\r\n            targetContainer.append(tile);\r\n        });\r\n    }\r\n\r\n    //Returns an array of tile names in the order they appear in the specified container.\r\n    function parseTileOrder(container) {\r\n        var tiles = [];\r\n        container.find('[data-tile-id]').each(function () {\r\n            tiles.push(angular.element(this).data('tile-id'));\r\n        });\r\n        return tiles;\r\n    }\r\n\r\n    angular.module('sky.tiles', ['sky.templates'])\r\n        .directive('bbTile', ['$timeout', function ($timeout) {\r\n            return {\r\n                link: function (scope, el) {\r\n                    var displayModeChanging = false,\r\n                        tileInitialized = false;\r\n\r\n                    //determines whether or not a tile is collapsed\r\n                    function tileIsCollapsed(tileId, tiles) {\r\n                        var i,\r\n                            len = tiles.length,\r\n                            tile;\r\n\r\n                        for (i = 0; i < len; i++) {\r\n                            tile = tiles[i];\r\n\r\n                            if (tile.id === tileId) {\r\n                                return scope.smallTileDisplayMode ? tile.collapsed_small : tile.collapsed;\r\n                            }\r\n                        }\r\n\r\n                        return !!scope.smallTileDisplayMode;\r\n                    }\r\n\r\n                    //sets the collapsed state of the tile based on the tile settings and the display mode\r\n                    function updateTileState(tiles) {\r\n                        var collapsed;\r\n\r\n                        tiles = tiles || [];\r\n\r\n                        collapsed = tileIsCollapsed(scope.tileId, tiles);\r\n                        scope.isCollapsed = collapsed;\r\n\r\n                        if (collapsed && !tileInitialized) {\r\n                            //in some cases the tile-content div is left in a partially collapsed state. \r\n                            //   this will ensure that the tile is styled corretly and the tile is completely collapsed\r\n                            $timeout(function () {\r\n                                var contentEl;\r\n                                contentEl = el.find('.tile-content');\r\n                                contentEl.removeClass('collapsing').addClass('collapse');\r\n                            }, 1);\r\n                        }\r\n                    }\r\n\r\n                    scope.isCollapsed = false;\r\n                    scope.smallTileDisplayMode = false;\r\n                    scope.tileId = '';\r\n\r\n                    scope.titleClick = function () {\r\n                        scope.isCollapsed = !scope.isCollapsed;\r\n                        scope.scrollIntoView = !scope.isCollapsed;\r\n                    };\r\n\r\n                    //listens for the tileModeChanged event from the tileDashboard and updates the collapsed state of the tiles based on whether or not the tiles are in small display mode\r\n                    scope.$on('tileDisplayModeChanged', function (event, data) {\r\n                        /*jslint unparam: true */\r\n                        scope.smallTileDisplayMode = data.smallTileDisplayMode || false;\r\n\r\n                        if (tileInitialized) {\r\n                            displayModeChanging = true;\r\n                            updateTileState(data.tiles);\r\n                        }\r\n                    });\r\n\r\n\r\n                    //listens for the tilesInitialized event from the tileDashboard and updates the initial collapsed state of the tiles\r\n                    scope.$on('tilesInitialized', function (event, data) {\r\n                        /*jslint unparam: true */\r\n                        var tiles = data.tiles || [];\r\n\r\n                        if (!tileInitialized) {\r\n                            //retrieve the tile id from the parent container\r\n                            scope.tileId = el.parent().attr('data-tile-id') || '';\r\n                            scope.smallTileDisplayMode = data.smallTileDisplayMode || false;\r\n                        }\r\n\r\n                        updateTileState(tiles);\r\n\r\n                        tileInitialized = true;\r\n                    });\r\n\r\n                    //if the collapsed state changes, notify the tileDashboard\r\n                    scope.$watch('isCollapsed', function () {\r\n                        if (tileInitialized && !displayModeChanging) {\r\n                            $timeout(function () {\r\n                                scope.$emit('tileStateChanged', {\r\n                                    tileId: scope.tileId,\r\n                                    collapsed: scope.isCollapsed\r\n                                });\r\n                            });\r\n                        }\r\n                        displayModeChanging = false;\r\n\r\n                        if (!scope.isCollapsed) {\r\n                            $timeout(function () {\r\n                                scope.$broadcast('tileRepaint');\r\n                            });\r\n                        }\r\n                    });\r\n\r\n                },\r\n                replace: true,\r\n                restrict: 'E',\r\n                scope: {\r\n                    tileHeader: '=bbTileHeader'\r\n                },\r\n                controller: angular.noop,\r\n                templateUrl: 'sky/templates/tiles/tile.html',\r\n                transclude: true\r\n            };\r\n        }])\r\n        .directive('bbTileSection', function () {\r\n            return {\r\n                restrict: 'A',\r\n                template: function (el) {\r\n                    el.addClass('tile-content-section');\r\n                }\r\n            };\r\n        })\r\n        .directive('bbTileDashboard', ['$timeout', 'bbMediaBreakpoints', function ($timeout, bbMediaBreakpoints) {\r\n            return {\r\n                replace: true,\r\n                restrict: 'E',\r\n                scope: {\r\n                    tiles: '=bbTiles',\r\n                    layout: '=bbLayout'\r\n                },\r\n                link: function (scope, element) {\r\n                    var column1 = element.find('[data-dashboard-column=\"1\"]'),\r\n                        column2 = element.find('[data-dashboard-column=\"2\"]'),\r\n                        singleColumnMode = false,\r\n                        smallTileDisplayMode = false,\r\n                        sortableOptions;\r\n\r\n                    //Inspects the tiles in each column and updates model accordingly.\r\n                    function parseColumnTiles() {\r\n                        scope.$apply(function () {\r\n                            var layout = scope.layout;\r\n\r\n                            if (singleColumnMode) {\r\n                                layout.one_column_layout = parseTileOrder(column1);\r\n                            } else {\r\n                                layout.two_column_layout[0] = parseTileOrder(column1);\r\n                                layout.two_column_layout[1] = parseTileOrder(column2);\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    //Layouts out the tiles based on the current one column or two column configuration\r\n                    function layoutTiles() {\r\n                        var layout = scope.layout;\r\n\r\n                        if (layout) {\r\n                            if (singleColumnMode) {\r\n                                moveTilesToContainer(element, column1, layout.one_column_layout);\r\n                            } else {\r\n                                moveTilesToContainer(element, column1, layout.two_column_layout[0]);\r\n                                moveTilesToContainer(element, column2, layout.two_column_layout[1]);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    function mediabreakpointChangeHandler(breakPoints) {\r\n                        singleColumnMode = (breakPoints.xs || breakPoints.sm);\r\n                        layoutTiles();\r\n\r\n                        if (singleColumnMode) {\r\n                            element.removeClass('page-content-multicolumn');\r\n                            column2.hide();\r\n                        } else {\r\n                            element.addClass('page-content-multicolumn');\r\n                            column2.show();\r\n                        }\r\n\r\n                        smallTileDisplayMode = breakPoints.xs;\r\n\r\n                        scope.$broadcast('tileDisplayModeChanged', {\r\n                            smallTileDisplayMode: smallTileDisplayMode,\r\n                            tiles: scope.tiles\r\n                        });\r\n                    }\r\n\r\n\r\n\r\n                    //Setup jQuery sortable (drag and drop) options for the dashboard columns\r\n                    sortableOptions = {\r\n                        connectWith: '[data-dashboard-column]',\r\n                        update: parseColumnTiles,\r\n                        opacity: 0.8,\r\n                        handle: '.tile-grab-handle',\r\n                        placeholder: 'placeholder ibox',\r\n                        forcePlaceholderSize: true,\r\n                        revert: 250\r\n                    };\r\n\r\n                    //Setup jQuery sortable drag/drop for the columns\r\n                    column1.sortable(sortableOptions);\r\n                    column2.sortable(sortableOptions);\r\n\r\n                    bbMediaBreakpoints.register(mediabreakpointChangeHandler);\r\n\r\n                    element.on('$destroy', function () {\r\n                        bbMediaBreakpoints.unregister(mediabreakpointChangeHandler);\r\n                    });\r\n\r\n                    scope.$watch('tiles', function () {\r\n                        $timeout(function () {\r\n                            layoutTiles();\r\n                            scope.$broadcast('tilesInitialized', {\r\n                                smallTileDisplayMode: smallTileDisplayMode,\r\n                                tiles: scope.tiles\r\n                            });\r\n                        });\r\n                    });\r\n\r\n                    scope.$on('tileStateChanged', function (event, data) {\r\n                        /*jslint unparam: true */\r\n                        scope.$apply(function () {\r\n                            var i,\r\n                                len = scope.tiles.length,\r\n                                tileId = data.tileId || '',\r\n                                tiles = scope.tiles;\r\n\r\n                            for (i = 0; i < len; i++) {\r\n                                if (tiles[i].id === tileId) {\r\n                                    if (smallTileDisplayMode) {\r\n                                        tiles[i].collapsed_small = data.collapsed || false;\r\n                                    } else {\r\n                                        tiles[i].collapsed = data.collapsed || false;\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                    });\r\n                },\r\n                controller: angular.noop,\r\n                templateUrl: 'sky/templates/tiles/tiledashboard.html'\r\n            };\r\n        }]);\r\n}());",
    "/*jslint browser: true, plusplus: true */\r\n/*global angular, jQuery */\r\n\r\n(function ($) {\r\n    'use strict';\r\n\r\n    function nextId() {\r\n        nextId.index = nextId.index || 0;\r\n        nextId.index++;\r\n        return 'bbtoast-' + nextId.index;\r\n    }\r\n\r\n    function validateOptions(opts) {\r\n        if (opts.message && opts.templateUrl) {\r\n            throw 'You must not provide both a message and a templateUrl.';\r\n        } else if (!opts.message && !opts.templateUrl) {\r\n            throw 'You must provide either a message or a templateUrl.';\r\n        }\r\n    }\r\n\r\n    angular.module('sky.toast', ['toastr'])\r\n    .config(['toastrConfig', function (toastrConfig) {\r\n        angular.extend(toastrConfig, {\r\n            closeButton: true,\r\n            newestOnTop: true,\r\n            positionClass: 'toast-bottom-right',\r\n            tapToDismiss: false,\r\n            timeOut: 6000\r\n        });\r\n    }])\r\n    .factory('bbToast', ['toastr', '$templateCache', '$compile', '$controller', '$rootScope', '$q', '$injector', function (toastr, $templateCache, $compile, $controller, $rootScope, $q, $injector) {\r\n        //Based on $modal approach to resolves\r\n        function getResolvePromises(resolves) {\r\n            var promisesArr = [];\n            angular.forEach(resolves, function (value) {\r\n                if (angular.isFunction(value) || angular.isArray(value)) {\r\n                    promisesArr.push($q.when($injector.invoke(value)));\r\n                }\r\n            });\n            return promisesArr;\r\n        }\r\n\r\n        function open(message, config) {\r\n            config = config || {};\r\n            config.iconClass = 'bb-toast';\r\n            return toastr.info(message, '', config);\r\n        }\r\n\r\n        function openMessage(opts) {\r\n            return open(opts.message);\r\n        }\r\n\r\n        function openWithTemplate(opts) {\r\n            var controller = opts.controller,\r\n                controllerLocals,\r\n                elId,\r\n                resolveIter = 0,\r\n                resolvesPromise,\r\n                templateHtml,\r\n                toast,\r\n                toastScope;\r\n\r\n            function insertTemplateInToast() {\r\n                var templateEl = toast.el.find('#' + elId);\r\n\r\n                templateEl.html(templateHtml);\r\n\r\n                if (controller) {\r\n                    $controller(controller, controllerLocals);\r\n                    $compile(templateEl)(controllerLocals.$scope);\r\n                }\r\n            }\r\n\r\n            opts.resolve = opts.resolve || {};\r\n\r\n            resolvesPromise = $q.all(getResolvePromises(opts.resolve));\r\n\r\n            resolvesPromise.then(function (resolvedVars) {\r\n                if (controller) {\r\n                    controllerLocals = {};\r\n                    controllerLocals.$scope = $rootScope.$new();;\r\n                    angular.forEach(opts.resolve, function (value, key) {\r\n                        controllerLocals[key] = resolvedVars[resolveIter++];\r\n                    });\r\n                }\r\n\r\n                templateHtml = $templateCache.get(opts.templateUrl);\r\n\r\n                elId = nextId();\r\n\r\n                toast = open(\"<div id='\" + elId + \"'></div>\", { allowHtml: true });\r\n\r\n                toastScope = toast.scope;\r\n\r\n                //We need to hook in after the toast element has been created and the temporary message\r\n                //defined above exists, but before the toast is visually displayed.  The toastr code adds\r\n                //an init function to the scope when the toast directive is being linked.  An EvalAsync\r\n                //after this occurs will allow us to hook in at the correct moment.\r\n                toastScope.$watch('init', function (newValue, oldValue) {\r\n                    toastScope.$evalAsync(function (scope) {\r\n                        insertTemplateInToast();\r\n                    });\r\n                });\r\n            });\r\n        }\r\n\r\n        return {\r\n            open: function (opts) {\r\n                opts = opts || {};\r\n                validateOptions(opts);\r\n\r\n                if (opts.templateUrl) {\r\n                    openWithTemplate(opts);\r\n                } else {\r\n                    openMessage(opts);\r\n                }\r\n            }\r\n        };\r\n    }])\r\n}(jQuery));",
    "/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    function bbTooltip($compile, $timeout, bbData) {\r\n        // Based on Adomas.NET's answer to this StackOverflow question:\r\n        // http://stackoverflow.com/questions/19029676/angular-ui-tooltip-with-html\r\n        // This allows us to use an HTML template with Angular binding instead of building\r\n        // HTML in the controller which leaves open the potential for HTML injection.\r\n        return {\r\n            restrict: 'A',\r\n            scope: true,\r\n            compile: function (tElem) {\r\n                //Add bootstrap directive\r\n                if (!tElem.attr('tooltip-html-unsafe')) {\r\n                    tElem.attr('tooltip-html-unsafe', '{{tooltip}}');\r\n                }\r\n\r\n                return function (scope, el, attrs) {\r\n                    function loadTemplate() {\r\n                        bbData.load({\r\n                            text: attrs.bbTooltip\r\n                        }).then(function (result) {\r\n                            var container = angular.element('<div></div>'),\r\n                                tplContent = result.text;\r\n\r\n                            container.html($compile(tplContent.trim())(scope));\r\n\r\n                            $timeout(function () {\r\n                                scope.tooltip = container.html();\r\n                            });\r\n                        });\r\n                    }\r\n\r\n                    //remove our direcive to avoid infinite loop\r\n                    el.removeAttr('bb-tooltip');\r\n\r\n                    //compile element to attach tooltip binding\r\n                    $compile(el)(scope);\r\n\r\n                    if (angular.isDefined(attrs.tooltipUpdater)) {\r\n                        scope.$watch(attrs.tooltipUpdater, function () {\r\n                            loadTemplate();\r\n                        });\r\n                    } else {\r\n                        loadTemplate();\r\n                    }\r\n                };\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    bbTooltip.$inject = ['$compile', '$timeout', 'bbData'];\r\n\r\n    angular.module('sky.tooltip', ['sky.data'])\r\n        .directive('bbTooltip', bbTooltip);\r\n\r\n}());",
    "/*jslint browser: true */\r\n/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('sky.uiselecthelper', [])\r\n        .factory('bbUISelectHelper', ['$parse', function ($parse) {\r\n            var SelectHelper = function () { };\r\n\r\n            SelectHelper.prototype.RemoteRefresh = function (searchFunction, searchCriteria, scope, propertyName, control) {\r\n                if ((searchCriteria || '') === '') {\r\n                    control.items = [];\r\n                } else {\r\n                    searchFunction(searchCriteria).then(function (result) {\r\n                        var results = result.data.results,\r\n                            propertyAssignment = $parse(propertyName),\r\n                            filteredResults;\r\n\r\n                        //ui-select control doesn't filter out already selected items when updating the available dropdown items via its refresh method.\r\n                        filteredResults = results.filter(function (result) {\r\n                            return control.selected.map(function (existing) { return existing.id; }).indexOf(result.id) < 0;\r\n                        });\r\n\r\n                        propertyAssignment.assign(scope, filteredResults);\r\n                    });\r\n                }\r\n            };\r\n\r\n            return {\r\n                SelectHelper: function () {\r\n                    return new SelectHelper();\r\n                }\r\n            };\r\n        }]);\r\n}());",
    "/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n    angular.module('sky.validation', [])\r\n        .directive('bbEmailValidation', [function () {\r\n            var EMAIL_REGEXP = /[\\w\\-]+@([\\w\\-]+\\.)+[\\w\\-]+/;\r\n            return {\r\n                require: 'ngModel',\r\n                restrict: '',\r\n                link: function (scope, elm, attrs, ctrl) {\r\n                    /*jslint unparam: true */\r\n                    if (ctrl && ctrl.$validators.email) {\r\n                        ctrl.$validators.email = function (modelValue) {\r\n                            return ctrl.$isEmpty(modelValue) || EMAIL_REGEXP.test(modelValue);\r\n                        };\r\n                    }\r\n                }\r\n            };\r\n        }]);\r\n}());",
    "/*jslint browser: true, plusplus: true */\r\n/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var CLS_VIEWKEEPER = \"viewkeeper\",\r\n        CLS_VIEWKEEPER_FIXED = CLS_VIEWKEEPER + \"-fixed\",\r\n        config = {\r\n            viewportMarginTop: 0\r\n        },\r\n        ViewKeeper;\r\n\r\n    function nextId() {\r\n        nextId.index = nextId.index || 0;\r\n        nextId.index++;\r\n        return 'viewkeeper-' + nextId.index;\r\n    }\r\n\r\n    function getSpacerId(vk) {\r\n        return vk.id + \"-spacer\";\r\n    }\r\n\r\n    function setElPosition(elQ, left, top, bottom, width) {\r\n        elQ.css({\r\n            \"top\": top,\r\n            \"bottom\": bottom,\r\n            \"left\": left\r\n        });\r\n\r\n        if (width !== null) {\r\n            elQ.css({ \"width\": width });\r\n        }\r\n    }\r\n\r\n    function unfixEl(vk) {\r\n        var elQ = angular.element(vk.el),\r\n            width;\r\n\r\n        angular.element(\"#\" + getSpacerId(vk)).remove();\r\n\r\n        elQ.removeClass(CLS_VIEWKEEPER_FIXED);\r\n\r\n        vk.currentElFixedLeft = null;\r\n        vk.currentElFixedTop = null;\r\n        vk.currentElFixedBottom = null;\r\n        vk.currentElFixedWidth = null;\r\n\r\n        if (vk.setWidth) {\r\n            width = \"auto\";\r\n        }\r\n        setElPosition(elQ, \"\", \"\", \"\", width);\r\n    }\r\n\r\n    function calculateVerticalOffset(vk) {\r\n        var offset,\r\n            verticalOffSetElTop;\r\n\r\n        offset = vk.verticalOffSet;\r\n\r\n        if (vk.verticalOffSetEl) {\r\n            verticalOffSetElTop = vk.verticalOffSetEl.css('top');\r\n\r\n            if (verticalOffSetElTop) {\r\n                verticalOffSetElTop = parseInt(verticalOffSetElTop, 10);\r\n                if (isNaN(verticalOffSetElTop)) {\r\n                    verticalOffSetElTop = 0;\r\n                }\r\n            }\r\n\r\n            offset += (vk.verticalOffSetEl.outerHeight() + verticalOffSetElTop);\r\n        }\r\n\r\n        return offset;\r\n    }\r\n\r\n    ViewKeeper = function (options) {\r\n        var id,\r\n            vk = this;\r\n\r\n        options = options || {};\r\n\r\n        vk.fixToBottom = options.fixToBottom;\r\n        vk.setWidth = options.setWidth;\r\n        vk.id = id = nextId();\r\n        vk.el = options.el;\r\n        vk.boundaryEl = options.boundaryEl;\r\n        vk.verticalOffSet = options.verticalOffSet || 0;\r\n        vk.setPlaceholderHeight = (options.setPlaceholderHeight !== false);\r\n        vk.onStateChanged = options.onStateChanged;\r\n        vk.isFixed = false;\r\n\r\n        if (options.verticalOffSetElId) {\r\n            vk.verticalOffSetEl = angular.element('#' + options.verticalOffSetElId);\r\n\r\n            vk.verticalOffSetEl.on('afterViewKeeperSync.' + id, function () {\r\n                vk.syncElPosition();\r\n            });\r\n        }\r\n\r\n        angular.element(window).on(\"scroll.\" + id + \", resize.\" + id + \", orientationchange.\" + id, function () {\r\n            vk.syncElPosition();\r\n        });\r\n    };\r\n\r\n    ViewKeeper.prototype = {\r\n\r\n        syncElPosition: function () {\r\n            var anchorTop,\r\n                anchorHeight,\r\n                isCurrentlyFixed,\r\n                currentElFixedLeft,\r\n                currentElFixedTop,\r\n                currentElFixedBottom,\r\n                currentElFixedWidth,\r\n                documentQ,\r\n                fixEl,\r\n                boundaryBottom,\r\n                boundaryOffset,\r\n                boundaryQ,\r\n                boundaryTop,\r\n                elFixedLeft,\r\n                elFixedTop,\r\n                elFixedBottom,\r\n                elFixedWidth,\r\n                elHeight,\r\n                elQ,\r\n                needsUpdating,\r\n                scrollLeft,\r\n                scrollTop,\r\n                spacerHeight,\r\n                spacerId,\r\n                spacerQ,\r\n                verticalOffSet,\r\n                vk = this,\r\n                width;\r\n\r\n            isCurrentlyFixed = vk.isFixed;\r\n\r\n            verticalOffSet = calculateVerticalOffset(vk);\r\n\r\n            elQ = angular.element(vk.el);\r\n\r\n            // When the element isn't visible, its size can't be calculated, so don't attempt syncing position in this case.\r\n            if (!elQ.is(':visible')) {\r\n                return;\r\n            }\r\n\r\n            boundaryQ = angular.element(vk.boundaryEl);\r\n            spacerId = getSpacerId(vk);\r\n\r\n            spacerQ = angular.element(\"#\" + spacerId);\r\n            documentQ = angular.element(window.document);\r\n\r\n            boundaryOffset = boundaryQ.offset();\r\n            boundaryTop = boundaryOffset.top;\r\n            boundaryBottom = boundaryTop + boundaryQ.height();\r\n\r\n            scrollLeft = documentQ.scrollLeft();\r\n            scrollTop = documentQ.scrollTop();\r\n\r\n            elHeight = elQ.outerHeight(true);\r\n\r\n            if (vk.fixToBottom) {\r\n                elFixedBottom = 0;\r\n            } else {\r\n                // If the element needs to be fixed, this will calculate its position.  The position will be 0 (fully visible) unless\r\n                // the user is scrolling the boundary out of view.  In that case, the element should begin to scroll out of view with the\r\n                // rest of the boundary by setting its top position to a negative value.\r\n                elFixedTop = Math.min((boundaryBottom - elHeight) - scrollTop, verticalOffSet);\r\n            }\r\n\r\n            elFixedWidth = boundaryQ.width();\r\n            elFixedLeft = boundaryOffset.left - scrollLeft;\r\n\r\n            currentElFixedLeft = vk.currentElFixedLeft;\r\n            currentElFixedTop = vk.currentElFixedTop;\r\n            currentElFixedBottom = vk.currentElFixedBottom;\r\n            currentElFixedWidth = vk.currentElFixedWidth;\r\n\r\n            if (spacerQ.length > 0) {\r\n                anchorTop = spacerQ.offset().top;\r\n                anchorHeight = spacerQ.outerHeight(true);\r\n            } else {\r\n                anchorTop = elQ.offset().top;\r\n                anchorHeight = elHeight;\r\n            }\r\n\r\n            if (vk.fixToBottom) {\r\n                //Fix el if the natural bottom of the element would not be on the screen\r\n                fixEl = (anchorTop + anchorHeight > scrollTop + window.innerHeight);\r\n            } else {\r\n                fixEl = scrollTop + verticalOffSet + config.viewportMarginTop > anchorTop;\r\n            }\r\n\r\n            if ((fixEl && currentElFixedLeft === elFixedLeft && currentElFixedTop === elFixedTop && currentElFixedBottom === elFixedBottom && currentElFixedWidth === elFixedWidth) || (!fixEl && !(currentElFixedLeft !== undefined && currentElFixedLeft !== null))) {\r\n                // The element is either currently fixed and its position and width do not need to change, or the element is not\r\n                // currently fixed and does not need to be fixed.  No changes are needed.\r\n                needsUpdating = false;\r\n            } else {\r\n                needsUpdating = true;\r\n            }\r\n\r\n            if (needsUpdating) {\r\n                if (fixEl) {\r\n                    vk.isFixed = true;\r\n                    if (spacerQ.length === 0) {\r\n                        if (vk.setPlaceholderHeight) {\r\n                            spacerHeight = elHeight;\r\n                        } else {\r\n                            spacerHeight = 0;\r\n                        }\r\n                        elQ.after('<div id=\"' + spacerId + '\" style=\"height: ' + spacerHeight + 'px;\"></div>');\r\n                    }\r\n\r\n                    elQ.addClass(CLS_VIEWKEEPER_FIXED);\r\n\r\n                    vk.currentElFixedTop = elFixedTop;\r\n                    vk.currentElFixedBottom = elFixedBottom;\r\n                    vk.currentElFixedLeft = elFixedLeft;\r\n                    vk.currentElFixedWidth = elFixedWidth;\r\n\r\n                    if (vk.setWidth) {\r\n                        width = elFixedWidth;\r\n                    }\r\n\r\n                    setElPosition(elQ, elFixedLeft, elFixedTop, elFixedBottom, width);\r\n                } else {\r\n                    vk.isFixed = false;\r\n                    unfixEl(vk);\r\n                }\r\n\r\n                //If we changed if the item is fixed, fire the callback\r\n                if (vk.onStateChanged && isCurrentlyFixed !== vk.isFixed) {\r\n                    vk.onStateChanged();\r\n                }\r\n            }\r\n            elQ.trigger('afterViewKeeperSync');\r\n        },\r\n\r\n        scrollToTop: function () {\r\n            var anchorTop,\r\n                elQ,\r\n                documentQ,\r\n                spacerId,\r\n                spacerQ,\r\n                verticalOffset,\r\n                vk = this;\r\n\r\n            verticalOffset = calculateVerticalOffset(vk);\r\n\r\n            documentQ = angular.element(window.document);\r\n            spacerId = getSpacerId(vk);\r\n            spacerQ = angular.element(\"#\" + spacerId);\r\n            elQ = angular.element(vk.el);\r\n\r\n            if (spacerQ.length > 0) {\r\n                anchorTop = spacerQ.offset().top;\r\n            } else {\r\n                anchorTop = elQ.offset().top;\r\n            }\r\n\r\n            documentQ.scrollTop(anchorTop - verticalOffset - config.viewportMarginTop);\r\n        },\r\n\r\n        destroy: function () {\r\n            var id,\r\n                vk = this;\r\n\r\n            if (!vk.isDestroyed) {\r\n                id = vk.id;\r\n\r\n                angular.element(window).off(\"scroll.\" + id + \", resize.\" + id + \", orientationchange.\" + id);\r\n                unfixEl(vk);\r\n\r\n                if (vk.verticalOffSetEl) {\r\n                    vk.verticalOffSetEl.off(\"afterViewKeeperSync.\" + vk.id);\r\n                    vk.verticalOffSetEl = null;\r\n                }\r\n\r\n                vk.isDestroyed = true;\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    angular.module('sky.viewkeeper', ['sky.mediabreakpoints'])\r\n        .constant('bbViewKeeperConfig', config)\r\n        .factory('bbViewKeeperBuilder', function () {\r\n            return {\r\n                create: function (options) {\r\n                    return new ViewKeeper(options);\r\n                }\r\n            };\r\n        })\r\n        .run(['bbMediaBreakpoints', 'bbViewKeeperConfig', function (bbMediaBreakpoints, bbViewKeeperConfig) {\r\n            function mediaBreakpointHandler(breakpoints) {\r\n                //For user agents in which the omnibar follows you down the page, the ViewKeeper needs\r\n                //to adjust for the height of the omnibar.\r\n\r\n                //Ideally these values should be driven from a more appropriate source (omnibar js?)\r\n                bbViewKeeperConfig.viewportMarginTop = breakpoints.xs ? 50 : 30;\r\n            }\r\n\r\n            if (/iPad|iPod|iPhone/i.test(window.navigator.userAgent)) {\r\n                //On iOS the omnibar doesn't scroll with you.  Need to account for this on the styling.\r\n                angular.element('body').addClass('omnibar-not-fixed');\r\n\r\n                //On iOS we need to have special handling when entering textboxes to correct an issue with fixed\r\n                //elements used by view keeper when the keyboard flys out.\r\n                angular.element(window.document).on('focus', 'input', function () {\r\n                    angular.element('body').addClass('viewkeeper-ignore-fixed');\r\n                }).on('blur', 'input', function () {\r\n                    angular.element('body').removeClass('viewkeeper-ignore-fixed');\r\n                });\r\n            } else {\r\n                bbMediaBreakpoints.register(mediaBreakpointHandler);\r\n            }\r\n        }])\r\n        .directive('bbViewKeeper', ['bbViewKeeperBuilder', function (bbViewKeeperBuilder) {\r\n            function link(scope, el) {\r\n                var vk;\r\n\r\n                function destroyVk() {\r\n                    if (vk) {\r\n                        vk.destroy();\r\n                        vk = null;\r\n                    }\r\n                }\r\n\r\n                el.on('$destroy', function () {\r\n                    destroyVk();\r\n                });\r\n\r\n                scope.$watch('bbBoundaryElId', function () {\r\n                    var boundaryEl,\r\n                        bbBoundaryElId = scope.bbBoundaryElId;\r\n\r\n                    if (bbBoundaryElId) {\r\n                        boundaryEl = angular.element('#' + bbBoundaryElId);\r\n\r\n                        if (boundaryEl.length === 1) {\r\n                            destroyVk();\r\n\r\n                            vk = bbViewKeeperBuilder.create({\r\n                                el: el[0],\r\n                                boundaryEl: boundaryEl[0],\r\n                                setWidth: true\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            return {\r\n                link: link,\r\n                restrict: 'A',\r\n                scope: {\r\n                    bbBoundaryElId: '='\r\n                }\r\n            };\r\n        }])\r\n        .directive('bbScrollingViewKeeper', ['$window', function ($window) {\r\n            return {\r\n                scope: {\r\n                    bbScrollingViewKeeper: \"=\"\r\n                },\r\n                link: function (scope, element) {\r\n                    var elementStart,\r\n                        scrollPos,\r\n                        prevScroll,\r\n                        scrollingDown = true,\r\n                        tempTop,\r\n                        verticalOffset,\r\n                        id = scope.$id;\r\n\r\n                    function scroll() {\r\n                        if (!element.is(':visible')) {\r\n                            return;\r\n                        }\r\n\r\n                        if (angular.element('.bb-omnibar>.desktop').is(':visible')) {\r\n                            verticalOffset = angular.element('.bb-omnibar>.desktop>.bar').outerHeight();\r\n                        } else {\r\n                            verticalOffset = 0;\r\n                        }\r\n\r\n                        if (scope.bbScrollingViewKeeper && scope.bbScrollingViewKeeper.viewKeeperOffsetElId) {\r\n                            verticalOffset += angular.element('#' + scope.bbScrollingViewKeeper.viewKeeperOffsetElId).outerHeight();\r\n                        }\r\n\r\n                        if (!elementStart) {\r\n                            elementStart = element.offset().top;\r\n                        }\r\n                        scrollPos = $window.scrollY || $window.pageYOffset || $window.document.body.scrollTop || 0;\r\n                        if (prevScroll > scrollPos) {\r\n                            scrollingDown = false;\r\n                        } else {\r\n                            scrollingDown = true;\r\n                        }\r\n                        prevScroll = scrollPos;\r\n\r\n                        if (scrollPos >= elementStart - verticalOffset && element.height() + verticalOffset <= $window.document.body.offsetHeight) {\r\n                            if (element.height() < $window.innerHeight) {\r\n                                tempTop = 0;\r\n\r\n                                element.removeClass(\"grid-filters-fixed-bottom\").addClass(\"grid-filters-fixed-top\");\r\n\r\n                                element.css({\r\n                                    top: verticalOffset + 'px'\r\n                                });\r\n                            } else if (scrollingDown) {\r\n                                if (element.offset().top + element.height() > scrollPos + $window.innerHeight) {\r\n                                    if (!tempTop) {\r\n                                        tempTop = element.offset().top - elementStart;\r\n                                    }\r\n\r\n                                    element.removeClass(\"grid-filters-fixed-top grid-filters-fixed-bottom\");\r\n\r\n                                    element.css({\r\n                                        top: tempTop\r\n                                    });\r\n                                } else {\r\n                                    tempTop = 0;\r\n                                    element.css({\r\n                                        top: ''\r\n                                    });\r\n                                    element.removeClass(\"grid-filters-fixed-top\").addClass(\"grid-filters-fixed-bottom\");\r\n                                }\r\n                            } else {\r\n                                if (element.offset().top < scrollPos + verticalOffset) {\r\n                                    if (!tempTop) {\r\n                                        tempTop = element.offset().top - elementStart;\r\n                                    }\r\n\r\n                                    element.removeClass(\"grid-filters-fixed-top grid-filters-fixed-bottom\");\r\n\r\n                                    element.css({\r\n                                        top: tempTop\r\n                                    });\r\n                                } else {\r\n                                    tempTop = 0;\r\n\r\n                                    element.removeClass(\"grid-filters-fixed-bottom\").addClass(\"grid-filters-fixed-top\");\r\n\r\n                                    element.css({\r\n                                        top: verticalOffset + 'px'\r\n                                    });\r\n                                }\r\n                            }\r\n                        } else {\r\n                            tempTop = 0;\r\n                            element.removeClass(\"grid-filters-fixed-top grid-filters-fixed-bottom\");\r\n                            element.css({\r\n                                top: 0\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    if (!/iPad|iPod|iPhone/i.test($window.navigator.userAgent)) {\r\n                        angular.element($window).on('scroll.' + id + ', orientationchange.' + id, scroll);\r\n\r\n                        element.on('$destroy', function () {\r\n                            angular.element($window).off(\"scroll.\" + id + \", orientationchange.\" + id);\r\n                        });\r\n                    }\r\n                },\r\n                restrict: 'A'\r\n            };\r\n        }]);\r\n}());",
    "/*jslint browser: true */\r\n/*global angular, jQuery */\r\n\r\n(function ($) {\r\n    'use strict';\r\n\r\n    var CLEARWAIT_CLASS = 'bb-wait-clearwait',\r\n        clearBlockOptions,\r\n        fullPageClearBlockOptions,\r\n        fullPageVisibleBlockOptions,\r\n        fullPageZIndex = 20000,\r\n        visibleBlockOptions;\r\n\r\n    visibleBlockOptions = {\r\n        message: '<div class=\"bb-wait-wrap\"><div class=\"bb-wait-spinner\"></div></div>'\r\n    };\r\n\r\n    clearBlockOptions = {\r\n        message: \"\",\r\n        fadeOut: 0,\r\n        fadeIn: 0,\r\n        overlayCSS: {\r\n            opacity: 0\r\n        }\r\n    };\r\n\r\n    fullPageClearBlockOptions = angular.copy(clearBlockOptions);\r\n    fullPageClearBlockOptions.overlayCSS[\"z-index\"] = fullPageZIndex;\r\n\r\n    fullPageVisibleBlockOptions = angular.copy(visibleBlockOptions);\r\n    fullPageVisibleBlockOptions.overlayCSS = { \"z-index\": fullPageZIndex };\r\n    fullPageVisibleBlockOptions.css = { \"z-index\": fullPageZIndex + 1 };\r\n\r\n    function isBlockUISupported() {\r\n        return ($ && $.blockUI);\r\n    }\r\n\r\n    function isFullPage(el) {\r\n        // Returns whether the element specified should be causing a\r\n        // full page wait rather than just on the element itself.\r\n        return $(el)[0] === document.body;\r\n    }\r\n\r\n    function blockEl(el, $timeout) {\r\n        var $el = $(el);\r\n\r\n        if (!isBlockUISupported()) {\r\n            return;\r\n        }\r\n\r\n        $el.addClass(CLEARWAIT_CLASS);\r\n\r\n        if (isFullPage(el)) {\r\n            $.blockUI(angular.extend(clearBlockOptions, fullPageClearBlockOptions));\r\n        } else {\r\n            $el.block(clearBlockOptions);\r\n        }\r\n\r\n        $timeout(function () {\r\n            // If the element doesn't have the clearwait class, then the wait has already been\r\n            // removed and we don't need to elevate to a visisble wait.\r\n            if ($el.hasClass(CLEARWAIT_CLASS)) {\r\n                if (isFullPage(el)) {\r\n                    $.blockUI(fullPageVisibleBlockOptions);\r\n                } else {\r\n                    $el.block(visibleBlockOptions);\r\n                }\r\n            }\r\n        }, 300);\r\n\r\n    }\r\n\r\n    function unblockEl(el) {\r\n        var $el = $(el);\r\n\r\n        if (!isBlockUISupported()) {\r\n            return;\r\n        }\r\n\r\n        if (isFullPage(el)) {\r\n            $.unblockUI();\r\n        } else {\r\n            $el.unblock();\r\n        }\r\n\r\n        $el.removeClass(CLEARWAIT_CLASS);\r\n    }\r\n\r\n    angular.module('sky.wait', [])\r\n        .directive('bbWait', ['$timeout', function ($timeout) {\r\n            /// <summary>\r\n            /// This directive provides an attribute that can be placed on elements indicating whether they should or shouldn't be blocked for waiting.\r\n            /// </summary>\r\n\r\n            if (isBlockUISupported) {\r\n                // Clear any blockUI defaults.  Specifying these in the block call itself just gets appended to the defaults\r\n                // but is incapable of generically clearing them all.\r\n                $.blockUI.defaults.css = {};\r\n                $.blockUI.defaults.overlayCSS = {};\r\n            }\r\n\r\n            return {\r\n                restrict: 'A',\r\n                link: function (scope, el, attrs) {\r\n                    scope.$watch(attrs.bbWait, function (value, oldValue) {\r\n                        if (value && !oldValue) {\r\n                            blockEl(el, $timeout);\r\n                        } else if (oldValue && !value) {\r\n                            unblockEl(el);\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n        }]);\r\n\r\n}(jQuery));",
    "/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('sky.window', [])\r\n        .constant('bbWindowConfig', {\r\n            productName: ''\r\n        })\r\n        .factory('bbWindow', ['$window', 'bbWindowConfig', '$timeout', function ($window, bbWindowConfig, $timeout) {\r\n            return {\r\n                setWindowTitle: function (textToAppend) {\r\n                    var title = bbWindowConfig.productName || '';\r\n\r\n                    if (textToAppend) {\r\n                        if (title) {\r\n                            title += ' - ';\r\n                        }\r\n\r\n                        title += textToAppend;\r\n                    }\r\n\r\n                    //Adding a delay so the setWindowTitle method can be safely called after an angular\r\n                    //state change without taking affect until after the browser has completed its\r\n                    //state chagne.  Without this, the previous page will be renamed in the browser history.\r\n                    $timeout(function () {\r\n                        $window.document.title = title;\r\n                    });\r\n                }\r\n            };\r\n        }]);\r\n}());",
    "/*jslint browser: true */\r\n/*global angular */\r\n\r\n(function (window) {\r\n    'use strict';\r\n\r\n    function defineModule(moment) {\r\n        var modules = [\r\n            'sky.autofocus',\r\n            'sky.charts',\r\n            'sky.check',\r\n            'sky.checklist',\r\n            'sky.data',\r\n            'sky.datefield',\r\n            'sky.daterangepicker',\r\n            'sky.filters',\r\n            'sky.format',\r\n            'sky.grids',\r\n            'sky.helpbutton',\r\n            'sky.helpwidget',\r\n            'sky.highlight',\r\n            'sky.mediabreakpoints',\r\n            'sky.modal',\r\n            'sky.money',\r\n            'sky.omnibar',\r\n            'sky.pagination',\r\n            'sky.popover',\r\n            'sky.resources',\r\n            'sky.scrollintoview',\r\n            'sky.tabs',\r\n            'sky.templating',\r\n            'sky.textexpand',\r\n            'sky.tiles',\r\n            'sky.tooltip',\r\n            'sky.validation',\r\n            'sky.viewkeeper',\r\n            'sky.wait',\r\n            'sky.window',\r\n            'sky.uiselecthelper'\r\n        ];\r\n\r\n        try {\r\n            angular.module(\"toastr\");\r\n            modules.push('sky.toast');\r\n        } catch (ignore) {\r\n            /* The toastr module isn't defined.  Do not load sky.toast module */\r\n        }\r\n\r\n        angular.module('sky.moment', [])\r\n            .constant('bbMoment', moment);\r\n\r\n        angular.module('sky', modules);\r\n    }\r\n\r\n    if (typeof window.define === 'function' && window.define.amd) {\r\n        window.define(['moment'], defineModule);\r\n    } else if (window.module !== undefined && window.module && window.module.exports) {\r\n        defineModule(window.require('moment'));\r\n    } else {\r\n        defineModule(window.moment);\r\n    }\r\n}(this));",
    "angular.module('sky.templates', ['sky/templates/charts/scatterplot.html', 'sky/templates/checklist/checklist.html', 'sky/templates/daterangepicker/daterangepicker.html', 'sky/templates/grids/actionbar.html', 'sky/templates/grids/columnpicker.html', 'sky/templates/grids/filters.html', 'sky/templates/grids/filtersgroup.html', 'sky/templates/grids/filterssummary.html', 'sky/templates/grids/grid.html', 'sky/templates/grids/seemore.html', 'sky/templates/modals/modalheader.html', 'sky/templates/popover/popup.html', 'sky/templates/tabs/tab.html', 'sky/templates/tiles/tile.html', 'sky/templates/tiles/tiledashboard.html']);\r\n\r\nangular.module(\"sky/templates/charts/scatterplot.html\", []).run([\"$templateCache\", function($templateCache) {\r\n  $templateCache.put(\"sky/templates/charts/scatterplot.html\",\r\n    \"<div class=\\\"bb-chart-container\\\" style=\\\"position: relative\\\">\\n\" +\r\n    \"  <div ng-style=\\\"moveBackStyle()\\\" ng-show=\\\"moveBackVisible\\\">\\n\" +\r\n    \"    <a ng-href=\\\"#\\\" ng-click=\\\"moveBack()\\\" ng-disabled=\\\"moveBackDisabled()\\\">\\n\" +\r\n    \"      <i class=\\\"glyphicon glyphicon-play icon-flipped\\\"></i>\\n\" +\r\n    \"    </a>\\n\" +\r\n    \"  </div>\\n\" +\r\n    \"  <div ng-style=\\\"moveForwardStyle()\\\" ng-show=\\\"moveForwardVisible\\\">\\n\" +\r\n    \"    <a ng-href=\\\"#\\\" ng-click=\\\"moveForward()\\\" ng-disabled=\\\"moveForwardDisabled()\\\">\\n\" +\r\n    \"      <i class=\\\"glyphicon glyphicon-play\\\"></i>\\n\" +\r\n    \"    </a>\\n\" +\r\n    \"  </div>\\n\" +\r\n    \"  <div class=\\\"bb-chart\\\"></div>\\n\" +\r\n    \"</div>\");\r\n}]);\r\n\r\nangular.module(\"sky/templates/checklist/checklist.html\", []).run([\"$templateCache\", function($templateCache) {\r\n  $templateCache.put(\"sky/templates/checklist/checklist.html\",\r\n    \"<div>\\n\" +\r\n    \"  <div ng-if=\\\"bbChecklistIncludeSearch\\\" class=\\\"checklist-filter-bar\\\">\\n\" +\r\n    \"    <input type=\\\"text\\\" maxlength=\\\"255\\\" placeholder=\\\"{{bbChecklistSearchPlaceholder}}\\\" ng-model=\\\"locals.searchText\\\" ng-model-options=\\\"{debounce: bbChecklistSearchDebounce}\\\" data-bbauto-field=\\\"ChecklistSearch\\\">\\n\" +\r\n    \"  </div>\\n\" +\r\n    \"  <div class=\\\"checklist-filter-bar\\\">\\n\" +\r\n    \"    <a class=\\\"checklist-link\\\" data-bbauto-field=\\\"ChecklistSelectAll\\\" href=\\\"#\\\" ng-click=\\\"locals.selectAll()\\\">{{locals.selectAllText}}</a>\\n\" +\r\n    \"    <a class=\\\"checklist-link\\\" data-bbauto-field=\\\"ChecklistClear\\\" href=\\\"#\\\" ng-click=\\\"locals.clear()\\\">{{locals.clearAllText}}</a>\\n\" +\r\n    \"  </div>\\n\" +\r\n    \"  <div class=\\\"checklist-wrapper\\\">\\n\" +\r\n    \"    <table class=\\\"table checklist-table\\\">\\n\" +\r\n    \"      <thead>\\n\" +\r\n    \"        <tr>\\n\" +\r\n    \"          <th class=\\\"checklist-checkbox-column\\\"></th>\\n\" +\r\n    \"          <th ng-repeat=\\\"column in locals.columns\\\" class=\\\"{{column.class}}\\\" ng-style=\\\"{'width': column.width}\\\">{{column.caption}}</th>\\n\" +\r\n    \"        </tr>\\n\" +\r\n    \"      </thead>\\n\" +\r\n    \"      <tbody bb-highlight=\\\"locals.searchText\\\" bb-highlight-beacon=\\\"locals.highlightRefresh\\\" data-bbauto-repeater=\\\"ChecklistItems\\\" data-bbauto-repeater-count=\\\"{{bbChecklistItems.length}}\\\">\\n\" +\r\n    \"        <tr ng-repeat=\\\"item in bbChecklistItems\\\" ng-click=\\\"locals.rowClicked(item);\\\">\\n\" +\r\n    \"          <td><input type=\\\"checkbox\\\" checklist-model=\\\"bbChecklistSelectedItems\\\" checklist-value=\\\"item\\\" ng-click=\\\"$event.stopPropagation();\\\" data-bbauto-field=\\\"{{item[bbChecklistAutomationField]}}\\\" /></td>\\n\" +\r\n    \"          <td ng-repeat=\\\"column in locals.columns\\\" class=\\\"{{column.class}}\\\" data-bbauto-field=\\\"{{column.automationId}}\\\" data-bbauto-index=\\\"{{$parent.$index}}\\\">{{item[column.field]}}</td>\\n\" +\r\n    \"        </tr>\\n\" +\r\n    \"      </tbody>\\n\" +\r\n    \"    </table>\\n\" +\r\n    \"    <div class=\\\"checklist-no-items\\\" ng-if=\\\"!bbChecklistItems.length\\\">{{locals.noItemsText || locals.defaultNoItemsText}}</div>\\n\" +\r\n    \"  </div>\\n\" +\r\n    \"  <div ng-transclude></div>\\n\" +\r\n    \"</div>\");\r\n}]);\r\n\r\nangular.module(\"sky/templates/daterangepicker/daterangepicker.html\", []).run([\"$templateCache\", function($templateCache) {\r\n  $templateCache.put(\"sky/templates/daterangepicker/daterangepicker.html\",\r\n    \"<div>\\n\" +\r\n    \"    <select data-bbauto-field=\\\"{{bbDateRangePickerAutomationId}}_DateRangeType\\\"\\n\" +\r\n    \"            class=\\\"form-control\\\"\\n\" +\r\n    \"            ng-options=\\\"locals.bbDateRangePicker.getDateRangeTypeCaption(t) for t in (bbDateRangePickerOptions.availableDateRangeTypes || locals.bbDateRangePicker.defaultDateRangeOptions)\\\"\\n\" +\r\n    \"            ng-model=\\\"bbDateRangePickerValue.dateRangeType\\\" />\\n\" +\r\n    \"</div>\");\r\n}]);\r\n\r\nangular.module(\"sky/templates/grids/actionbar.html\", []).run([\"$templateCache\", function($templateCache) {\r\n  $templateCache.put(\"sky/templates/grids/actionbar.html\",\r\n    \"<div ng-show=\\\"locals.showActionBar\\\" data-bbauto-view=\\\"GridActionBar\\\">\\n\" +\r\n    \"    <div ng-if=\\\"!locals.showMobileActions\\\" class=\\\"grid-action-bar\\\">\\n\" +\r\n    \"        <div ng-if=\\\"!locals.mobileButtons\\\" class=\\\"grid-action-bar-buttons\\\" ng-repeat=\\\"action in locals.actions\\\">\\n\" +\r\n    \"            <button class=\\\"btn\\\" ng-class=\\\"{'btn-success': action.isPrimary, 'btn-white': !action.isPrimary}\\\" data-bbauto-field=\\\"{{action.automationId}}\\\" ng-click=\\\"action.actionCallback()\\\" ng-disabled=\\\"action.selections.length < 1\\\">{{action.title}} ({{action.selections.length}})</button>\\n\" +\r\n    \"        </div>\\n\" +\r\n    \"        <div ng-if=\\\"locals.mobileButtons\\\" class=\\\"grid-action-bar-buttons\\\">\\n\" +\r\n    \"            <button class=\\\"btn btn-success\\\" ng-click=\\\"locals.chooseAction()\\\">\\n\" +\r\n    \"                <span class=\\\"sky-icon sky-icon-multi-action\\\"></span>\\n\" +\r\n    \"                <span>{{resources.grid_action_bar_choose_action}}</span>\\n\" +\r\n    \"            </button>\\n\" +\r\n    \"        </div>\\n\" +\r\n    \"        <button class=\\\"btn grid-action-bar-clear-selection\\\" ng-click=\\\"locals.clearSelection()\\\">\\n\" +\r\n    \"            {{resources.grid_action_bar_clear_selection}}\\n\" +\r\n    \"        </button>\\n\" +\r\n    \"    </div>\\n\" +\r\n    \"    <div ng-if=\\\"locals.showMobileActions\\\" class=\\\"grid-action-bar-mobile-buttons\\\">\\n\" +\r\n    \"        <div class=\\\"grid-action-bar-btn-container\\\">\\n\" +\r\n    \"            <div ng-repeat=\\\"action in locals.actions\\\">\\n\" +\r\n    \"                <button class=\\\"grid-action-bar-mobile-btn btn btn-block btn-lg\\\" ng-class=\\\"{'btn-success': action.isPrimary, 'btn-white': !action.isPrimary}\\\" ng-click=\\\"action.actionCallback()\\\" ng-disabled=\\\"action.selections.length < 1\\\">{{action.title}} ({{action.selections.length}})</button>\\n\" +\r\n    \"            </div>\\n\" +\r\n    \"        </div>\\n\" +\r\n    \"        <button class=\\\"btn grid-action-bar-mobile-cancel grid-action-bar-clear-selection\\\" ng-click=\\\"locals.cancelChooseAction()\\\">\\n\" +\r\n    \"            {{resources.grid_action_bar_cancel_mobile_actions}}\\n\" +\r\n    \"        </button>\\n\" +\r\n    \"    </div>\\n\" +\r\n    \"</div>\");\r\n}]);\r\n\r\nangular.module(\"sky/templates/grids/columnpicker.html\", []).run([\"$templateCache\", function($templateCache) {\r\n  $templateCache.put(\"sky/templates/grids/columnpicker.html\",\r\n    \"<bb-modal data-bbauto-view=\\\"ColumnPicker\\\">\\n\" +\r\n    \"  <bb-modal-header bb-modal-help-key=\\\"$parent.columnPickerHelpKey\\\">{{resources.grid_column_picker_header}}</bb-modal-header>\\n\" +\r\n    \"  <div bb-modal-body>\\n\" +\r\n    \"    <div class=\\\"checklist-filter-bar\\\">\\n\" +\r\n    \"      <input type=\\\"text\\\" placeholder=\\\"{{resources.grid_column_picker_search_placeholder}}\\\" ng-model=\\\"locals.searchText\\\" ng-change=\\\"applyFilters()\\\" data-bbauto-field=\\\"ColumnPickerSearchBox\\\">\\n\" +\r\n    \"    </div>\\n\" +\r\n    \"    <div class=\\\"checklist-filter-bar\\\">\\n\" +\r\n    \"      <button ng-repeat=\\\"category in categories\\\" type=\\\"button\\\" class=\\\"btn btn-sm\\\" ng-click=\\\"filterByCategory(category)\\\" ng-class=\\\"locals.selectedCategory === category ? 'btn-primary' : 'btn-default'\\\" data-bbauto-field=\\\"{{category}}\\\">{{category}}</button>\\n\" +\r\n    \"    </div>\\n\" +\r\n    \"    <div class=\\\"checklist-wrapper grid-column-picker-wrapper\\\">\\n\" +\r\n    \"      <table data-bbauto-field=\\\"ColumnPickerTable\\\" class=\\\"table grid-column-picker-table\\\">\\n\" +\r\n    \"        <thead>\\n\" +\r\n    \"          <tr>\\n\" +\r\n    \"            <th class=\\\"checklist-checkbox-column\\\"></th>\\n\" +\r\n    \"            <th class=\\\"name-column\\\" data-bbauto-field=\\\"ColumnNameHeader\\\">{{resources.grid_column_picker_name_header}}</th>\\n\" +\r\n    \"            <th class=\\\"description-column\\\" data-bbauto-field=\\\"ColumnDescriptionHeader\\\">{{resources.grid_column_picker_description_header}}</th>\\n\" +\r\n    \"          </tr>\\n\" +\r\n    \"        </thead>\\n\" +\r\n    \"        <tbody bb-highlight=\\\"locals.searchText\\\" data-bbauto-repeater=\\\"ColumnChooserFields\\\" data-bbauto-repeater-count=\\\"{{columns.length}}\\\">\\n\" +\r\n    \"          <tr ng-repeat=\\\"column in columns\\\" ng-click=\\\"column.selected = !column.selected\\\" ng-show=\\\"!column.hidden\\\">\\n\" +\r\n    \"            <td><input data-bbauto-field=\\\"{{column.name}}\\\" data-bbauto-index=\\\"{{$index}}\\\" type=\\\"checkbox\\\" ng-model=\\\"column.selected\\\" ng-click=\\\"$event.stopPropagation();\\\" /></td>\\n\" +\r\n    \"            <td data-bbauto-field=\\\"ColumnCaption\\\" data-bbauto-index=\\\"{{$index}}\\\">{{column.caption}}</td>\\n\" +\r\n    \"            <td data-bbauto-field=\\\"ColumnDescription\\\" data-bbauto-index=\\\"{{$index}}\\\">{{column.description}}</td>\\n\" +\r\n    \"          </tr>\\n\" +\r\n    \"        </tbody>\\n\" +\r\n    \"      </table>\\n\" +\r\n    \"    </div>\\n\" +\r\n    \"  </div>\\n\" +\r\n    \"  <bb-modal-footer>\\n\" +\r\n    \"    <bb-modal-footer-button-primary data-bbauto-field=\\\"ColumnPickerSubmit\\\" ng-click=\\\"applyChanges()\\\">{{resources.grid_column_picker_submit}}</bb-modal-footer-button-primary>\\n\" +\r\n    \"    <bb-modal-footer-button-cancel data-bbauto-field=\\\"ColumnPickerCancel\\\"></bb-modal-footer-button-cancel>\\n\" +\r\n    \"  </bb-modal-footer>\\n\" +\r\n    \"</bb-modal>\");\r\n}]);\r\n\r\nangular.module(\"sky/templates/grids/filters.html\", []).run([\"$templateCache\", function($templateCache) {\r\n  $templateCache.put(\"sky/templates/grids/filters.html\",\r\n    \"<div style=\\\"display:none;\\\">\\n\" +\r\n    \"    <div bb-scrolling-view-keeper=\\\"viewKeeperOptions\\\" class=\\\"grid-filters\\\">\\n\" +\r\n    \"        <div class=\\\"grid-filters-box\\\" bb-scroll-into-view=\\\"expanded\\\">\\n\" +\r\n    \"            <div class=\\\"grid-filters-icon\\\" ng-click=\\\"expanded = !expanded\\\"></div>\\n\" +\r\n    \"            <div class=\\\"grid-filters-container\\\" style=\\\"display:none;\\\">\\n\" +\r\n    \"                <div class=\\\"grid-filters-header\\\" ng-click=\\\"expanded = !expanded\\\">\\n\" +\r\n    \"                    <h4 class=\\\"grid-filters-header-title\\\">{{resources.grid_filters_header}}</h4>\\n\" +\r\n    \"                    <span class=\\\"grid-filters-header-hide\\\">{{resources.grid_filters_hide}}</span>\\n\" +\r\n    \"                </div>\\n\" +\r\n    \"                <div class=\\\"grid-filters-body\\\" ng-transclude></div>\\n\" +\r\n    \"                <div class=\\\"grid-filters-footer\\\">\\n\" +\r\n    \"                    <button data-bbauto-field=\\\"ApplyGridFilters\\\" class=\\\"btn btn-primary\\\" type=\\\"submit\\\" ng-click=\\\"applyFilters()\\\">{{resources.grid_filters_apply}}</button>\\n\" +\r\n    \"                    <button data-bbauto-field=\\\"ClearGridFilters\\\" class=\\\"btn btn-white\\\" type=\\\"button\\\" ng-click=\\\"clearFilters()\\\">{{resources.grid_filters_clear}}</button>\\n\" +\r\n    \"                </div>\\n\" +\r\n    \"            </div>\\n\" +\r\n    \"        </div>\\n\" +\r\n    \"    </div>\\n\" +\r\n    \"</div>\");\r\n}]);\r\n\r\nangular.module(\"sky/templates/grids/filtersgroup.html\", []).run([\"$templateCache\", function($templateCache) {\r\n  $templateCache.put(\"sky/templates/grids/filtersgroup.html\",\r\n    \"<div class=\\\"form-group\\\" ng-class=\\\"isCollapsed ? 'collapsed' : 'collapsible'\\\">\\n\" +\r\n    \"    <div ng-click=\\\"isCollapsed = !isCollapsed\\\">\\n\" +\r\n    \"        <i ng-class=\\\"'glyphicon-chevron-' + (isCollapsed ? 'down' : 'up')\\\" class=\\\"grid-filters-body-group-header-icon glyphicon\\\"></i>\\n\" +\r\n    \"        <label>{{bbGridFiltersGroupLabel}}</label>\\n\" +\r\n    \"    </div>\\n\" +\r\n    \"    <div class=\\\"grid-filters-body-group-content\\\" collapse=\\\"!!isCollapsed\\\" ng-transclude></div>\\n\" +\r\n    \"</div>\");\r\n}]);\r\n\r\nangular.module(\"sky/templates/grids/filterssummary.html\", []).run([\"$templateCache\", function($templateCache) {\r\n  $templateCache.put(\"sky/templates/grids/filterssummary.html\",\r\n    \"<div class=\\\"toolbar table-toolbar applied-filter-bar\\\">\\n\" +\r\n    \"    <div class=\\\"applied-filter-header\\\">\\n\" +\r\n    \"        <span>{{resources.grid_filters_summary_header}}</span>\\n\" +\r\n    \"    </div>\\n\" +\r\n    \"    <div class=\\\"applied-filter-content\\\" ng-click=\\\"openFilterMenu()\\\">\\n\" +\r\n    \"        <span class=\\\"applied-filter-text\\\" data-bbauto-field=\\\"FilterSummaryText\\\" ng-transclude></span>\\n\" +\r\n    \"        <span class=\\\"sky-icon-close applied-filter-remove\\\" data-bbauto-field=\\\"FilterSummaryRemove\\\" ng-click=\\\"clearFilters(); $event.stopPropagation();\\\"></span>\\n\" +\r\n    \"    </div>\\n\" +\r\n    \"</div>\\n\" +\r\n    \"\");\r\n}]);\r\n\r\nangular.module(\"sky/templates/grids/grid.html\", []).run([\"$templateCache\", function($templateCache) {\r\n  $templateCache.put(\"sky/templates/grids/grid.html\",\r\n    \"<section class=\\\"col-xs-12 bb-grid-container\\\" data-bbauto-grid=\\\"{{options.automationId}}\\\" data-bbauto-timestamp=\\\"{{locals.timestamp}}\\\" data-bbauto-repeater=\\\"{{options.automationId}}\\\" data-bbauto-repeater-count=\\\"{{locals.rowcount}}\\\">\\n\" +\r\n    \"  <div ng-transclude></div>\\n\" +\r\n    \"  <div class=\\\"grid-toolbar-container\\\" style=\\\"display:none;\\\">\\n\" +\r\n    \"    <div class=\\\"toolbar table-toolbar\\\">\\n\" +\r\n    \"      <div data-bbauto-field=\\\"AddButton\\\" class='add-button btn-success btn btn-sm' ng-show=\\\"locals.hasAdd\\\" ng-click=\\\"locals.onAddClick()\\\">\\n\" +\r\n    \"        <span class='toolbar-button-icon sky-icon sky-icon-add-fill'></span>\\n\" +\r\n    \"        <span class='toolbar-button-label'>{{options.onAddClickLabel}}</span>\\n\" +\r\n    \"      </div>\\n\" +\r\n    \"      <div class=\\\"search-container\\\">\\n\" +\r\n    \"        <input type=\\\"text\\\" placeholder=\\\"{{resources.grid_search_placeholder}}\\\" ng-model=\\\"searchText\\\" ng-keyup=\\\"$event.keyCode == 13 && locals.applySearchText();\\\" data-bbauto-field=\\\"SearchBox\\\">\\n\" +\r\n    \"        <div class=\\\"search-icon\\\" data-bbauto-field=\\\"SearchButton\\\" ng-click=\\\"locals.applySearchText();\\\"></div>\\n\" +\r\n    \"      </div>\\n\" +\r\n    \"      <div class=\\\"toolbar-button column-picker-button\\\" data-bbauto-field=\\\"ColumnPickerButton\\\" ng-show=\\\"locals.hasColPicker\\\" ng-click=\\\"locals.openColumnPicker()\\\">\\n\" +\r\n    \"        <span class=\\\"toolbar-button-icon column-picker-button-icon\\\"></span>\\n\" +\r\n    \"        <span class=\\\"toolbar-button-label\\\">{{resources.grid_columns_button}}</span>\\n\" +\r\n    \"      </div>\\n\" +\r\n    \"      <div class=\\\"toolbar-button filter-button\\\" data-bbauto-field=\\\"FilterButton\\\" ng-show=\\\"locals.hasFilters\\\" ng-click=\\\"locals.toggleFilterMenu();\\\">\\n\" +\r\n    \"        <span class=\\\"toolbar-button-icon filter-button-icon\\\"></span>\\n\" +\r\n    \"        <span class=\\\"toolbar-button-label\\\">{{resources.grid_filters_button}}</span>\\n\" +\r\n    \"      </div>\\n\" +\r\n    \"    </div>\\n\" +\r\n    \"  </div>\\n\" +\r\n    \"  <div class=\\\"table-responsive\\\">\\n\" +\r\n    \"      <table id=\\\"{{locals.gridId}}\\\" ng-class=\\\"{'grid-multiselect' : locals.multiselect}\\\"></table>\\n\" +\r\n    \"  </div>\\n\" +\r\n    \"  <div class=\\\"table-loadmore\\\" data-bbauto-field=\\\"LoadMoreButton\\\" ng-show=\\\"options.hasMoreRows\\\" ng-click=\\\"locals.loadMore();\\\">\\n\" +\r\n    \"    <span class=\\\"fa fa-cloud-download\\\"></span>\\n\" +\r\n    \"    <a href=\\\"#\\\">{{resources.grid_load_more}}</a>\\n\" +\r\n    \"  </div>\\n\" +\r\n    \"    <div class=\\\"grid-action-bar-and-back-to-top\\\">\\n\" +\r\n    \"        <bb-grid-action-bar ng-if=\\\"locals.multiselect && multiselectActions && updateMultiselectActions\\\" bb-multiselect-actions=\\\"multiselectActions\\\" bb-selections-updated=\\\"updateMultiselectActions(selections)\\\">\\n\" +\r\n    \"        </bb-grid-action-bar>\\n\" +\r\n    \"        <div class=\\\"table-backtotop\\\" data-bbauto-field=\\\"BackToTopButton\\\" ng-show=\\\"locals.isScrolled\\\" ng-click=\\\"locals.backToTop();\\\">\\n\" +\r\n    \"            <span style=\\\"float:left\\\">\\n\" +\r\n    \"                <span class=\\\"fa fa-arrow-up \\\"></span>\\n\" +\r\n    \"                <a href=\\\"#\\\">{{resources.grid_back_to_top}}</a>\\n\" +\r\n    \"            </span>\\n\" +\r\n    \"            <span style=\\\"float:right\\\">\\n\" +\r\n    \"                <span class=\\\"fa fa-arrow-up \\\"></span>\\n\" +\r\n    \"                <a href=\\\"#\\\">{{resources.grid_back_to_top}}</a>\\n\" +\r\n    \"            </span>\\n\" +\r\n    \"            <div class=\\\"clearfix\\\"></div>\\n\" +\r\n    \"        </div>\\n\" +\r\n    \"    </div>\\n\" +\r\n    \"</section>\");\r\n}]);\r\n\r\nangular.module(\"sky/templates/grids/seemore.html\", []).run([\"$templateCache\", function($templateCache) {\r\n  $templateCache.put(\"sky/templates/grids/seemore.html\",\r\n    \"<div bb-text-expand=\\\"data\\\" bb-text-expand-max-length=\\\"100\\\" style=\\\"white-space: pre-wrap\\\"></div>\");\r\n}]);\r\n\r\nangular.module(\"sky/templates/modals/modalheader.html\", []).run([\"$templateCache\", function($templateCache) {\r\n  $templateCache.put(\"sky/templates/modals/modalheader.html\",\r\n    \"<div class=\\\"modal-header\\\">\\n\" +\r\n    \"    <h4 class=\\\"dialogHeader\\\" ng-transclude></h4>\\n\" +\r\n    \"    <button type=\\\"button\\\" class=\\\"close\\\" ng-click=\\\"$parent.$parent.$dismiss('cancel');\\\">&times;</button>\\n\" +\r\n    \"    <div bb-help-button bb-help-key=\\\"{{bbModalHelpKey}}\\\" bb-set-help-key-override=\\\"true\\\" data-bbauto-field=\\\"ModalHelpButton\\\"></div>\\n\" +\r\n    \"</div>\");\r\n}]);\r\n\r\nangular.module(\"sky/templates/popover/popup.html\", []).run([\"$templateCache\", function($templateCache) {\r\n  $templateCache.put(\"sky/templates/popover/popup.html\",\r\n    \"<div class=\\\"popover {{placement}} fade\\\" ng-class=\\\"{ in: isOpen()}\\\">\\n\" +\r\n    \"  <div class=\\\"arrow\\\"></div>\\n\" +\r\n    \"\\n\" +\r\n    \"  <div class=\\\"popover-inner\\\">\\n\" +\r\n    \"    <h3 class=\\\"popover-title\\\" ng-bind=\\\"title\\\" ng-show=\\\"title\\\"></h3>\\n\" +\r\n    \"    <div class=\\\"popover-content\\\"></div>\\n\" +\r\n    \"  </div>\\n\" +\r\n    \"</div>\");\r\n}]);\r\n\r\nangular.module(\"sky/templates/tabs/tab.html\", []).run([\"$templateCache\", function($templateCache) {\r\n  $templateCache.put(\"sky/templates/tabs/tab.html\",\r\n    \"<div ng-hide=\\\"!tabsInitialized\\\" data-bbauto-field=\\\"{{bbTabAutomationId}}\\\" class=\\\"responsiveTabControl\\\">\\n\" +\r\n    \"    <ul ng-transclude>\\n\" +\r\n    \"\\n\" +\r\n    \"    </ul>\\n\" +\r\n    \"</div>\");\r\n}]);\r\n\r\nangular.module(\"sky/templates/tiles/tile.html\", []).run([\"$templateCache\", function($templateCache) {\r\n  $templateCache.put(\"sky/templates/tiles/tile.html\",\r\n    \"<section ng-class=\\\"isCollapsed ? 'collapsed' : 'collapsible'\\\" class=\\\"ibox float-e-margins tile\\\">\\n\" +\r\n    \"  <div bb-scroll-into-view=\\\"scrollIntoView\\\">\\n\" +\r\n    \"    <div class=\\\"ibox-title\\\" ng-click=\\\"titleClick()\\\">\\n\" +\r\n    \"      <h5 class=\\\"tile-header\\\">{{tileHeader}}</h5>\\n\" +\r\n    \"      <div class=\\\"ibox-tools\\\">\\n\" +\r\n    \"        <i ng-class=\\\"'glyphicon-chevron-' + (isCollapsed ? 'down' : 'up')\\\" class=\\\"glyphicon tile-chevron\\\"></i>\\n\" +\r\n    \"        <i class=\\\"tile-grab-handle glyphicon glyphicon-th\\\" ng-click=\\\"$event.stopPropagation()\\\"></i>\\n\" +\r\n    \"      </div>\\n\" +\r\n    \"      <div class=\\\"clearfix\\\"></div>\\n\" +\r\n    \"    </div>\\n\" +\r\n    \"    <div collapse=\\\"isCollapsed\\\" class=\\\"ibox-content tile-content\\\" ng-transclude>\\n\" +\r\n    \"    </div>\\n\" +\r\n    \"  </div>\\n\" +\r\n    \"</section>\");\r\n}]);\r\n\r\nangular.module(\"sky/templates/tiles/tiledashboard.html\", []).run([\"$templateCache\", function($templateCache) {\r\n  $templateCache.put(\"sky/templates/tiles/tiledashboard.html\",\r\n    \"<div class=\\\"row-fluid\\\">\\n\" +\r\n    \"  <div class=\\\"col-md-6 page-content-tile-column page-content-column-sortable\\\" data-dashboard-column=\\\"1\\\">\\n\" +\r\n    \"    <div ng-repeat=\\\"tile in tiles\\\" data-tile-id=\\\"{{tile.id}}\\\" data-ui-view=\\\"{{tile.view_name}}\\\" id=\\\"{{tile.view_name}}\\\">\\n\" +\r\n    \"    </div>\\n\" +\r\n    \"  </div>\\n\" +\r\n    \"\\n\" +\r\n    \"  <div class=\\\"col-md-6 page-content-tile-column page-content-column-sortable\\\" data-dashboard-column=\\\"2\\\">\\n\" +\r\n    \"  </div>\\n\" +\r\n    \"</div>\");\r\n}]);\r\n"
  ]
}